// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserKycDocument is an object representing the database table.
type UserKycDocument struct {
	ID               int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID           int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Type             string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	Format           string    `boil:"format" json:"format" toml:"format" yaml:"format"`
	Side             string    `boil:"side" json:"side" toml:"side" yaml:"side"`
	IDCountryCode    string    `boil:"id_country_code" json:"id_country_code" toml:"id_country_code" yaml:"id_country_code"`
	IDIssueDate      time.Time `boil:"id_issue_date" json:"id_issue_date" toml:"id_issue_date" yaml:"id_issue_date"`
	IDExpirationDate time.Time `boil:"id_expiration_date" json:"id_expiration_date" toml:"id_expiration_date" yaml:"id_expiration_date"`
	IDNumber         string    `boil:"id_number" json:"id_number" toml:"id_number" yaml:"id_number"`
	UploadDate       time.Time `boil:"upload_date" json:"upload_date" toml:"upload_date" yaml:"upload_date"`
	CreatedAt        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt        time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy        string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *userKycDocumentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userKycDocumentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserKycDocumentColumns = struct {
	ID               string
	UserID           string
	Type             string
	Format           string
	Side             string
	IDCountryCode    string
	IDIssueDate      string
	IDExpirationDate string
	IDNumber         string
	UploadDate       string
	CreatedAt        string
	UpdatedAt        string
	UpdatedBy        string
}{
	ID:               "id",
	UserID:           "user_id",
	Type:             "type",
	Format:           "format",
	Side:             "side",
	IDCountryCode:    "id_country_code",
	IDIssueDate:      "id_issue_date",
	IDExpirationDate: "id_expiration_date",
	IDNumber:         "id_number",
	UploadDate:       "upload_date",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	UpdatedBy:        "updated_by",
}

// UserKycDocumentRels is where relationship names are stored.
var UserKycDocumentRels = struct {
	User string
}{
	User: "User",
}

// userKycDocumentR is where relationships are stored.
type userKycDocumentR struct {
	User *UserProfile
}

// NewStruct creates a new relationship struct
func (*userKycDocumentR) NewStruct() *userKycDocumentR {
	return &userKycDocumentR{}
}

// userKycDocumentL is where Load methods for each relationship are stored.
type userKycDocumentL struct{}

var (
	userKycDocumentColumns               = []string{"id", "user_id", "type", "format", "side", "id_country_code", "id_issue_date", "id_expiration_date", "id_number", "upload_date", "created_at", "updated_at", "updated_by"}
	userKycDocumentColumnsWithoutDefault = []string{"user_id", "type", "format", "side", "id_country_code", "id_issue_date", "id_expiration_date", "id_number", "updated_by"}
	userKycDocumentColumnsWithDefault    = []string{"id", "upload_date", "created_at", "updated_at"}
	userKycDocumentPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserKycDocumentSlice is an alias for a slice of pointers to UserKycDocument.
	// This should generally be used opposed to []UserKycDocument.
	UserKycDocumentSlice []*UserKycDocument
	// UserKycDocumentHook is the signature for custom UserKycDocument hook methods
	UserKycDocumentHook func(boil.Executor, *UserKycDocument) error

	userKycDocumentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userKycDocumentType                 = reflect.TypeOf(&UserKycDocument{})
	userKycDocumentMapping              = queries.MakeStructMapping(userKycDocumentType)
	userKycDocumentPrimaryKeyMapping, _ = queries.BindMapping(userKycDocumentType, userKycDocumentMapping, userKycDocumentPrimaryKeyColumns)
	userKycDocumentInsertCacheMut       sync.RWMutex
	userKycDocumentInsertCache          = make(map[string]insertCache)
	userKycDocumentUpdateCacheMut       sync.RWMutex
	userKycDocumentUpdateCache          = make(map[string]updateCache)
	userKycDocumentUpsertCacheMut       sync.RWMutex
	userKycDocumentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var userKycDocumentBeforeInsertHooks []UserKycDocumentHook
var userKycDocumentBeforeUpdateHooks []UserKycDocumentHook
var userKycDocumentBeforeDeleteHooks []UserKycDocumentHook
var userKycDocumentBeforeUpsertHooks []UserKycDocumentHook

var userKycDocumentAfterInsertHooks []UserKycDocumentHook
var userKycDocumentAfterSelectHooks []UserKycDocumentHook
var userKycDocumentAfterUpdateHooks []UserKycDocumentHook
var userKycDocumentAfterDeleteHooks []UserKycDocumentHook
var userKycDocumentAfterUpsertHooks []UserKycDocumentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserKycDocument) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userKycDocumentBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserKycDocument) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userKycDocumentBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserKycDocument) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userKycDocumentBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserKycDocument) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userKycDocumentBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserKycDocument) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userKycDocumentAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserKycDocument) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userKycDocumentAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserKycDocument) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userKycDocumentAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserKycDocument) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userKycDocumentAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserKycDocument) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userKycDocumentAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserKycDocumentHook registers your hook function for all future operations.
func AddUserKycDocumentHook(hookPoint boil.HookPoint, userKycDocumentHook UserKycDocumentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userKycDocumentBeforeInsertHooks = append(userKycDocumentBeforeInsertHooks, userKycDocumentHook)
	case boil.BeforeUpdateHook:
		userKycDocumentBeforeUpdateHooks = append(userKycDocumentBeforeUpdateHooks, userKycDocumentHook)
	case boil.BeforeDeleteHook:
		userKycDocumentBeforeDeleteHooks = append(userKycDocumentBeforeDeleteHooks, userKycDocumentHook)
	case boil.BeforeUpsertHook:
		userKycDocumentBeforeUpsertHooks = append(userKycDocumentBeforeUpsertHooks, userKycDocumentHook)
	case boil.AfterInsertHook:
		userKycDocumentAfterInsertHooks = append(userKycDocumentAfterInsertHooks, userKycDocumentHook)
	case boil.AfterSelectHook:
		userKycDocumentAfterSelectHooks = append(userKycDocumentAfterSelectHooks, userKycDocumentHook)
	case boil.AfterUpdateHook:
		userKycDocumentAfterUpdateHooks = append(userKycDocumentAfterUpdateHooks, userKycDocumentHook)
	case boil.AfterDeleteHook:
		userKycDocumentAfterDeleteHooks = append(userKycDocumentAfterDeleteHooks, userKycDocumentHook)
	case boil.AfterUpsertHook:
		userKycDocumentAfterUpsertHooks = append(userKycDocumentAfterUpsertHooks, userKycDocumentHook)
	}
}

// OneG returns a single userKycDocument record from the query using the global executor.
func (q userKycDocumentQuery) OneG() (*UserKycDocument, error) {
	return q.One(boil.GetDB())
}

// One returns a single userKycDocument record from the query.
func (q userKycDocumentQuery) One(exec boil.Executor) (*UserKycDocument, error) {
	o := &UserKycDocument{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_kyc_document")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserKycDocument records from the query using the global executor.
func (q userKycDocumentQuery) AllG() (UserKycDocumentSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all UserKycDocument records from the query.
func (q userKycDocumentQuery) All(exec boil.Executor) (UserKycDocumentSlice, error) {
	var o []*UserKycDocument

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserKycDocument slice")
	}

	if len(userKycDocumentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserKycDocument records in the query, and panics on error.
func (q userKycDocumentQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all UserKycDocument records in the query.
func (q userKycDocumentQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_kyc_document rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q userKycDocumentQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q userKycDocumentQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_kyc_document exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserKycDocument) User(mods ...qm.QueryMod) userProfileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := UserProfiles(queryMods...)
	queries.SetFrom(query.Query, "\"user_profile\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userKycDocumentL) LoadUser(e boil.Executor, singular bool, maybeUserKycDocument interface{}, mods queries.Applicator) error {
	var slice []*UserKycDocument
	var object *UserKycDocument

	if singular {
		object = maybeUserKycDocument.(*UserKycDocument)
	} else {
		slice = *maybeUserKycDocument.(*[]*UserKycDocument)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userKycDocumentR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userKycDocumentR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	query := NewQuery(qm.From(`user_profile`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserProfile")
	}

	var resultSlice []*UserProfile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserProfile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_profile")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_profile")
	}

	if len(userKycDocumentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userProfileR{}
		}
		foreign.R.UserUserKycDocuments = append(foreign.R.UserUserKycDocuments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userProfileR{}
				}
				foreign.R.UserUserKycDocuments = append(foreign.R.UserUserKycDocuments, local)
				break
			}
		}
	}

	return nil
}

// SetUserG of the userKycDocument to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserKycDocuments.
// Uses the global database handle.
func (o *UserKycDocument) SetUserG(insert bool, related *UserProfile) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUser of the userKycDocument to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserKycDocuments.
func (o *UserKycDocument) SetUser(exec boil.Executor, insert bool, related *UserProfile) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_kyc_document\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userKycDocumentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userKycDocumentR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userProfileR{
			UserUserKycDocuments: UserKycDocumentSlice{o},
		}
	} else {
		related.R.UserUserKycDocuments = append(related.R.UserUserKycDocuments, o)
	}

	return nil
}

// UserKycDocuments retrieves all the records using an executor.
func UserKycDocuments(mods ...qm.QueryMod) userKycDocumentQuery {
	mods = append(mods, qm.From("\"user_kyc_document\""))
	return userKycDocumentQuery{NewQuery(mods...)}
}

// FindUserKycDocumentG retrieves a single record by ID.
func FindUserKycDocumentG(iD int, selectCols ...string) (*UserKycDocument, error) {
	return FindUserKycDocument(boil.GetDB(), iD, selectCols...)
}

// FindUserKycDocument retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserKycDocument(exec boil.Executor, iD int, selectCols ...string) (*UserKycDocument, error) {
	userKycDocumentObj := &UserKycDocument{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_kyc_document\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userKycDocumentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_kyc_document")
	}

	return userKycDocumentObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserKycDocument) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserKycDocument) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_kyc_document provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userKycDocumentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userKycDocumentInsertCacheMut.RLock()
	cache, cached := userKycDocumentInsertCache[key]
	userKycDocumentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userKycDocumentColumns,
			userKycDocumentColumnsWithDefault,
			userKycDocumentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userKycDocumentType, userKycDocumentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userKycDocumentType, userKycDocumentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_kyc_document\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_kyc_document\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_kyc_document")
	}

	if !cached {
		userKycDocumentInsertCacheMut.Lock()
		userKycDocumentInsertCache[key] = cache
		userKycDocumentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserKycDocument record using the global executor.
// See Update for more documentation.
func (o *UserKycDocument) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the UserKycDocument.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserKycDocument) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userKycDocumentUpdateCacheMut.RLock()
	cache, cached := userKycDocumentUpdateCache[key]
	userKycDocumentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userKycDocumentColumns,
			userKycDocumentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_kyc_document, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_kyc_document\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userKycDocumentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userKycDocumentType, userKycDocumentMapping, append(wl, userKycDocumentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_kyc_document row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_kyc_document")
	}

	if !cached {
		userKycDocumentUpdateCacheMut.Lock()
		userKycDocumentUpdateCache[key] = cache
		userKycDocumentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q userKycDocumentQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q userKycDocumentQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_kyc_document")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_kyc_document")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserKycDocumentSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserKycDocumentSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userKycDocumentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_kyc_document\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userKycDocumentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userKycDocument slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userKycDocument")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserKycDocument) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserKycDocument) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_kyc_document provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userKycDocumentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userKycDocumentUpsertCacheMut.RLock()
	cache, cached := userKycDocumentUpsertCache[key]
	userKycDocumentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userKycDocumentColumns,
			userKycDocumentColumnsWithDefault,
			userKycDocumentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userKycDocumentColumns,
			userKycDocumentPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert user_kyc_document, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userKycDocumentPrimaryKeyColumns))
			copy(conflict, userKycDocumentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_kyc_document\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userKycDocumentType, userKycDocumentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userKycDocumentType, userKycDocumentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_kyc_document")
	}

	if !cached {
		userKycDocumentUpsertCacheMut.Lock()
		userKycDocumentUpsertCache[key] = cache
		userKycDocumentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single UserKycDocument record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserKycDocument) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single UserKycDocument record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserKycDocument) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserKycDocument provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userKycDocumentPrimaryKeyMapping)
	sql := "DELETE FROM \"user_kyc_document\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_kyc_document")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_kyc_document")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userKycDocumentQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userKycDocumentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_kyc_document")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_kyc_document")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserKycDocumentSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserKycDocumentSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserKycDocument slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(userKycDocumentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userKycDocumentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_kyc_document\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userKycDocumentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userKycDocument slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_kyc_document")
	}

	if len(userKycDocumentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserKycDocument) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserKycDocument provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserKycDocument) Reload(exec boil.Executor) error {
	ret, err := FindUserKycDocument(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserKycDocumentSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserKycDocumentSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserKycDocumentSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserKycDocumentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userKycDocumentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_kyc_document\".* FROM \"user_kyc_document\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userKycDocumentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserKycDocumentSlice")
	}

	*o = slice

	return nil
}

// UserKycDocumentExistsG checks if the UserKycDocument row exists.
func UserKycDocumentExistsG(iD int) (bool, error) {
	return UserKycDocumentExists(boil.GetDB(), iD)
}

// UserKycDocumentExists checks if the UserKycDocument row exists.
func UserKycDocumentExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_kyc_document\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_kyc_document exists")
	}

	return exists, nil
}
