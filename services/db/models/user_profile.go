// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserProfile is an object representing the database table.
type UserProfile struct {
	ID                         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email                      string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Forename                   string    `boil:"forename" json:"forename" toml:"forename" yaml:"forename"`
	Lastname                   string    `boil:"lastname" json:"lastname" toml:"lastname" yaml:"lastname"`
	Salutation                 string    `boil:"salutation" json:"salutation" toml:"salutation" yaml:"salutation"`
	AdditionalName             string    `boil:"additional_name" json:"additional_name" toml:"additional_name" yaml:"additional_name"`
	BirthCountryCode           string    `boil:"birth_country_code" json:"birth_country_code" toml:"birth_country_code" yaml:"birth_country_code"`
	BankAccountNumber          string    `boil:"bank_account_number" json:"bank_account_number" toml:"bank_account_number" yaml:"bank_account_number"`
	BankNumber                 string    `boil:"bank_number" json:"bank_number" toml:"bank_number" yaml:"bank_number"`
	BankPhoneNumber            string    `boil:"bank_phone_number" json:"bank_phone_number" toml:"bank_phone_number" yaml:"bank_phone_number"`
	TaxID                      string    `boil:"tax_id" json:"tax_id" toml:"tax_id" yaml:"tax_id"`
	TaxIDName                  string    `boil:"tax_id_name" json:"tax_id_name" toml:"tax_id_name" yaml:"tax_id_name"`
	OccupationCode08           string    `boil:"occupation_code08" json:"occupation_code08" toml:"occupation_code08" yaml:"occupation_code08"`
	EmployerName               string    `boil:"employer_name" json:"employer_name" toml:"employer_name" yaml:"employer_name"`
	EmployerAddress            string    `boil:"employer_address" json:"employer_address" toml:"employer_address" yaml:"employer_address"`
	LanguageCode               string    `boil:"language_code" json:"language_code" toml:"language_code" yaml:"language_code"`
	Address                    string    `boil:"address" json:"address" toml:"address" yaml:"address"`
	ZipCode                    string    `boil:"zip_code" json:"zip_code" toml:"zip_code" yaml:"zip_code"`
	City                       string    `boil:"city" json:"city" toml:"city" yaml:"city"`
	State                      string    `boil:"state" json:"state" toml:"state" yaml:"state"`
	CountryCode                string    `boil:"country_code" json:"country_code" toml:"country_code" yaml:"country_code"`
	Nationality                string    `boil:"nationality" json:"nationality" toml:"nationality" yaml:"nationality"`
	MobileNR                   string    `boil:"mobile_nr" json:"mobile_nr" toml:"mobile_nr" yaml:"mobile_nr"`
	BirthDay                   time.Time `boil:"birth_day" json:"birth_day" toml:"birth_day" yaml:"birth_day"`
	BirthPlace                 string    `boil:"birth_place" json:"birth_place" toml:"birth_place" yaml:"birth_place"`
	MailConfirmationKey        string    `boil:"mail_confirmation_key" json:"mail_confirmation_key" toml:"mail_confirmation_key" yaml:"mail_confirmation_key"`
	MailConfirmationExpiryDate time.Time `boil:"mail_confirmation_expiry_date" json:"mail_confirmation_expiry_date" toml:"mail_confirmation_expiry_date" yaml:"mail_confirmation_expiry_date"`
	TfaSecret                  string    `boil:"tfa_secret" json:"tfa_secret" toml:"tfa_secret" yaml:"tfa_secret"`
	TfaTempSecret              string    `boil:"tfa_temp_secret" json:"tfa_temp_secret" toml:"tfa_temp_secret" yaml:"tfa_temp_secret"`
	MailConfirmed              bool      `boil:"mail_confirmed" json:"mail_confirmed" toml:"mail_confirmed" yaml:"mail_confirmed"`
	TfaConfirmed               bool      `boil:"tfa_confirmed" json:"tfa_confirmed" toml:"tfa_confirmed" yaml:"tfa_confirmed"`
	MnemonicConfirmed          bool      `boil:"mnemonic_confirmed" json:"mnemonic_confirmed" toml:"mnemonic_confirmed" yaml:"mnemonic_confirmed"`
	MessageCount               int       `boil:"message_count" json:"message_count" toml:"message_count" yaml:"message_count"`
	PaymentState               string    `boil:"payment_state" json:"payment_state" toml:"payment_state" yaml:"payment_state"`
	KycStatus                  string    `boil:"kyc_status" json:"kyc_status" toml:"kyc_status" yaml:"kyc_status"`
	StellarAccountCreated      bool      `boil:"stellar_account_created" json:"stellar_account_created" toml:"stellar_account_created" yaml:"stellar_account_created"`
	Reset2faByAdmin            bool      `boil:"reset2fa_by_admin" json:"reset2fa_by_admin" toml:"reset2fa_by_admin" yaml:"reset2fa_by_admin"`
	CreatedAt                  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy                  string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`
	OccupationName             string    `boil:"occupation_name" json:"occupation_name" toml:"occupation_name" yaml:"occupation_name"`
	OccupationCode88           string    `boil:"occupation_code88" json:"occupation_code88" toml:"occupation_code88" yaml:"occupation_code88"`
	PublicKey0                 string    `boil:"public_key_0" json:"public_key_0" toml:"public_key_0" yaml:"public_key_0"`
	MailNotifications          bool      `boil:"mail_notifications" json:"mail_notifications" toml:"mail_notifications" yaml:"mail_notifications"`
	DateSuspended              null.Time `boil:"date_suspended" json:"date_suspended,omitempty" toml:"date_suspended" yaml:"date_suspended,omitempty"`
	DateClosed                 null.Time `boil:"date_closed" json:"date_closed,omitempty" toml:"date_closed" yaml:"date_closed,omitempty"`
	ShowMemos                  bool      `boil:"show_memos" json:"show_memos" toml:"show_memos" yaml:"show_memos"`

	R *userProfileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userProfileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserProfileColumns = struct {
	ID                         string
	Email                      string
	Forename                   string
	Lastname                   string
	Salutation                 string
	AdditionalName             string
	BirthCountryCode           string
	BankAccountNumber          string
	BankNumber                 string
	BankPhoneNumber            string
	TaxID                      string
	TaxIDName                  string
	OccupationCode08           string
	EmployerName               string
	EmployerAddress            string
	LanguageCode               string
	Address                    string
	ZipCode                    string
	City                       string
	State                      string
	CountryCode                string
	Nationality                string
	MobileNR                   string
	BirthDay                   string
	BirthPlace                 string
	MailConfirmationKey        string
	MailConfirmationExpiryDate string
	TfaSecret                  string
	TfaTempSecret              string
	MailConfirmed              string
	TfaConfirmed               string
	MnemonicConfirmed          string
	MessageCount               string
	PaymentState               string
	KycStatus                  string
	StellarAccountCreated      string
	Reset2faByAdmin            string
	CreatedAt                  string
	UpdatedAt                  string
	UpdatedBy                  string
	OccupationName             string
	OccupationCode88           string
	PublicKey0                 string
	MailNotifications          string
	DateSuspended              string
	DateClosed                 string
	ShowMemos                  string
}{
	ID:                         "id",
	Email:                      "email",
	Forename:                   "forename",
	Lastname:                   "lastname",
	Salutation:                 "salutation",
	AdditionalName:             "additional_name",
	BirthCountryCode:           "birth_country_code",
	BankAccountNumber:          "bank_account_number",
	BankNumber:                 "bank_number",
	BankPhoneNumber:            "bank_phone_number",
	TaxID:                      "tax_id",
	TaxIDName:                  "tax_id_name",
	OccupationCode08:           "occupation_code08",
	EmployerName:               "employer_name",
	EmployerAddress:            "employer_address",
	LanguageCode:               "language_code",
	Address:                    "address",
	ZipCode:                    "zip_code",
	City:                       "city",
	State:                      "state",
	CountryCode:                "country_code",
	Nationality:                "nationality",
	MobileNR:                   "mobile_nr",
	BirthDay:                   "birth_day",
	BirthPlace:                 "birth_place",
	MailConfirmationKey:        "mail_confirmation_key",
	MailConfirmationExpiryDate: "mail_confirmation_expiry_date",
	TfaSecret:                  "tfa_secret",
	TfaTempSecret:              "tfa_temp_secret",
	MailConfirmed:              "mail_confirmed",
	TfaConfirmed:               "tfa_confirmed",
	MnemonicConfirmed:          "mnemonic_confirmed",
	MessageCount:               "message_count",
	PaymentState:               "payment_state",
	KycStatus:                  "kyc_status",
	StellarAccountCreated:      "stellar_account_created",
	Reset2faByAdmin:            "reset2fa_by_admin",
	CreatedAt:                  "created_at",
	UpdatedAt:                  "updated_at",
	UpdatedBy:                  "updated_by",
	OccupationName:             "occupation_name",
	OccupationCode88:           "occupation_code88",
	PublicKey0:                 "public_key_0",
	MailNotifications:          "mail_notifications",
	DateSuspended:              "date_suspended",
	DateClosed:                 "date_closed",
	ShowMemos:                  "show_memos",
}

// UserProfileRels is where relationship names are stored.
var UserProfileRels = struct {
	UserUserSecurity         string
	UserNotifications        string
	UserNotificationArchives string
	UserTokenHistories       string
	UserUserContacts         string
	UserUserKycDocuments     string
	UserUserMessages         string
	UserUserMessageArchives  string
	UserUserOrders           string
	UserUserPushtokens       string
	UserUserWallets          string
}{
	UserUserSecurity:         "UserUserSecurity",
	UserNotifications:        "UserNotifications",
	UserNotificationArchives: "UserNotificationArchives",
	UserTokenHistories:       "UserTokenHistories",
	UserUserContacts:         "UserUserContacts",
	UserUserKycDocuments:     "UserUserKycDocuments",
	UserUserMessages:         "UserUserMessages",
	UserUserMessageArchives:  "UserUserMessageArchives",
	UserUserOrders:           "UserUserOrders",
	UserUserPushtokens:       "UserUserPushtokens",
	UserUserWallets:          "UserUserWallets",
}

// userProfileR is where relationships are stored.
type userProfileR struct {
	UserUserSecurity         *UserSecurity
	UserNotifications        NotificationSlice
	UserNotificationArchives NotificationArchiveSlice
	UserTokenHistories       TokenHistorySlice
	UserUserContacts         UserContactSlice
	UserUserKycDocuments     UserKycDocumentSlice
	UserUserMessages         UserMessageSlice
	UserUserMessageArchives  UserMessageArchiveSlice
	UserUserOrders           UserOrderSlice
	UserUserPushtokens       UserPushtokenSlice
	UserUserWallets          UserWalletSlice
}

// NewStruct creates a new relationship struct
func (*userProfileR) NewStruct() *userProfileR {
	return &userProfileR{}
}

// userProfileL is where Load methods for each relationship are stored.
type userProfileL struct{}

var (
	userProfileColumns               = []string{"id", "email", "forename", "lastname", "salutation", "additional_name", "birth_country_code", "bank_account_number", "bank_number", "bank_phone_number", "tax_id", "tax_id_name", "occupation_code08", "employer_name", "employer_address", "language_code", "address", "zip_code", "city", "state", "country_code", "nationality", "mobile_nr", "birth_day", "birth_place", "mail_confirmation_key", "mail_confirmation_expiry_date", "tfa_secret", "tfa_temp_secret", "mail_confirmed", "tfa_confirmed", "mnemonic_confirmed", "message_count", "payment_state", "kyc_status", "stellar_account_created", "reset2fa_by_admin", "created_at", "updated_at", "updated_by", "occupation_name", "occupation_code88", "public_key_0", "mail_notifications", "date_suspended", "date_closed", "show_memos"}
	userProfileColumnsWithoutDefault = []string{"email", "forename", "lastname", "salutation", "address", "zip_code", "city", "state", "country_code", "nationality", "mobile_nr", "birth_day", "birth_place", "mail_confirmation_key", "mail_confirmation_expiry_date", "tfa_secret", "tfa_temp_secret", "updated_by", "date_suspended", "date_closed"}
	userProfileColumnsWithDefault    = []string{"id", "additional_name", "birth_country_code", "bank_account_number", "bank_number", "bank_phone_number", "tax_id", "tax_id_name", "occupation_code08", "employer_name", "employer_address", "language_code", "mail_confirmed", "tfa_confirmed", "mnemonic_confirmed", "message_count", "payment_state", "kyc_status", "stellar_account_created", "reset2fa_by_admin", "created_at", "updated_at", "occupation_name", "occupation_code88", "public_key_0", "mail_notifications", "show_memos"}
	userProfilePrimaryKeyColumns     = []string{"id"}
)

type (
	// UserProfileSlice is an alias for a slice of pointers to UserProfile.
	// This should generally be used opposed to []UserProfile.
	UserProfileSlice []*UserProfile
	// UserProfileHook is the signature for custom UserProfile hook methods
	UserProfileHook func(boil.Executor, *UserProfile) error

	userProfileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userProfileType                 = reflect.TypeOf(&UserProfile{})
	userProfileMapping              = queries.MakeStructMapping(userProfileType)
	userProfilePrimaryKeyMapping, _ = queries.BindMapping(userProfileType, userProfileMapping, userProfilePrimaryKeyColumns)
	userProfileInsertCacheMut       sync.RWMutex
	userProfileInsertCache          = make(map[string]insertCache)
	userProfileUpdateCacheMut       sync.RWMutex
	userProfileUpdateCache          = make(map[string]updateCache)
	userProfileUpsertCacheMut       sync.RWMutex
	userProfileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var userProfileBeforeInsertHooks []UserProfileHook
var userProfileBeforeUpdateHooks []UserProfileHook
var userProfileBeforeDeleteHooks []UserProfileHook
var userProfileBeforeUpsertHooks []UserProfileHook

var userProfileAfterInsertHooks []UserProfileHook
var userProfileAfterSelectHooks []UserProfileHook
var userProfileAfterUpdateHooks []UserProfileHook
var userProfileAfterDeleteHooks []UserProfileHook
var userProfileAfterUpsertHooks []UserProfileHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserProfile) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserProfile) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserProfile) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserProfile) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserProfile) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserProfile) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserProfile) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserProfile) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserProfile) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userProfileAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserProfileHook registers your hook function for all future operations.
func AddUserProfileHook(hookPoint boil.HookPoint, userProfileHook UserProfileHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userProfileBeforeInsertHooks = append(userProfileBeforeInsertHooks, userProfileHook)
	case boil.BeforeUpdateHook:
		userProfileBeforeUpdateHooks = append(userProfileBeforeUpdateHooks, userProfileHook)
	case boil.BeforeDeleteHook:
		userProfileBeforeDeleteHooks = append(userProfileBeforeDeleteHooks, userProfileHook)
	case boil.BeforeUpsertHook:
		userProfileBeforeUpsertHooks = append(userProfileBeforeUpsertHooks, userProfileHook)
	case boil.AfterInsertHook:
		userProfileAfterInsertHooks = append(userProfileAfterInsertHooks, userProfileHook)
	case boil.AfterSelectHook:
		userProfileAfterSelectHooks = append(userProfileAfterSelectHooks, userProfileHook)
	case boil.AfterUpdateHook:
		userProfileAfterUpdateHooks = append(userProfileAfterUpdateHooks, userProfileHook)
	case boil.AfterDeleteHook:
		userProfileAfterDeleteHooks = append(userProfileAfterDeleteHooks, userProfileHook)
	case boil.AfterUpsertHook:
		userProfileAfterUpsertHooks = append(userProfileAfterUpsertHooks, userProfileHook)
	}
}

// OneG returns a single userProfile record from the query using the global executor.
func (q userProfileQuery) OneG() (*UserProfile, error) {
	return q.One(boil.GetDB())
}

// One returns a single userProfile record from the query.
func (q userProfileQuery) One(exec boil.Executor) (*UserProfile, error) {
	o := &UserProfile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_profile")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserProfile records from the query using the global executor.
func (q userProfileQuery) AllG() (UserProfileSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all UserProfile records from the query.
func (q userProfileQuery) All(exec boil.Executor) (UserProfileSlice, error) {
	var o []*UserProfile

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserProfile slice")
	}

	if len(userProfileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserProfile records in the query, and panics on error.
func (q userProfileQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all UserProfile records in the query.
func (q userProfileQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_profile rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q userProfileQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q userProfileQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_profile exists")
	}

	return count > 0, nil
}

// UserUserSecurity pointed to by the foreign key.
func (o *UserProfile) UserUserSecurity(mods ...qm.QueryMod) userSecurityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("user_id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := UserSecurities(queryMods...)
	queries.SetFrom(query.Query, "\"user_security\"")

	return query
}

// UserNotifications retrieves all the notification's Notifications with an executor via user_id column.
func (o *UserProfile) UserNotifications(mods ...qm.QueryMod) notificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"notification\".\"user_id\"=?", o.ID),
	)

	query := Notifications(queryMods...)
	queries.SetFrom(query.Query, "\"notification\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"notification\".*"})
	}

	return query
}

// UserNotificationArchives retrieves all the notification_archive's NotificationArchives with an executor via user_id column.
func (o *UserProfile) UserNotificationArchives(mods ...qm.QueryMod) notificationArchiveQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"notification_archive\".\"user_id\"=?", o.ID),
	)

	query := NotificationArchives(queryMods...)
	queries.SetFrom(query.Query, "\"notification_archive\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"notification_archive\".*"})
	}

	return query
}

// UserTokenHistories retrieves all the token_history's TokenHistories with an executor via user_id column.
func (o *UserProfile) UserTokenHistories(mods ...qm.QueryMod) tokenHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"token_history\".\"user_id\"=?", o.ID),
	)

	query := TokenHistories(queryMods...)
	queries.SetFrom(query.Query, "\"token_history\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"token_history\".*"})
	}

	return query
}

// UserUserContacts retrieves all the user_contact's UserContacts with an executor via user_id column.
func (o *UserProfile) UserUserContacts(mods ...qm.QueryMod) userContactQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_contact\".\"user_id\"=?", o.ID),
	)

	query := UserContacts(queryMods...)
	queries.SetFrom(query.Query, "\"user_contact\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_contact\".*"})
	}

	return query
}

// UserUserKycDocuments retrieves all the user_kyc_document's UserKycDocuments with an executor via user_id column.
func (o *UserProfile) UserUserKycDocuments(mods ...qm.QueryMod) userKycDocumentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_kyc_document\".\"user_id\"=?", o.ID),
	)

	query := UserKycDocuments(queryMods...)
	queries.SetFrom(query.Query, "\"user_kyc_document\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_kyc_document\".*"})
	}

	return query
}

// UserUserMessages retrieves all the user_message's UserMessages with an executor via user_id column.
func (o *UserProfile) UserUserMessages(mods ...qm.QueryMod) userMessageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_message\".\"user_id\"=?", o.ID),
	)

	query := UserMessages(queryMods...)
	queries.SetFrom(query.Query, "\"user_message\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_message\".*"})
	}

	return query
}

// UserUserMessageArchives retrieves all the user_message_archive's UserMessageArchives with an executor via user_id column.
func (o *UserProfile) UserUserMessageArchives(mods ...qm.QueryMod) userMessageArchiveQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_message_archive\".\"user_id\"=?", o.ID),
	)

	query := UserMessageArchives(queryMods...)
	queries.SetFrom(query.Query, "\"user_message_archive\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_message_archive\".*"})
	}

	return query
}

// UserUserOrders retrieves all the user_order's UserOrders with an executor via user_id column.
func (o *UserProfile) UserUserOrders(mods ...qm.QueryMod) userOrderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_order\".\"user_id\"=?", o.ID),
	)

	query := UserOrders(queryMods...)
	queries.SetFrom(query.Query, "\"user_order\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_order\".*"})
	}

	return query
}

// UserUserPushtokens retrieves all the user_pushtoken's UserPushtokens with an executor via user_id column.
func (o *UserProfile) UserUserPushtokens(mods ...qm.QueryMod) userPushtokenQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_pushtoken\".\"user_id\"=?", o.ID),
	)

	query := UserPushtokens(queryMods...)
	queries.SetFrom(query.Query, "\"user_pushtoken\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_pushtoken\".*"})
	}

	return query
}

// UserUserWallets retrieves all the user_wallet's UserWallets with an executor via user_id column.
func (o *UserProfile) UserUserWallets(mods ...qm.QueryMod) userWalletQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_wallet\".\"user_id\"=?", o.ID),
	)

	query := UserWallets(queryMods...)
	queries.SetFrom(query.Query, "\"user_wallet\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_wallet\".*"})
	}

	return query
}

// LoadUserUserSecurity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userProfileL) LoadUserUserSecurity(e boil.Executor, singular bool, maybeUserProfile interface{}, mods queries.Applicator) error {
	var slice []*UserProfile
	var object *UserProfile

	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`user_security`), qm.WhereIn(`user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserSecurity")
	}

	var resultSlice []*UserSecurity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserSecurity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_security")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_security")
	}

	if len(userProfileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserUserSecurity = foreign
		if foreign.R == nil {
			foreign.R = &userSecurityR{}
		}
		foreign.R.User = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UserID {
				local.R.UserUserSecurity = foreign
				if foreign.R == nil {
					foreign.R = &userSecurityR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userProfileL) LoadUserNotifications(e boil.Executor, singular bool, maybeUserProfile interface{}, mods queries.Applicator) error {
	var slice []*UserProfile
	var object *UserProfile

	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`notification`), qm.WhereIn(`user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification")
	}

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on notification")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notification")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserNotifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &notificationR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserNotifications = append(local.R.UserNotifications, foreign)
				if foreign.R == nil {
					foreign.R = &notificationR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserNotificationArchives allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userProfileL) LoadUserNotificationArchives(e boil.Executor, singular bool, maybeUserProfile interface{}, mods queries.Applicator) error {
	var slice []*UserProfile
	var object *UserProfile

	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`notification_archive`), qm.WhereIn(`user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification_archive")
	}

	var resultSlice []*NotificationArchive
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification_archive")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on notification_archive")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for notification_archive")
	}

	if len(notificationArchiveAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserNotificationArchives = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &notificationArchiveR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserNotificationArchives = append(local.R.UserNotificationArchives, foreign)
				if foreign.R == nil {
					foreign.R = &notificationArchiveR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserTokenHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userProfileL) LoadUserTokenHistories(e boil.Executor, singular bool, maybeUserProfile interface{}, mods queries.Applicator) error {
	var slice []*UserProfile
	var object *UserProfile

	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`token_history`), qm.WhereIn(`user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load token_history")
	}

	var resultSlice []*TokenHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice token_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on token_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for token_history")
	}

	if len(tokenHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserTokenHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tokenHistoryR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserTokenHistories = append(local.R.UserTokenHistories, foreign)
				if foreign.R == nil {
					foreign.R = &tokenHistoryR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserUserContacts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userProfileL) LoadUserUserContacts(e boil.Executor, singular bool, maybeUserProfile interface{}, mods queries.Applicator) error {
	var slice []*UserProfile
	var object *UserProfile

	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`user_contact`), qm.WhereIn(`user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_contact")
	}

	var resultSlice []*UserContact
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_contact")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_contact")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_contact")
	}

	if len(userContactAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUserContacts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userContactR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserUserContacts = append(local.R.UserUserContacts, foreign)
				if foreign.R == nil {
					foreign.R = &userContactR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserUserKycDocuments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userProfileL) LoadUserUserKycDocuments(e boil.Executor, singular bool, maybeUserProfile interface{}, mods queries.Applicator) error {
	var slice []*UserProfile
	var object *UserProfile

	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`user_kyc_document`), qm.WhereIn(`user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_kyc_document")
	}

	var resultSlice []*UserKycDocument
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_kyc_document")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_kyc_document")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_kyc_document")
	}

	if len(userKycDocumentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUserKycDocuments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userKycDocumentR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserUserKycDocuments = append(local.R.UserUserKycDocuments, foreign)
				if foreign.R == nil {
					foreign.R = &userKycDocumentR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserUserMessages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userProfileL) LoadUserUserMessages(e boil.Executor, singular bool, maybeUserProfile interface{}, mods queries.Applicator) error {
	var slice []*UserProfile
	var object *UserProfile

	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`user_message`), qm.WhereIn(`user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_message")
	}

	var resultSlice []*UserMessage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_message")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_message")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_message")
	}

	if len(userMessageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUserMessages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userMessageR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserUserMessages = append(local.R.UserUserMessages, foreign)
				if foreign.R == nil {
					foreign.R = &userMessageR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserUserMessageArchives allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userProfileL) LoadUserUserMessageArchives(e boil.Executor, singular bool, maybeUserProfile interface{}, mods queries.Applicator) error {
	var slice []*UserProfile
	var object *UserProfile

	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`user_message_archive`), qm.WhereIn(`user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_message_archive")
	}

	var resultSlice []*UserMessageArchive
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_message_archive")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_message_archive")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_message_archive")
	}

	if len(userMessageArchiveAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUserMessageArchives = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userMessageArchiveR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserUserMessageArchives = append(local.R.UserUserMessageArchives, foreign)
				if foreign.R == nil {
					foreign.R = &userMessageArchiveR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserUserOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userProfileL) LoadUserUserOrders(e boil.Executor, singular bool, maybeUserProfile interface{}, mods queries.Applicator) error {
	var slice []*UserProfile
	var object *UserProfile

	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`user_order`), qm.WhereIn(`user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_order")
	}

	var resultSlice []*UserOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_order")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUserOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userOrderR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserUserOrders = append(local.R.UserUserOrders, foreign)
				if foreign.R == nil {
					foreign.R = &userOrderR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserUserPushtokens allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userProfileL) LoadUserUserPushtokens(e boil.Executor, singular bool, maybeUserProfile interface{}, mods queries.Applicator) error {
	var slice []*UserProfile
	var object *UserProfile

	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`user_pushtoken`), qm.WhereIn(`user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_pushtoken")
	}

	var resultSlice []*UserPushtoken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_pushtoken")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_pushtoken")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_pushtoken")
	}

	if len(userPushtokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUserPushtokens = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userPushtokenR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserUserPushtokens = append(local.R.UserUserPushtokens, foreign)
				if foreign.R == nil {
					foreign.R = &userPushtokenR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadUserUserWallets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userProfileL) LoadUserUserWallets(e boil.Executor, singular bool, maybeUserProfile interface{}, mods queries.Applicator) error {
	var slice []*UserProfile
	var object *UserProfile

	if singular {
		object = maybeUserProfile.(*UserProfile)
	} else {
		slice = *maybeUserProfile.(*[]*UserProfile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userProfileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userProfileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`user_wallet`), qm.WhereIn(`user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_wallet")
	}

	var resultSlice []*UserWallet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_wallet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_wallet")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_wallet")
	}

	if len(userWalletAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserUserWallets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userWalletR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserUserWallets = append(local.R.UserUserWallets, foreign)
				if foreign.R == nil {
					foreign.R = &userWalletR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// SetUserUserSecurityG of the userProfile to the related item.
// Sets o.R.UserUserSecurity to related.
// Adds o to related.R.User.
// Uses the global database handle.
func (o *UserProfile) SetUserUserSecurityG(insert bool, related *UserSecurity) error {
	return o.SetUserUserSecurity(boil.GetDB(), insert, related)
}

// SetUserUserSecurity of the userProfile to the related item.
// Sets o.R.UserUserSecurity to related.
// Adds o to related.R.User.
func (o *UserProfile) SetUserUserSecurity(exec boil.Executor, insert bool, related *UserSecurity) error {
	var err error

	if insert {
		related.UserID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"user_security\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
			strmangle.WhereClause("\"", "\"", 2, userSecurityPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UserID = o.ID

	}

	if o.R == nil {
		o.R = &userProfileR{
			UserUserSecurity: related,
		}
	} else {
		o.R.UserUserSecurity = related
	}

	if related.R == nil {
		related.R = &userSecurityR{
			User: o,
		}
	} else {
		related.R.User = o
	}
	return nil
}

// AddUserNotificationsG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserNotifications.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserNotificationsG(insert bool, related ...*Notification) error {
	return o.AddUserNotifications(boil.GetDB(), insert, related...)
}

// AddUserNotifications adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserNotifications.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notification\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserNotifications: related,
		}
	} else {
		o.R.UserNotifications = append(o.R.UserNotifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserNotificationArchivesG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserNotificationArchives.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserNotificationArchivesG(insert bool, related ...*NotificationArchive) error {
	return o.AddUserNotificationArchives(boil.GetDB(), insert, related...)
}

// AddUserNotificationArchives adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserNotificationArchives.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserNotificationArchives(exec boil.Executor, insert bool, related ...*NotificationArchive) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notification_archive\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, notificationArchivePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserNotificationArchives: related,
		}
	} else {
		o.R.UserNotificationArchives = append(o.R.UserNotificationArchives, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationArchiveR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserTokenHistoriesG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserTokenHistories.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserTokenHistoriesG(insert bool, related ...*TokenHistory) error {
	return o.AddUserTokenHistories(boil.GetDB(), insert, related...)
}

// AddUserTokenHistories adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserTokenHistories.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserTokenHistories(exec boil.Executor, insert bool, related ...*TokenHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"token_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, tokenHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserTokenHistories: related,
		}
	} else {
		o.R.UserTokenHistories = append(o.R.UserTokenHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tokenHistoryR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserUserContactsG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserContacts.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserUserContactsG(insert bool, related ...*UserContact) error {
	return o.AddUserUserContacts(boil.GetDB(), insert, related...)
}

// AddUserUserContacts adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserContacts.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserUserContacts(exec boil.Executor, insert bool, related ...*UserContact) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_contact\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userContactPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserUserContacts: related,
		}
	} else {
		o.R.UserUserContacts = append(o.R.UserUserContacts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userContactR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserUserKycDocumentsG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserKycDocuments.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserUserKycDocumentsG(insert bool, related ...*UserKycDocument) error {
	return o.AddUserUserKycDocuments(boil.GetDB(), insert, related...)
}

// AddUserUserKycDocuments adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserKycDocuments.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserUserKycDocuments(exec boil.Executor, insert bool, related ...*UserKycDocument) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_kyc_document\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userKycDocumentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserUserKycDocuments: related,
		}
	} else {
		o.R.UserUserKycDocuments = append(o.R.UserUserKycDocuments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userKycDocumentR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserUserMessagesG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserMessages.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserUserMessagesG(insert bool, related ...*UserMessage) error {
	return o.AddUserUserMessages(boil.GetDB(), insert, related...)
}

// AddUserUserMessages adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserMessages.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserUserMessages(exec boil.Executor, insert bool, related ...*UserMessage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_message\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userMessagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserUserMessages: related,
		}
	} else {
		o.R.UserUserMessages = append(o.R.UserUserMessages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userMessageR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserUserMessageArchivesG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserMessageArchives.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserUserMessageArchivesG(insert bool, related ...*UserMessageArchive) error {
	return o.AddUserUserMessageArchives(boil.GetDB(), insert, related...)
}

// AddUserUserMessageArchives adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserMessageArchives.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserUserMessageArchives(exec boil.Executor, insert bool, related ...*UserMessageArchive) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_message_archive\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userMessageArchivePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserUserMessageArchives: related,
		}
	} else {
		o.R.UserUserMessageArchives = append(o.R.UserUserMessageArchives, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userMessageArchiveR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserUserOrdersG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserOrders.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserUserOrdersG(insert bool, related ...*UserOrder) error {
	return o.AddUserUserOrders(boil.GetDB(), insert, related...)
}

// AddUserUserOrders adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserOrders.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserUserOrders(exec boil.Executor, insert bool, related ...*UserOrder) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_order\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userOrderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserUserOrders: related,
		}
	} else {
		o.R.UserUserOrders = append(o.R.UserUserOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userOrderR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserUserPushtokensG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserPushtokens.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserUserPushtokensG(insert bool, related ...*UserPushtoken) error {
	return o.AddUserUserPushtokens(boil.GetDB(), insert, related...)
}

// AddUserUserPushtokens adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserPushtokens.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserUserPushtokens(exec boil.Executor, insert bool, related ...*UserPushtoken) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_pushtoken\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPushtokenPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserUserPushtokens: related,
		}
	} else {
		o.R.UserUserPushtokens = append(o.R.UserUserPushtokens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userPushtokenR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddUserUserWalletsG adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserWallets.
// Sets related.R.User appropriately.
// Uses the global database handle.
func (o *UserProfile) AddUserUserWalletsG(insert bool, related ...*UserWallet) error {
	return o.AddUserUserWallets(boil.GetDB(), insert, related...)
}

// AddUserUserWallets adds the given related objects to the existing relationships
// of the user_profile, optionally inserting them as new records.
// Appends related to o.R.UserUserWallets.
// Sets related.R.User appropriately.
func (o *UserProfile) AddUserUserWallets(exec boil.Executor, insert bool, related ...*UserWallet) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_wallet\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, userWalletPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userProfileR{
			UserUserWallets: related,
		}
	} else {
		o.R.UserUserWallets = append(o.R.UserUserWallets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userWalletR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// UserProfiles retrieves all the records using an executor.
func UserProfiles(mods ...qm.QueryMod) userProfileQuery {
	mods = append(mods, qm.From("\"user_profile\""))
	return userProfileQuery{NewQuery(mods...)}
}

// FindUserProfileG retrieves a single record by ID.
func FindUserProfileG(iD int, selectCols ...string) (*UserProfile, error) {
	return FindUserProfile(boil.GetDB(), iD, selectCols...)
}

// FindUserProfile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserProfile(exec boil.Executor, iD int, selectCols ...string) (*UserProfile, error) {
	userProfileObj := &UserProfile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_profile\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userProfileObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_profile")
	}

	return userProfileObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserProfile) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserProfile) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_profile provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userProfileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userProfileInsertCacheMut.RLock()
	cache, cached := userProfileInsertCache[key]
	userProfileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userProfileColumns,
			userProfileColumnsWithDefault,
			userProfileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userProfileType, userProfileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userProfileType, userProfileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_profile\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_profile\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_profile")
	}

	if !cached {
		userProfileInsertCacheMut.Lock()
		userProfileInsertCache[key] = cache
		userProfileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserProfile record using the global executor.
// See Update for more documentation.
func (o *UserProfile) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the UserProfile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserProfile) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userProfileUpdateCacheMut.RLock()
	cache, cached := userProfileUpdateCache[key]
	userProfileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userProfileColumns,
			userProfilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_profile, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_profile\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userProfilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userProfileType, userProfileMapping, append(wl, userProfilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_profile row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_profile")
	}

	if !cached {
		userProfileUpdateCacheMut.Lock()
		userProfileUpdateCache[key] = cache
		userProfileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q userProfileQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q userProfileQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_profile")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserProfileSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserProfileSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_profile\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userProfilePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userProfile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userProfile")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserProfile) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserProfile) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_profile provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userProfileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userProfileUpsertCacheMut.RLock()
	cache, cached := userProfileUpsertCache[key]
	userProfileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userProfileColumns,
			userProfileColumnsWithDefault,
			userProfileColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userProfileColumns,
			userProfilePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert user_profile, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userProfilePrimaryKeyColumns))
			copy(conflict, userProfilePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_profile\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userProfileType, userProfileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userProfileType, userProfileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_profile")
	}

	if !cached {
		userProfileUpsertCacheMut.Lock()
		userProfileUpsertCache[key] = cache
		userProfileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single UserProfile record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserProfile) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single UserProfile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserProfile) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserProfile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userProfilePrimaryKeyMapping)
	sql := "DELETE FROM \"user_profile\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_profile")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userProfileQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userProfileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_profile")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserProfileSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserProfileSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserProfile slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(userProfileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_profile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userProfilePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userProfile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_profile")
	}

	if len(userProfileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserProfile) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserProfile provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserProfile) Reload(exec boil.Executor) error {
	ret, err := FindUserProfile(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserProfileSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserProfileSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserProfileSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserProfileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_profile\".* FROM \"user_profile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userProfilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserProfileSlice")
	}

	*o = slice

	return nil
}

// UserProfileExistsG checks if the UserProfile row exists.
func UserProfileExistsG(iD int) (bool, error) {
	return UserProfileExists(boil.GetDB(), iD)
}

// UserProfileExists checks if the UserProfile row exists.
func UserProfileExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_profile\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_profile exists")
	}

	return exists, nil
}
