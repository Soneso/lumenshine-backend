// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ExchangeCurrency is an object representing the database table.
type ExchangeCurrency struct {
	ID                   int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ExchangeCurrencyType string    `boil:"exchange_currency_type" json:"exchange_currency_type" toml:"exchange_currency_type" yaml:"exchange_currency_type"`
	AssetCode            string    `boil:"asset_code" json:"asset_code" toml:"asset_code" yaml:"asset_code"`
	DenomAssetCode       string    `boil:"denom_asset_code" json:"denom_asset_code" toml:"denom_asset_code" yaml:"denom_asset_code"`
	PaymentNetwork       string    `boil:"payment_network" json:"payment_network" toml:"payment_network" yaml:"payment_network"`
	EcAssetIssuerPK      string    `boil:"ec_asset_issuer_pk" json:"ec_asset_issuer_pk" toml:"ec_asset_issuer_pk" yaml:"ec_asset_issuer_pk"`
	Decimals             int       `boil:"decimals" json:"decimals" toml:"decimals" yaml:"decimals"`
	CreatedAt            time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy            string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`
	Name                 string    `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *exchangeCurrencyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L exchangeCurrencyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExchangeCurrencyColumns = struct {
	ID                   string
	ExchangeCurrencyType string
	AssetCode            string
	DenomAssetCode       string
	PaymentNetwork       string
	EcAssetIssuerPK      string
	Decimals             string
	CreatedAt            string
	UpdatedAt            string
	UpdatedBy            string
	Name                 string
}{
	ID:                   "id",
	ExchangeCurrencyType: "exchange_currency_type",
	AssetCode:            "asset_code",
	DenomAssetCode:       "denom_asset_code",
	PaymentNetwork:       "payment_network",
	EcAssetIssuerPK:      "ec_asset_issuer_pk",
	Decimals:             "decimals",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	UpdatedBy:            "updated_by",
	Name:                 "name",
}

// ExchangeCurrencyRels is where relationship names are stored.
var ExchangeCurrencyRels = struct {
	IcoPhaseActivatedExchangeCurrencies string
	IcoSupportedExchangeCurrencies      string
	UserOrders                          string
}{
	IcoPhaseActivatedExchangeCurrencies: "IcoPhaseActivatedExchangeCurrencies",
	IcoSupportedExchangeCurrencies:      "IcoSupportedExchangeCurrencies",
	UserOrders:                          "UserOrders",
}

// exchangeCurrencyR is where relationships are stored.
type exchangeCurrencyR struct {
	IcoPhaseActivatedExchangeCurrencies IcoPhaseActivatedExchangeCurrencySlice
	IcoSupportedExchangeCurrencies      IcoSupportedExchangeCurrencySlice
	UserOrders                          UserOrderSlice
}

// NewStruct creates a new relationship struct
func (*exchangeCurrencyR) NewStruct() *exchangeCurrencyR {
	return &exchangeCurrencyR{}
}

// exchangeCurrencyL is where Load methods for each relationship are stored.
type exchangeCurrencyL struct{}

var (
	exchangeCurrencyColumns               = []string{"id", "exchange_currency_type", "asset_code", "denom_asset_code", "payment_network", "ec_asset_issuer_pk", "decimals", "created_at", "updated_at", "updated_by", "name"}
	exchangeCurrencyColumnsWithoutDefault = []string{"exchange_currency_type", "asset_code", "denom_asset_code", "payment_network", "ec_asset_issuer_pk", "decimals", "updated_by"}
	exchangeCurrencyColumnsWithDefault    = []string{"id", "created_at", "updated_at", "name"}
	exchangeCurrencyPrimaryKeyColumns     = []string{"id"}
)

type (
	// ExchangeCurrencySlice is an alias for a slice of pointers to ExchangeCurrency.
	// This should generally be used opposed to []ExchangeCurrency.
	ExchangeCurrencySlice []*ExchangeCurrency
	// ExchangeCurrencyHook is the signature for custom ExchangeCurrency hook methods
	ExchangeCurrencyHook func(boil.Executor, *ExchangeCurrency) error

	exchangeCurrencyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	exchangeCurrencyType                 = reflect.TypeOf(&ExchangeCurrency{})
	exchangeCurrencyMapping              = queries.MakeStructMapping(exchangeCurrencyType)
	exchangeCurrencyPrimaryKeyMapping, _ = queries.BindMapping(exchangeCurrencyType, exchangeCurrencyMapping, exchangeCurrencyPrimaryKeyColumns)
	exchangeCurrencyInsertCacheMut       sync.RWMutex
	exchangeCurrencyInsertCache          = make(map[string]insertCache)
	exchangeCurrencyUpdateCacheMut       sync.RWMutex
	exchangeCurrencyUpdateCache          = make(map[string]updateCache)
	exchangeCurrencyUpsertCacheMut       sync.RWMutex
	exchangeCurrencyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var exchangeCurrencyBeforeInsertHooks []ExchangeCurrencyHook
var exchangeCurrencyBeforeUpdateHooks []ExchangeCurrencyHook
var exchangeCurrencyBeforeDeleteHooks []ExchangeCurrencyHook
var exchangeCurrencyBeforeUpsertHooks []ExchangeCurrencyHook

var exchangeCurrencyAfterInsertHooks []ExchangeCurrencyHook
var exchangeCurrencyAfterSelectHooks []ExchangeCurrencyHook
var exchangeCurrencyAfterUpdateHooks []ExchangeCurrencyHook
var exchangeCurrencyAfterDeleteHooks []ExchangeCurrencyHook
var exchangeCurrencyAfterUpsertHooks []ExchangeCurrencyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExchangeCurrency) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeCurrencyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExchangeCurrency) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeCurrencyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExchangeCurrency) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeCurrencyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExchangeCurrency) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeCurrencyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExchangeCurrency) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeCurrencyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExchangeCurrency) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeCurrencyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExchangeCurrency) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeCurrencyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExchangeCurrency) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeCurrencyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExchangeCurrency) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeCurrencyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExchangeCurrencyHook registers your hook function for all future operations.
func AddExchangeCurrencyHook(hookPoint boil.HookPoint, exchangeCurrencyHook ExchangeCurrencyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		exchangeCurrencyBeforeInsertHooks = append(exchangeCurrencyBeforeInsertHooks, exchangeCurrencyHook)
	case boil.BeforeUpdateHook:
		exchangeCurrencyBeforeUpdateHooks = append(exchangeCurrencyBeforeUpdateHooks, exchangeCurrencyHook)
	case boil.BeforeDeleteHook:
		exchangeCurrencyBeforeDeleteHooks = append(exchangeCurrencyBeforeDeleteHooks, exchangeCurrencyHook)
	case boil.BeforeUpsertHook:
		exchangeCurrencyBeforeUpsertHooks = append(exchangeCurrencyBeforeUpsertHooks, exchangeCurrencyHook)
	case boil.AfterInsertHook:
		exchangeCurrencyAfterInsertHooks = append(exchangeCurrencyAfterInsertHooks, exchangeCurrencyHook)
	case boil.AfterSelectHook:
		exchangeCurrencyAfterSelectHooks = append(exchangeCurrencyAfterSelectHooks, exchangeCurrencyHook)
	case boil.AfterUpdateHook:
		exchangeCurrencyAfterUpdateHooks = append(exchangeCurrencyAfterUpdateHooks, exchangeCurrencyHook)
	case boil.AfterDeleteHook:
		exchangeCurrencyAfterDeleteHooks = append(exchangeCurrencyAfterDeleteHooks, exchangeCurrencyHook)
	case boil.AfterUpsertHook:
		exchangeCurrencyAfterUpsertHooks = append(exchangeCurrencyAfterUpsertHooks, exchangeCurrencyHook)
	}
}

// OneG returns a single exchangeCurrency record from the query using the global executor.
func (q exchangeCurrencyQuery) OneG() (*ExchangeCurrency, error) {
	return q.One(boil.GetDB())
}

// One returns a single exchangeCurrency record from the query.
func (q exchangeCurrencyQuery) One(exec boil.Executor) (*ExchangeCurrency, error) {
	o := &ExchangeCurrency{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for exchange_currency")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ExchangeCurrency records from the query using the global executor.
func (q exchangeCurrencyQuery) AllG() (ExchangeCurrencySlice, error) {
	return q.All(boil.GetDB())
}

// All returns all ExchangeCurrency records from the query.
func (q exchangeCurrencyQuery) All(exec boil.Executor) (ExchangeCurrencySlice, error) {
	var o []*ExchangeCurrency

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExchangeCurrency slice")
	}

	if len(exchangeCurrencyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ExchangeCurrency records in the query, and panics on error.
func (q exchangeCurrencyQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all ExchangeCurrency records in the query.
func (q exchangeCurrencyQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count exchange_currency rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q exchangeCurrencyQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q exchangeCurrencyQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if exchange_currency exists")
	}

	return count > 0, nil
}

// IcoPhaseActivatedExchangeCurrencies retrieves all the ico_phase_activated_exchange_currency's IcoPhaseActivatedExchangeCurrencies with an executor.
func (o *ExchangeCurrency) IcoPhaseActivatedExchangeCurrencies(mods ...qm.QueryMod) icoPhaseActivatedExchangeCurrencyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ico_phase_activated_exchange_currency\".\"exchange_currency_id\"=?", o.ID),
	)

	query := IcoPhaseActivatedExchangeCurrencies(queryMods...)
	queries.SetFrom(query.Query, "\"ico_phase_activated_exchange_currency\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ico_phase_activated_exchange_currency\".*"})
	}

	return query
}

// IcoSupportedExchangeCurrencies retrieves all the ico_supported_exchange_currency's IcoSupportedExchangeCurrencies with an executor.
func (o *ExchangeCurrency) IcoSupportedExchangeCurrencies(mods ...qm.QueryMod) icoSupportedExchangeCurrencyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ico_supported_exchange_currency\".\"exchange_currency_id\"=?", o.ID),
	)

	query := IcoSupportedExchangeCurrencies(queryMods...)
	queries.SetFrom(query.Query, "\"ico_supported_exchange_currency\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ico_supported_exchange_currency\".*"})
	}

	return query
}

// UserOrders retrieves all the user_order's UserOrders with an executor.
func (o *ExchangeCurrency) UserOrders(mods ...qm.QueryMod) userOrderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_order\".\"exchange_currency_id\"=?", o.ID),
	)

	query := UserOrders(queryMods...)
	queries.SetFrom(query.Query, "\"user_order\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_order\".*"})
	}

	return query
}

// LoadIcoPhaseActivatedExchangeCurrencies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (exchangeCurrencyL) LoadIcoPhaseActivatedExchangeCurrencies(e boil.Executor, singular bool, maybeExchangeCurrency interface{}, mods queries.Applicator) error {
	var slice []*ExchangeCurrency
	var object *ExchangeCurrency

	if singular {
		object = maybeExchangeCurrency.(*ExchangeCurrency)
	} else {
		slice = *maybeExchangeCurrency.(*[]*ExchangeCurrency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &exchangeCurrencyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &exchangeCurrencyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`ico_phase_activated_exchange_currency`), qm.WhereIn(`exchange_currency_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ico_phase_activated_exchange_currency")
	}

	var resultSlice []*IcoPhaseActivatedExchangeCurrency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ico_phase_activated_exchange_currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ico_phase_activated_exchange_currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ico_phase_activated_exchange_currency")
	}

	if len(icoPhaseActivatedExchangeCurrencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IcoPhaseActivatedExchangeCurrencies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &icoPhaseActivatedExchangeCurrencyR{}
			}
			foreign.R.ExchangeCurrency = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ExchangeCurrencyID {
				local.R.IcoPhaseActivatedExchangeCurrencies = append(local.R.IcoPhaseActivatedExchangeCurrencies, foreign)
				if foreign.R == nil {
					foreign.R = &icoPhaseActivatedExchangeCurrencyR{}
				}
				foreign.R.ExchangeCurrency = local
				break
			}
		}
	}

	return nil
}

// LoadIcoSupportedExchangeCurrencies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (exchangeCurrencyL) LoadIcoSupportedExchangeCurrencies(e boil.Executor, singular bool, maybeExchangeCurrency interface{}, mods queries.Applicator) error {
	var slice []*ExchangeCurrency
	var object *ExchangeCurrency

	if singular {
		object = maybeExchangeCurrency.(*ExchangeCurrency)
	} else {
		slice = *maybeExchangeCurrency.(*[]*ExchangeCurrency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &exchangeCurrencyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &exchangeCurrencyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`ico_supported_exchange_currency`), qm.WhereIn(`exchange_currency_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ico_supported_exchange_currency")
	}

	var resultSlice []*IcoSupportedExchangeCurrency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ico_supported_exchange_currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ico_supported_exchange_currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ico_supported_exchange_currency")
	}

	if len(icoSupportedExchangeCurrencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IcoSupportedExchangeCurrencies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &icoSupportedExchangeCurrencyR{}
			}
			foreign.R.ExchangeCurrency = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ExchangeCurrencyID {
				local.R.IcoSupportedExchangeCurrencies = append(local.R.IcoSupportedExchangeCurrencies, foreign)
				if foreign.R == nil {
					foreign.R = &icoSupportedExchangeCurrencyR{}
				}
				foreign.R.ExchangeCurrency = local
				break
			}
		}
	}

	return nil
}

// LoadUserOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (exchangeCurrencyL) LoadUserOrders(e boil.Executor, singular bool, maybeExchangeCurrency interface{}, mods queries.Applicator) error {
	var slice []*ExchangeCurrency
	var object *ExchangeCurrency

	if singular {
		object = maybeExchangeCurrency.(*ExchangeCurrency)
	} else {
		slice = *maybeExchangeCurrency.(*[]*ExchangeCurrency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &exchangeCurrencyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &exchangeCurrencyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`user_order`), qm.WhereIn(`exchange_currency_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_order")
	}

	var resultSlice []*UserOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_order")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userOrderR{}
			}
			foreign.R.ExchangeCurrency = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ExchangeCurrencyID {
				local.R.UserOrders = append(local.R.UserOrders, foreign)
				if foreign.R == nil {
					foreign.R = &userOrderR{}
				}
				foreign.R.ExchangeCurrency = local
				break
			}
		}
	}

	return nil
}

// AddIcoPhaseActivatedExchangeCurrenciesG adds the given related objects to the existing relationships
// of the exchange_currency, optionally inserting them as new records.
// Appends related to o.R.IcoPhaseActivatedExchangeCurrencies.
// Sets related.R.ExchangeCurrency appropriately.
// Uses the global database handle.
func (o *ExchangeCurrency) AddIcoPhaseActivatedExchangeCurrenciesG(insert bool, related ...*IcoPhaseActivatedExchangeCurrency) error {
	return o.AddIcoPhaseActivatedExchangeCurrencies(boil.GetDB(), insert, related...)
}

// AddIcoPhaseActivatedExchangeCurrencies adds the given related objects to the existing relationships
// of the exchange_currency, optionally inserting them as new records.
// Appends related to o.R.IcoPhaseActivatedExchangeCurrencies.
// Sets related.R.ExchangeCurrency appropriately.
func (o *ExchangeCurrency) AddIcoPhaseActivatedExchangeCurrencies(exec boil.Executor, insert bool, related ...*IcoPhaseActivatedExchangeCurrency) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ExchangeCurrencyID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ico_phase_activated_exchange_currency\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"exchange_currency_id"}),
				strmangle.WhereClause("\"", "\"", 2, icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ExchangeCurrencyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &exchangeCurrencyR{
			IcoPhaseActivatedExchangeCurrencies: related,
		}
	} else {
		o.R.IcoPhaseActivatedExchangeCurrencies = append(o.R.IcoPhaseActivatedExchangeCurrencies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &icoPhaseActivatedExchangeCurrencyR{
				ExchangeCurrency: o,
			}
		} else {
			rel.R.ExchangeCurrency = o
		}
	}
	return nil
}

// AddIcoSupportedExchangeCurrenciesG adds the given related objects to the existing relationships
// of the exchange_currency, optionally inserting them as new records.
// Appends related to o.R.IcoSupportedExchangeCurrencies.
// Sets related.R.ExchangeCurrency appropriately.
// Uses the global database handle.
func (o *ExchangeCurrency) AddIcoSupportedExchangeCurrenciesG(insert bool, related ...*IcoSupportedExchangeCurrency) error {
	return o.AddIcoSupportedExchangeCurrencies(boil.GetDB(), insert, related...)
}

// AddIcoSupportedExchangeCurrencies adds the given related objects to the existing relationships
// of the exchange_currency, optionally inserting them as new records.
// Appends related to o.R.IcoSupportedExchangeCurrencies.
// Sets related.R.ExchangeCurrency appropriately.
func (o *ExchangeCurrency) AddIcoSupportedExchangeCurrencies(exec boil.Executor, insert bool, related ...*IcoSupportedExchangeCurrency) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ExchangeCurrencyID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ico_supported_exchange_currency\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"exchange_currency_id"}),
				strmangle.WhereClause("\"", "\"", 2, icoSupportedExchangeCurrencyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ExchangeCurrencyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &exchangeCurrencyR{
			IcoSupportedExchangeCurrencies: related,
		}
	} else {
		o.R.IcoSupportedExchangeCurrencies = append(o.R.IcoSupportedExchangeCurrencies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &icoSupportedExchangeCurrencyR{
				ExchangeCurrency: o,
			}
		} else {
			rel.R.ExchangeCurrency = o
		}
	}
	return nil
}

// AddUserOrdersG adds the given related objects to the existing relationships
// of the exchange_currency, optionally inserting them as new records.
// Appends related to o.R.UserOrders.
// Sets related.R.ExchangeCurrency appropriately.
// Uses the global database handle.
func (o *ExchangeCurrency) AddUserOrdersG(insert bool, related ...*UserOrder) error {
	return o.AddUserOrders(boil.GetDB(), insert, related...)
}

// AddUserOrders adds the given related objects to the existing relationships
// of the exchange_currency, optionally inserting them as new records.
// Appends related to o.R.UserOrders.
// Sets related.R.ExchangeCurrency appropriately.
func (o *ExchangeCurrency) AddUserOrders(exec boil.Executor, insert bool, related ...*UserOrder) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ExchangeCurrencyID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_order\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"exchange_currency_id"}),
				strmangle.WhereClause("\"", "\"", 2, userOrderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ExchangeCurrencyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &exchangeCurrencyR{
			UserOrders: related,
		}
	} else {
		o.R.UserOrders = append(o.R.UserOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userOrderR{
				ExchangeCurrency: o,
			}
		} else {
			rel.R.ExchangeCurrency = o
		}
	}
	return nil
}

// ExchangeCurrencies retrieves all the records using an executor.
func ExchangeCurrencies(mods ...qm.QueryMod) exchangeCurrencyQuery {
	mods = append(mods, qm.From("\"exchange_currency\""))
	return exchangeCurrencyQuery{NewQuery(mods...)}
}

// FindExchangeCurrencyG retrieves a single record by ID.
func FindExchangeCurrencyG(iD int, selectCols ...string) (*ExchangeCurrency, error) {
	return FindExchangeCurrency(boil.GetDB(), iD, selectCols...)
}

// FindExchangeCurrency retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExchangeCurrency(exec boil.Executor, iD int, selectCols ...string) (*ExchangeCurrency, error) {
	exchangeCurrencyObj := &ExchangeCurrency{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"exchange_currency\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, exchangeCurrencyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from exchange_currency")
	}

	return exchangeCurrencyObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ExchangeCurrency) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExchangeCurrency) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no exchange_currency provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exchangeCurrencyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	exchangeCurrencyInsertCacheMut.RLock()
	cache, cached := exchangeCurrencyInsertCache[key]
	exchangeCurrencyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			exchangeCurrencyColumns,
			exchangeCurrencyColumnsWithDefault,
			exchangeCurrencyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(exchangeCurrencyType, exchangeCurrencyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(exchangeCurrencyType, exchangeCurrencyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"exchange_currency\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"exchange_currency\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into exchange_currency")
	}

	if !cached {
		exchangeCurrencyInsertCacheMut.Lock()
		exchangeCurrencyInsertCache[key] = cache
		exchangeCurrencyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single ExchangeCurrency record using the global executor.
// See Update for more documentation.
func (o *ExchangeCurrency) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the ExchangeCurrency.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExchangeCurrency) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	exchangeCurrencyUpdateCacheMut.RLock()
	cache, cached := exchangeCurrencyUpdateCache[key]
	exchangeCurrencyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			exchangeCurrencyColumns,
			exchangeCurrencyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update exchange_currency, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"exchange_currency\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, exchangeCurrencyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(exchangeCurrencyType, exchangeCurrencyMapping, append(wl, exchangeCurrencyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update exchange_currency row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for exchange_currency")
	}

	if !cached {
		exchangeCurrencyUpdateCacheMut.Lock()
		exchangeCurrencyUpdateCache[key] = cache
		exchangeCurrencyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q exchangeCurrencyQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for exchange_currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for exchange_currency")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ExchangeCurrencySlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExchangeCurrencySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"exchange_currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, exchangeCurrencyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in exchangeCurrency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all exchangeCurrency")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ExchangeCurrency) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ExchangeCurrency) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no exchange_currency provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exchangeCurrencyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	exchangeCurrencyUpsertCacheMut.RLock()
	cache, cached := exchangeCurrencyUpsertCache[key]
	exchangeCurrencyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			exchangeCurrencyColumns,
			exchangeCurrencyColumnsWithDefault,
			exchangeCurrencyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			exchangeCurrencyColumns,
			exchangeCurrencyPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert exchange_currency, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(exchangeCurrencyPrimaryKeyColumns))
			copy(conflict, exchangeCurrencyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"exchange_currency\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(exchangeCurrencyType, exchangeCurrencyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(exchangeCurrencyType, exchangeCurrencyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert exchange_currency")
	}

	if !cached {
		exchangeCurrencyUpsertCacheMut.Lock()
		exchangeCurrencyUpsertCache[key] = cache
		exchangeCurrencyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single ExchangeCurrency record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ExchangeCurrency) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single ExchangeCurrency record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExchangeCurrency) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExchangeCurrency provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), exchangeCurrencyPrimaryKeyMapping)
	sql := "DELETE FROM \"exchange_currency\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from exchange_currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for exchange_currency")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q exchangeCurrencyQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no exchangeCurrencyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exchange_currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exchange_currency")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ExchangeCurrencySlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExchangeCurrencySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExchangeCurrency slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(exchangeCurrencyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"exchange_currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, exchangeCurrencyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exchangeCurrency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exchange_currency")
	}

	if len(exchangeCurrencyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ExchangeCurrency) ReloadG() error {
	if o == nil {
		return errors.New("models: no ExchangeCurrency provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExchangeCurrency) Reload(exec boil.Executor) error {
	ret, err := FindExchangeCurrency(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExchangeCurrencySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ExchangeCurrencySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExchangeCurrencySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExchangeCurrencySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"exchange_currency\".* FROM \"exchange_currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, exchangeCurrencyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExchangeCurrencySlice")
	}

	*o = slice

	return nil
}

// ExchangeCurrencyExistsG checks if the ExchangeCurrency row exists.
func ExchangeCurrencyExistsG(iD int) (bool, error) {
	return ExchangeCurrencyExists(boil.GetDB(), iD)
}

// ExchangeCurrencyExists checks if the ExchangeCurrency row exists.
func ExchangeCurrencyExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"exchange_currency\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if exchange_currency exists")
	}

	return exists, nil
}
