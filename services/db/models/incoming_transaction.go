// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// IncomingTransaction is an object representing the database table.
type IncomingTransaction struct {
	ID                               int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Status                           string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	PaymentNetwork                   string    `boil:"payment_network" json:"payment_network" toml:"payment_network" yaml:"payment_network"`
	TransactionHash                  string    `boil:"transaction_hash" json:"transaction_hash" toml:"transaction_hash" yaml:"transaction_hash"`
	BTCSRCOutIndex                   int       `boil:"btc_src_out_index" json:"btc_src_out_index" toml:"btc_src_out_index" yaml:"btc_src_out_index"`
	ReceivingAddress                 string    `boil:"receiving_address" json:"receiving_address" toml:"receiving_address" yaml:"receiving_address"`
	SenderAddress                    string    `boil:"sender_address" json:"sender_address" toml:"sender_address" yaml:"sender_address"`
	PaymentNetworkAmountDenomination string    `boil:"payment_network_amount_denomination" json:"payment_network_amount_denomination" toml:"payment_network_amount_denomination" yaml:"payment_network_amount_denomination"`
	OrderID                          int       `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	CreatedAt                        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                        time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *incomingTransactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L incomingTransactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IncomingTransactionColumns = struct {
	ID                               string
	Status                           string
	PaymentNetwork                   string
	TransactionHash                  string
	BTCSRCOutIndex                   string
	ReceivingAddress                 string
	SenderAddress                    string
	PaymentNetworkAmountDenomination string
	OrderID                          string
	CreatedAt                        string
	UpdatedAt                        string
}{
	ID:                               "id",
	Status:                           "status",
	PaymentNetwork:                   "payment_network",
	TransactionHash:                  "transaction_hash",
	BTCSRCOutIndex:                   "btc_src_out_index",
	ReceivingAddress:                 "receiving_address",
	SenderAddress:                    "sender_address",
	PaymentNetworkAmountDenomination: "payment_network_amount_denomination",
	OrderID:                          "order_id",
	CreatedAt:                        "created_at",
	UpdatedAt:                        "updated_at",
}

// IncomingTransactionRels is where relationship names are stored.
var IncomingTransactionRels = struct {
	Order                string
	OutgoingTransactions string
}{
	Order:                "Order",
	OutgoingTransactions: "OutgoingTransactions",
}

// incomingTransactionR is where relationships are stored.
type incomingTransactionR struct {
	Order                *UserOrder
	OutgoingTransactions OutgoingTransactionSlice
}

// NewStruct creates a new relationship struct
func (*incomingTransactionR) NewStruct() *incomingTransactionR {
	return &incomingTransactionR{}
}

// incomingTransactionL is where Load methods for each relationship are stored.
type incomingTransactionL struct{}

var (
	incomingTransactionColumns               = []string{"id", "status", "payment_network", "transaction_hash", "btc_src_out_index", "receiving_address", "sender_address", "payment_network_amount_denomination", "order_id", "created_at", "updated_at"}
	incomingTransactionColumnsWithoutDefault = []string{"status", "payment_network", "transaction_hash", "receiving_address", "sender_address", "payment_network_amount_denomination", "order_id"}
	incomingTransactionColumnsWithDefault    = []string{"id", "btc_src_out_index", "created_at", "updated_at"}
	incomingTransactionPrimaryKeyColumns     = []string{"id"}
)

type (
	// IncomingTransactionSlice is an alias for a slice of pointers to IncomingTransaction.
	// This should generally be used opposed to []IncomingTransaction.
	IncomingTransactionSlice []*IncomingTransaction
	// IncomingTransactionHook is the signature for custom IncomingTransaction hook methods
	IncomingTransactionHook func(boil.Executor, *IncomingTransaction) error

	incomingTransactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	incomingTransactionType                 = reflect.TypeOf(&IncomingTransaction{})
	incomingTransactionMapping              = queries.MakeStructMapping(incomingTransactionType)
	incomingTransactionPrimaryKeyMapping, _ = queries.BindMapping(incomingTransactionType, incomingTransactionMapping, incomingTransactionPrimaryKeyColumns)
	incomingTransactionInsertCacheMut       sync.RWMutex
	incomingTransactionInsertCache          = make(map[string]insertCache)
	incomingTransactionUpdateCacheMut       sync.RWMutex
	incomingTransactionUpdateCache          = make(map[string]updateCache)
	incomingTransactionUpsertCacheMut       sync.RWMutex
	incomingTransactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var incomingTransactionBeforeInsertHooks []IncomingTransactionHook
var incomingTransactionBeforeUpdateHooks []IncomingTransactionHook
var incomingTransactionBeforeDeleteHooks []IncomingTransactionHook
var incomingTransactionBeforeUpsertHooks []IncomingTransactionHook

var incomingTransactionAfterInsertHooks []IncomingTransactionHook
var incomingTransactionAfterSelectHooks []IncomingTransactionHook
var incomingTransactionAfterUpdateHooks []IncomingTransactionHook
var incomingTransactionAfterDeleteHooks []IncomingTransactionHook
var incomingTransactionAfterUpsertHooks []IncomingTransactionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IncomingTransaction) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range incomingTransactionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IncomingTransaction) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range incomingTransactionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IncomingTransaction) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range incomingTransactionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IncomingTransaction) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range incomingTransactionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IncomingTransaction) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range incomingTransactionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IncomingTransaction) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range incomingTransactionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IncomingTransaction) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range incomingTransactionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IncomingTransaction) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range incomingTransactionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IncomingTransaction) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range incomingTransactionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIncomingTransactionHook registers your hook function for all future operations.
func AddIncomingTransactionHook(hookPoint boil.HookPoint, incomingTransactionHook IncomingTransactionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		incomingTransactionBeforeInsertHooks = append(incomingTransactionBeforeInsertHooks, incomingTransactionHook)
	case boil.BeforeUpdateHook:
		incomingTransactionBeforeUpdateHooks = append(incomingTransactionBeforeUpdateHooks, incomingTransactionHook)
	case boil.BeforeDeleteHook:
		incomingTransactionBeforeDeleteHooks = append(incomingTransactionBeforeDeleteHooks, incomingTransactionHook)
	case boil.BeforeUpsertHook:
		incomingTransactionBeforeUpsertHooks = append(incomingTransactionBeforeUpsertHooks, incomingTransactionHook)
	case boil.AfterInsertHook:
		incomingTransactionAfterInsertHooks = append(incomingTransactionAfterInsertHooks, incomingTransactionHook)
	case boil.AfterSelectHook:
		incomingTransactionAfterSelectHooks = append(incomingTransactionAfterSelectHooks, incomingTransactionHook)
	case boil.AfterUpdateHook:
		incomingTransactionAfterUpdateHooks = append(incomingTransactionAfterUpdateHooks, incomingTransactionHook)
	case boil.AfterDeleteHook:
		incomingTransactionAfterDeleteHooks = append(incomingTransactionAfterDeleteHooks, incomingTransactionHook)
	case boil.AfterUpsertHook:
		incomingTransactionAfterUpsertHooks = append(incomingTransactionAfterUpsertHooks, incomingTransactionHook)
	}
}

// OneG returns a single incomingTransaction record from the query using the global executor.
func (q incomingTransactionQuery) OneG() (*IncomingTransaction, error) {
	return q.One(boil.GetDB())
}

// One returns a single incomingTransaction record from the query.
func (q incomingTransactionQuery) One(exec boil.Executor) (*IncomingTransaction, error) {
	o := &IncomingTransaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for incoming_transaction")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all IncomingTransaction records from the query using the global executor.
func (q incomingTransactionQuery) AllG() (IncomingTransactionSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all IncomingTransaction records from the query.
func (q incomingTransactionQuery) All(exec boil.Executor) (IncomingTransactionSlice, error) {
	var o []*IncomingTransaction

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IncomingTransaction slice")
	}

	if len(incomingTransactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all IncomingTransaction records in the query, and panics on error.
func (q incomingTransactionQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all IncomingTransaction records in the query.
func (q incomingTransactionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count incoming_transaction rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q incomingTransactionQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q incomingTransactionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if incoming_transaction exists")
	}

	return count > 0, nil
}

// Order pointed to by the foreign key.
func (o *IncomingTransaction) Order(mods ...qm.QueryMod) userOrderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	query := UserOrders(queryMods...)
	queries.SetFrom(query.Query, "\"user_order\"")

	return query
}

// OutgoingTransactions retrieves all the outgoing_transaction's OutgoingTransactions with an executor.
func (o *IncomingTransaction) OutgoingTransactions(mods ...qm.QueryMod) outgoingTransactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"outgoing_transaction\".\"incoming_transaction_id\"=?", o.ID),
	)

	query := OutgoingTransactions(queryMods...)
	queries.SetFrom(query.Query, "\"outgoing_transaction\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"outgoing_transaction\".*"})
	}

	return query
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (incomingTransactionL) LoadOrder(e boil.Executor, singular bool, maybeIncomingTransaction interface{}, mods queries.Applicator) error {
	var slice []*IncomingTransaction
	var object *IncomingTransaction

	if singular {
		object = maybeIncomingTransaction.(*IncomingTransaction)
	} else {
		slice = *maybeIncomingTransaction.(*[]*IncomingTransaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &incomingTransactionR{}
		}
		args = append(args, object.OrderID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &incomingTransactionR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)
		}
	}

	query := NewQuery(qm.From(`user_order`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserOrder")
	}

	var resultSlice []*UserOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserOrder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_order")
	}

	if len(incomingTransactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &userOrderR{}
		}
		foreign.R.OrderIncomingTransactions = append(foreign.R.OrderIncomingTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.ID {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &userOrderR{}
				}
				foreign.R.OrderIncomingTransactions = append(foreign.R.OrderIncomingTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadOutgoingTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (incomingTransactionL) LoadOutgoingTransactions(e boil.Executor, singular bool, maybeIncomingTransaction interface{}, mods queries.Applicator) error {
	var slice []*IncomingTransaction
	var object *IncomingTransaction

	if singular {
		object = maybeIncomingTransaction.(*IncomingTransaction)
	} else {
		slice = *maybeIncomingTransaction.(*[]*IncomingTransaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &incomingTransactionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &incomingTransactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`outgoing_transaction`), qm.WhereIn(`incoming_transaction_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load outgoing_transaction")
	}

	var resultSlice []*OutgoingTransaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice outgoing_transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on outgoing_transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for outgoing_transaction")
	}

	if len(outgoingTransactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OutgoingTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &outgoingTransactionR{}
			}
			foreign.R.IncomingTransaction = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IncomingTransactionID) {
				local.R.OutgoingTransactions = append(local.R.OutgoingTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &outgoingTransactionR{}
				}
				foreign.R.IncomingTransaction = local
				break
			}
		}
	}

	return nil
}

// SetOrderG of the incomingTransaction to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderIncomingTransactions.
// Uses the global database handle.
func (o *IncomingTransaction) SetOrderG(insert bool, related *UserOrder) error {
	return o.SetOrder(boil.GetDB(), insert, related)
}

// SetOrder of the incomingTransaction to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderIncomingTransactions.
func (o *IncomingTransaction) SetOrder(exec boil.Executor, insert bool, related *UserOrder) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"incoming_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, incomingTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.ID
	if o.R == nil {
		o.R = &incomingTransactionR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &userOrderR{
			OrderIncomingTransactions: IncomingTransactionSlice{o},
		}
	} else {
		related.R.OrderIncomingTransactions = append(related.R.OrderIncomingTransactions, o)
	}

	return nil
}

// AddOutgoingTransactionsG adds the given related objects to the existing relationships
// of the incoming_transaction, optionally inserting them as new records.
// Appends related to o.R.OutgoingTransactions.
// Sets related.R.IncomingTransaction appropriately.
// Uses the global database handle.
func (o *IncomingTransaction) AddOutgoingTransactionsG(insert bool, related ...*OutgoingTransaction) error {
	return o.AddOutgoingTransactions(boil.GetDB(), insert, related...)
}

// AddOutgoingTransactions adds the given related objects to the existing relationships
// of the incoming_transaction, optionally inserting them as new records.
// Appends related to o.R.OutgoingTransactions.
// Sets related.R.IncomingTransaction appropriately.
func (o *IncomingTransaction) AddOutgoingTransactions(exec boil.Executor, insert bool, related ...*OutgoingTransaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IncomingTransactionID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"outgoing_transaction\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"incoming_transaction_id"}),
				strmangle.WhereClause("\"", "\"", 2, outgoingTransactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IncomingTransactionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &incomingTransactionR{
			OutgoingTransactions: related,
		}
	} else {
		o.R.OutgoingTransactions = append(o.R.OutgoingTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &outgoingTransactionR{
				IncomingTransaction: o,
			}
		} else {
			rel.R.IncomingTransaction = o
		}
	}
	return nil
}

// SetOutgoingTransactionsG removes all previously related items of the
// incoming_transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IncomingTransaction's OutgoingTransactions accordingly.
// Replaces o.R.OutgoingTransactions with related.
// Sets related.R.IncomingTransaction's OutgoingTransactions accordingly.
// Uses the global database handle.
func (o *IncomingTransaction) SetOutgoingTransactionsG(insert bool, related ...*OutgoingTransaction) error {
	return o.SetOutgoingTransactions(boil.GetDB(), insert, related...)
}

// SetOutgoingTransactions removes all previously related items of the
// incoming_transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IncomingTransaction's OutgoingTransactions accordingly.
// Replaces o.R.OutgoingTransactions with related.
// Sets related.R.IncomingTransaction's OutgoingTransactions accordingly.
func (o *IncomingTransaction) SetOutgoingTransactions(exec boil.Executor, insert bool, related ...*OutgoingTransaction) error {
	query := "update \"outgoing_transaction\" set \"incoming_transaction_id\" = null where \"incoming_transaction_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OutgoingTransactions {
			queries.SetScanner(&rel.IncomingTransactionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IncomingTransaction = nil
		}

		o.R.OutgoingTransactions = nil
	}
	return o.AddOutgoingTransactions(exec, insert, related...)
}

// RemoveOutgoingTransactionsG relationships from objects passed in.
// Removes related items from R.OutgoingTransactions (uses pointer comparison, removal does not keep order)
// Sets related.R.IncomingTransaction.
// Uses the global database handle.
func (o *IncomingTransaction) RemoveOutgoingTransactionsG(related ...*OutgoingTransaction) error {
	return o.RemoveOutgoingTransactions(boil.GetDB(), related...)
}

// RemoveOutgoingTransactions relationships from objects passed in.
// Removes related items from R.OutgoingTransactions (uses pointer comparison, removal does not keep order)
// Sets related.R.IncomingTransaction.
func (o *IncomingTransaction) RemoveOutgoingTransactions(exec boil.Executor, related ...*OutgoingTransaction) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IncomingTransactionID, nil)
		if rel.R != nil {
			rel.R.IncomingTransaction = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("incoming_transaction_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OutgoingTransactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.OutgoingTransactions)
			if ln > 1 && i < ln-1 {
				o.R.OutgoingTransactions[i] = o.R.OutgoingTransactions[ln-1]
			}
			o.R.OutgoingTransactions = o.R.OutgoingTransactions[:ln-1]
			break
		}
	}

	return nil
}

// IncomingTransactions retrieves all the records using an executor.
func IncomingTransactions(mods ...qm.QueryMod) incomingTransactionQuery {
	mods = append(mods, qm.From("\"incoming_transaction\""))
	return incomingTransactionQuery{NewQuery(mods...)}
}

// FindIncomingTransactionG retrieves a single record by ID.
func FindIncomingTransactionG(iD int, selectCols ...string) (*IncomingTransaction, error) {
	return FindIncomingTransaction(boil.GetDB(), iD, selectCols...)
}

// FindIncomingTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIncomingTransaction(exec boil.Executor, iD int, selectCols ...string) (*IncomingTransaction, error) {
	incomingTransactionObj := &IncomingTransaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"incoming_transaction\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, incomingTransactionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from incoming_transaction")
	}

	return incomingTransactionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *IncomingTransaction) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IncomingTransaction) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no incoming_transaction provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(incomingTransactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	incomingTransactionInsertCacheMut.RLock()
	cache, cached := incomingTransactionInsertCache[key]
	incomingTransactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			incomingTransactionColumns,
			incomingTransactionColumnsWithDefault,
			incomingTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(incomingTransactionType, incomingTransactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(incomingTransactionType, incomingTransactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"incoming_transaction\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"incoming_transaction\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into incoming_transaction")
	}

	if !cached {
		incomingTransactionInsertCacheMut.Lock()
		incomingTransactionInsertCache[key] = cache
		incomingTransactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single IncomingTransaction record using the global executor.
// See Update for more documentation.
func (o *IncomingTransaction) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the IncomingTransaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IncomingTransaction) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	incomingTransactionUpdateCacheMut.RLock()
	cache, cached := incomingTransactionUpdateCache[key]
	incomingTransactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			incomingTransactionColumns,
			incomingTransactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update incoming_transaction, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"incoming_transaction\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, incomingTransactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(incomingTransactionType, incomingTransactionMapping, append(wl, incomingTransactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update incoming_transaction row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for incoming_transaction")
	}

	if !cached {
		incomingTransactionUpdateCacheMut.Lock()
		incomingTransactionUpdateCache[key] = cache
		incomingTransactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q incomingTransactionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for incoming_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for incoming_transaction")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o IncomingTransactionSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IncomingTransactionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incomingTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"incoming_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, incomingTransactionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in incomingTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all incomingTransaction")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *IncomingTransaction) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IncomingTransaction) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no incoming_transaction provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(incomingTransactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	incomingTransactionUpsertCacheMut.RLock()
	cache, cached := incomingTransactionUpsertCache[key]
	incomingTransactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			incomingTransactionColumns,
			incomingTransactionColumnsWithDefault,
			incomingTransactionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			incomingTransactionColumns,
			incomingTransactionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert incoming_transaction, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(incomingTransactionPrimaryKeyColumns))
			copy(conflict, incomingTransactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"incoming_transaction\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(incomingTransactionType, incomingTransactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(incomingTransactionType, incomingTransactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert incoming_transaction")
	}

	if !cached {
		incomingTransactionUpsertCacheMut.Lock()
		incomingTransactionUpsertCache[key] = cache
		incomingTransactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single IncomingTransaction record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *IncomingTransaction) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single IncomingTransaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IncomingTransaction) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IncomingTransaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), incomingTransactionPrimaryKeyMapping)
	sql := "DELETE FROM \"incoming_transaction\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from incoming_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for incoming_transaction")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q incomingTransactionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no incomingTransactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from incoming_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for incoming_transaction")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o IncomingTransactionSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IncomingTransactionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IncomingTransaction slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(incomingTransactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incomingTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"incoming_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, incomingTransactionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from incomingTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for incoming_transaction")
	}

	if len(incomingTransactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *IncomingTransaction) ReloadG() error {
	if o == nil {
		return errors.New("models: no IncomingTransaction provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IncomingTransaction) Reload(exec boil.Executor) error {
	ret, err := FindIncomingTransaction(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IncomingTransactionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty IncomingTransactionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IncomingTransactionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IncomingTransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incomingTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"incoming_transaction\".* FROM \"incoming_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, incomingTransactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IncomingTransactionSlice")
	}

	*o = slice

	return nil
}

// IncomingTransactionExistsG checks if the IncomingTransaction row exists.
func IncomingTransactionExistsG(iD int) (bool, error) {
	return IncomingTransactionExists(boil.GetDB(), iD)
}

// IncomingTransactionExists checks if the IncomingTransaction row exists.
func IncomingTransactionExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"incoming_transaction\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if incoming_transaction exists")
	}

	return exists, nil
}
