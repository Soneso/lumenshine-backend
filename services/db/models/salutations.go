// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Salutation is an object representing the database table.
type Salutation struct {
	ID         int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	LangCode   string `boil:"lang_code" json:"lang_code" toml:"lang_code" yaml:"lang_code"`
	Salutation string `boil:"salutation" json:"salutation" toml:"salutation" yaml:"salutation"`

	R *salutationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L salutationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SalutationColumns = struct {
	ID         string
	LangCode   string
	Salutation string
}{
	ID:         "id",
	LangCode:   "lang_code",
	Salutation: "salutation",
}

// SalutationRels is where relationship names are stored.
var SalutationRels = struct {
}{}

// salutationR is where relationships are stored.
type salutationR struct {
}

// NewStruct creates a new relationship struct
func (*salutationR) NewStruct() *salutationR {
	return &salutationR{}
}

// salutationL is where Load methods for each relationship are stored.
type salutationL struct{}

var (
	salutationColumns               = []string{"id", "lang_code", "salutation"}
	salutationColumnsWithoutDefault = []string{"lang_code", "salutation"}
	salutationColumnsWithDefault    = []string{"id"}
	salutationPrimaryKeyColumns     = []string{"id"}
)

type (
	// SalutationSlice is an alias for a slice of pointers to Salutation.
	// This should generally be used opposed to []Salutation.
	SalutationSlice []*Salutation
	// SalutationHook is the signature for custom Salutation hook methods
	SalutationHook func(boil.Executor, *Salutation) error

	salutationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	salutationType                 = reflect.TypeOf(&Salutation{})
	salutationMapping              = queries.MakeStructMapping(salutationType)
	salutationPrimaryKeyMapping, _ = queries.BindMapping(salutationType, salutationMapping, salutationPrimaryKeyColumns)
	salutationInsertCacheMut       sync.RWMutex
	salutationInsertCache          = make(map[string]insertCache)
	salutationUpdateCacheMut       sync.RWMutex
	salutationUpdateCache          = make(map[string]updateCache)
	salutationUpsertCacheMut       sync.RWMutex
	salutationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var salutationBeforeInsertHooks []SalutationHook
var salutationBeforeUpdateHooks []SalutationHook
var salutationBeforeDeleteHooks []SalutationHook
var salutationBeforeUpsertHooks []SalutationHook

var salutationAfterInsertHooks []SalutationHook
var salutationAfterSelectHooks []SalutationHook
var salutationAfterUpdateHooks []SalutationHook
var salutationAfterDeleteHooks []SalutationHook
var salutationAfterUpsertHooks []SalutationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Salutation) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range salutationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Salutation) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range salutationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Salutation) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range salutationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Salutation) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range salutationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Salutation) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range salutationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Salutation) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range salutationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Salutation) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range salutationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Salutation) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range salutationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Salutation) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range salutationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSalutationHook registers your hook function for all future operations.
func AddSalutationHook(hookPoint boil.HookPoint, salutationHook SalutationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		salutationBeforeInsertHooks = append(salutationBeforeInsertHooks, salutationHook)
	case boil.BeforeUpdateHook:
		salutationBeforeUpdateHooks = append(salutationBeforeUpdateHooks, salutationHook)
	case boil.BeforeDeleteHook:
		salutationBeforeDeleteHooks = append(salutationBeforeDeleteHooks, salutationHook)
	case boil.BeforeUpsertHook:
		salutationBeforeUpsertHooks = append(salutationBeforeUpsertHooks, salutationHook)
	case boil.AfterInsertHook:
		salutationAfterInsertHooks = append(salutationAfterInsertHooks, salutationHook)
	case boil.AfterSelectHook:
		salutationAfterSelectHooks = append(salutationAfterSelectHooks, salutationHook)
	case boil.AfterUpdateHook:
		salutationAfterUpdateHooks = append(salutationAfterUpdateHooks, salutationHook)
	case boil.AfterDeleteHook:
		salutationAfterDeleteHooks = append(salutationAfterDeleteHooks, salutationHook)
	case boil.AfterUpsertHook:
		salutationAfterUpsertHooks = append(salutationAfterUpsertHooks, salutationHook)
	}
}

// OneG returns a single salutation record from the query using the global executor.
func (q salutationQuery) OneG() (*Salutation, error) {
	return q.One(boil.GetDB())
}

// One returns a single salutation record from the query.
func (q salutationQuery) One(exec boil.Executor) (*Salutation, error) {
	o := &Salutation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for salutations")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Salutation records from the query using the global executor.
func (q salutationQuery) AllG() (SalutationSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Salutation records from the query.
func (q salutationQuery) All(exec boil.Executor) (SalutationSlice, error) {
	var o []*Salutation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Salutation slice")
	}

	if len(salutationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Salutation records in the query, and panics on error.
func (q salutationQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Salutation records in the query.
func (q salutationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count salutations rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q salutationQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q salutationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if salutations exists")
	}

	return count > 0, nil
}

// Salutations retrieves all the records using an executor.
func Salutations(mods ...qm.QueryMod) salutationQuery {
	mods = append(mods, qm.From("\"salutations\""))
	return salutationQuery{NewQuery(mods...)}
}

// FindSalutationG retrieves a single record by ID.
func FindSalutationG(iD int, selectCols ...string) (*Salutation, error) {
	return FindSalutation(boil.GetDB(), iD, selectCols...)
}

// FindSalutation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSalutation(exec boil.Executor, iD int, selectCols ...string) (*Salutation, error) {
	salutationObj := &Salutation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"salutations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, salutationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from salutations")
	}

	return salutationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Salutation) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Salutation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no salutations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salutationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	salutationInsertCacheMut.RLock()
	cache, cached := salutationInsertCache[key]
	salutationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			salutationColumns,
			salutationColumnsWithDefault,
			salutationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(salutationType, salutationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(salutationType, salutationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"salutations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"salutations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into salutations")
	}

	if !cached {
		salutationInsertCacheMut.Lock()
		salutationInsertCache[key] = cache
		salutationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Salutation record using the global executor.
// See Update for more documentation.
func (o *Salutation) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Salutation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Salutation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	salutationUpdateCacheMut.RLock()
	cache, cached := salutationUpdateCache[key]
	salutationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			salutationColumns,
			salutationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update salutations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"salutations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, salutationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(salutationType, salutationMapping, append(wl, salutationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update salutations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for salutations")
	}

	if !cached {
		salutationUpdateCacheMut.Lock()
		salutationUpdateCache[key] = cache
		salutationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q salutationQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q salutationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for salutations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for salutations")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SalutationSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SalutationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salutationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"salutations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, salutationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in salutation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all salutation")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Salutation) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Salutation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no salutations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salutationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	salutationUpsertCacheMut.RLock()
	cache, cached := salutationUpsertCache[key]
	salutationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			salutationColumns,
			salutationColumnsWithDefault,
			salutationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			salutationColumns,
			salutationPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert salutations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(salutationPrimaryKeyColumns))
			copy(conflict, salutationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"salutations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(salutationType, salutationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(salutationType, salutationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert salutations")
	}

	if !cached {
		salutationUpsertCacheMut.Lock()
		salutationUpsertCache[key] = cache
		salutationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Salutation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Salutation) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Salutation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Salutation) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Salutation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), salutationPrimaryKeyMapping)
	sql := "DELETE FROM \"salutations\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from salutations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for salutations")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q salutationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no salutationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from salutations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for salutations")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SalutationSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SalutationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Salutation slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(salutationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salutationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"salutations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, salutationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from salutation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for salutations")
	}

	if len(salutationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Salutation) ReloadG() error {
	if o == nil {
		return errors.New("models: no Salutation provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Salutation) Reload(exec boil.Executor) error {
	ret, err := FindSalutation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SalutationSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty SalutationSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SalutationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SalutationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salutationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"salutations\".* FROM \"salutations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, salutationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SalutationSlice")
	}

	*o = slice

	return nil
}

// SalutationExistsG checks if the Salutation row exists.
func SalutationExistsG(iD int) (bool, error) {
	return SalutationExists(boil.GetDB(), iD)
}

// SalutationExists checks if the Salutation row exists.
func SalutationExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"salutations\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if salutations exists")
	}

	return exists, nil
}
