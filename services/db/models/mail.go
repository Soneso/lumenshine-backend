// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Mail is an object representing the database table.
type Mail struct {
	ID               int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	MailFrom         string    `boil:"mail_from" json:"mail_from" toml:"mail_from" yaml:"mail_from"`
	MailTo           string    `boil:"mail_to" json:"mail_to" toml:"mail_to" yaml:"mail_to"`
	MailSubject      string    `boil:"mail_subject" json:"mail_subject" toml:"mail_subject" yaml:"mail_subject"`
	MailBody         string    `boil:"mail_body" json:"mail_body" toml:"mail_body" yaml:"mail_body"`
	ExternalStatus   string    `boil:"external_status" json:"external_status" toml:"external_status" yaml:"external_status"`
	ExternalStatusID string    `boil:"external_status_id" json:"external_status_id" toml:"external_status_id" yaml:"external_status_id"`
	InternalStatus   int64     `boil:"internal_status" json:"internal_status" toml:"internal_status" yaml:"internal_status"`
	CreatedAt        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedBy        string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *mailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MailColumns = struct {
	ID               string
	MailFrom         string
	MailTo           string
	MailSubject      string
	MailBody         string
	ExternalStatus   string
	ExternalStatusID string
	InternalStatus   string
	CreatedAt        string
	UpdatedBy        string
}{
	ID:               "id",
	MailFrom:         "mail_from",
	MailTo:           "mail_to",
	MailSubject:      "mail_subject",
	MailBody:         "mail_body",
	ExternalStatus:   "external_status",
	ExternalStatusID: "external_status_id",
	InternalStatus:   "internal_status",
	CreatedAt:        "created_at",
	UpdatedBy:        "updated_by",
}

// MailRels is where relationship names are stored.
var MailRels = struct {
}{}

// mailR is where relationships are stored.
type mailR struct {
}

// NewStruct creates a new relationship struct
func (*mailR) NewStruct() *mailR {
	return &mailR{}
}

// mailL is where Load methods for each relationship are stored.
type mailL struct{}

var (
	mailColumns               = []string{"id", "mail_from", "mail_to", "mail_subject", "mail_body", "external_status", "external_status_id", "internal_status", "created_at", "updated_by"}
	mailColumnsWithoutDefault = []string{"mail_from", "mail_to", "mail_subject", "mail_body", "external_status", "external_status_id", "internal_status", "updated_by"}
	mailColumnsWithDefault    = []string{"id", "created_at"}
	mailPrimaryKeyColumns     = []string{"id"}
)

type (
	// MailSlice is an alias for a slice of pointers to Mail.
	// This should generally be used opposed to []Mail.
	MailSlice []*Mail
	// MailHook is the signature for custom Mail hook methods
	MailHook func(boil.Executor, *Mail) error

	mailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mailType                 = reflect.TypeOf(&Mail{})
	mailMapping              = queries.MakeStructMapping(mailType)
	mailPrimaryKeyMapping, _ = queries.BindMapping(mailType, mailMapping, mailPrimaryKeyColumns)
	mailInsertCacheMut       sync.RWMutex
	mailInsertCache          = make(map[string]insertCache)
	mailUpdateCacheMut       sync.RWMutex
	mailUpdateCache          = make(map[string]updateCache)
	mailUpsertCacheMut       sync.RWMutex
	mailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var mailBeforeInsertHooks []MailHook
var mailBeforeUpdateHooks []MailHook
var mailBeforeDeleteHooks []MailHook
var mailBeforeUpsertHooks []MailHook

var mailAfterInsertHooks []MailHook
var mailAfterSelectHooks []MailHook
var mailAfterUpdateHooks []MailHook
var mailAfterDeleteHooks []MailHook
var mailAfterUpsertHooks []MailHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Mail) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mailBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Mail) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mailBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Mail) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mailBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Mail) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mailBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Mail) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mailAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Mail) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range mailAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Mail) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range mailAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Mail) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range mailAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Mail) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range mailAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMailHook registers your hook function for all future operations.
func AddMailHook(hookPoint boil.HookPoint, mailHook MailHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mailBeforeInsertHooks = append(mailBeforeInsertHooks, mailHook)
	case boil.BeforeUpdateHook:
		mailBeforeUpdateHooks = append(mailBeforeUpdateHooks, mailHook)
	case boil.BeforeDeleteHook:
		mailBeforeDeleteHooks = append(mailBeforeDeleteHooks, mailHook)
	case boil.BeforeUpsertHook:
		mailBeforeUpsertHooks = append(mailBeforeUpsertHooks, mailHook)
	case boil.AfterInsertHook:
		mailAfterInsertHooks = append(mailAfterInsertHooks, mailHook)
	case boil.AfterSelectHook:
		mailAfterSelectHooks = append(mailAfterSelectHooks, mailHook)
	case boil.AfterUpdateHook:
		mailAfterUpdateHooks = append(mailAfterUpdateHooks, mailHook)
	case boil.AfterDeleteHook:
		mailAfterDeleteHooks = append(mailAfterDeleteHooks, mailHook)
	case boil.AfterUpsertHook:
		mailAfterUpsertHooks = append(mailAfterUpsertHooks, mailHook)
	}
}

// OneG returns a single mail record from the query using the global executor.
func (q mailQuery) OneG() (*Mail, error) {
	return q.One(boil.GetDB())
}

// One returns a single mail record from the query.
func (q mailQuery) One(exec boil.Executor) (*Mail, error) {
	o := &Mail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mail")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Mail records from the query using the global executor.
func (q mailQuery) AllG() (MailSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Mail records from the query.
func (q mailQuery) All(exec boil.Executor) (MailSlice, error) {
	var o []*Mail

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Mail slice")
	}

	if len(mailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Mail records in the query, and panics on error.
func (q mailQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Mail records in the query.
func (q mailQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mail rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q mailQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q mailQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mail exists")
	}

	return count > 0, nil
}

// Mails retrieves all the records using an executor.
func Mails(mods ...qm.QueryMod) mailQuery {
	mods = append(mods, qm.From("\"mail\""))
	return mailQuery{NewQuery(mods...)}
}

// FindMailG retrieves a single record by ID.
func FindMailG(iD int, selectCols ...string) (*Mail, error) {
	return FindMail(boil.GetDB(), iD, selectCols...)
}

// FindMail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMail(exec boil.Executor, iD int, selectCols ...string) (*Mail, error) {
	mailObj := &Mail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mail\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, mailObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mail")
	}

	return mailObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Mail) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Mail) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mail provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mailInsertCacheMut.RLock()
	cache, cached := mailInsertCache[key]
	mailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mailColumns,
			mailColumnsWithDefault,
			mailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mailType, mailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mailType, mailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mail\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mail\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mail")
	}

	if !cached {
		mailInsertCacheMut.Lock()
		mailInsertCache[key] = cache
		mailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Mail record using the global executor.
// See Update for more documentation.
func (o *Mail) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Mail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Mail) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mailUpdateCacheMut.RLock()
	cache, cached := mailUpdateCache[key]
	mailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mailColumns,
			mailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mail, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mail\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mailType, mailMapping, append(wl, mailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mail row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mail")
	}

	if !cached {
		mailUpdateCacheMut.Lock()
		mailUpdateCache[key] = cache
		mailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q mailQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q mailQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mail")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MailSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MailSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mailPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mail")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Mail) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Mail) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mail provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mailUpsertCacheMut.RLock()
	cache, cached := mailUpsertCache[key]
	mailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mailColumns,
			mailColumnsWithDefault,
			mailColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mailColumns,
			mailPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert mail, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mailPrimaryKeyColumns))
			copy(conflict, mailPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mail\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mailType, mailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mailType, mailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert mail")
	}

	if !cached {
		mailUpsertCacheMut.Lock()
		mailUpsertCache[key] = cache
		mailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Mail record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Mail) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Mail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Mail) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Mail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mailPrimaryKeyMapping)
	sql := "DELETE FROM \"mail\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mail")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mailQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mail")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MailSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MailSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Mail slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(mailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mail\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mailPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mail")
	}

	if len(mailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Mail) ReloadG() error {
	if o == nil {
		return errors.New("models: no Mail provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Mail) Reload(exec boil.Executor) error {
	ret, err := FindMail(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MailSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty MailSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MailSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mail\".* FROM \"mail\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MailSlice")
	}

	*o = slice

	return nil
}

// MailExistsG checks if the Mail row exists.
func MailExistsG(iD int) (bool, error) {
	return MailExists(boil.GetDB(), iD)
}

// MailExists checks if the Mail row exists.
func MailExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mail\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mail exists")
	}

	return exists, nil
}
