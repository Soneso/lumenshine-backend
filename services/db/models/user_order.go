// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserOrder is an object representing the database table.
type UserOrder struct {
	ID                                 int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID                             int        `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	IcoPhaseID                         int        `boil:"ico_phase_id" json:"ico_phase_id" toml:"ico_phase_id" yaml:"ico_phase_id"`
	OrderStatus                        string     `boil:"order_status" json:"order_status" toml:"order_status" yaml:"order_status"`
	TokenAmount                        int64      `boil:"token_amount" json:"token_amount" toml:"token_amount" yaml:"token_amount"`
	StellarUserPublicKey               string     `boil:"stellar_user_public_key" json:"stellar_user_public_key" toml:"stellar_user_public_key" yaml:"stellar_user_public_key"`
	ExchangeCurrencyID                 int        `boil:"exchange_currency_id" json:"exchange_currency_id" toml:"exchange_currency_id" yaml:"exchange_currency_id"`
	ExchangeCurrencyDenominationAmount string     `boil:"exchange_currency_denomination_amount" json:"exchange_currency_denomination_amount" toml:"exchange_currency_denomination_amount" yaml:"exchange_currency_denomination_amount"`
	PaymentNetwork                     string     `boil:"payment_network" json:"payment_network" toml:"payment_network" yaml:"payment_network"`
	PaymentAddress                     string     `boil:"payment_address" json:"payment_address" toml:"payment_address" yaml:"payment_address"`
	PaymentSeed                        string     `boil:"payment_seed" json:"payment_seed" toml:"payment_seed" yaml:"payment_seed"`
	StellarTransactionID               string     `boil:"stellar_transaction_id" json:"stellar_transaction_id" toml:"stellar_transaction_id" yaml:"stellar_transaction_id"`
	PaymentQRImage                     null.Bytes `boil:"payment_qr_image" json:"payment_qr_image,omitempty" toml:"payment_qr_image" yaml:"payment_qr_image,omitempty"`
	PaymentUsage                       string     `boil:"payment_usage" json:"payment_usage" toml:"payment_usage" yaml:"payment_usage"`
	PaymentErrorMessage                string     `boil:"payment_error_message" json:"payment_error_message" toml:"payment_error_message" yaml:"payment_error_message"`
	FeePayed                           bool       `boil:"fee_payed" json:"fee_payed" toml:"fee_payed" yaml:"fee_payed"`
	CreatedAt                          time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                          time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy                          string     `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *userOrderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userOrderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserOrderColumns = struct {
	ID                                 string
	UserID                             string
	IcoPhaseID                         string
	OrderStatus                        string
	TokenAmount                        string
	StellarUserPublicKey               string
	ExchangeCurrencyID                 string
	ExchangeCurrencyDenominationAmount string
	PaymentNetwork                     string
	PaymentAddress                     string
	PaymentSeed                        string
	StellarTransactionID               string
	PaymentQRImage                     string
	PaymentUsage                       string
	PaymentErrorMessage                string
	FeePayed                           string
	CreatedAt                          string
	UpdatedAt                          string
	UpdatedBy                          string
}{
	ID:                                 "id",
	UserID:                             "user_id",
	IcoPhaseID:                         "ico_phase_id",
	OrderStatus:                        "order_status",
	TokenAmount:                        "token_amount",
	StellarUserPublicKey:               "stellar_user_public_key",
	ExchangeCurrencyID:                 "exchange_currency_id",
	ExchangeCurrencyDenominationAmount: "exchange_currency_denomination_amount",
	PaymentNetwork:                     "payment_network",
	PaymentAddress:                     "payment_address",
	PaymentSeed:                        "payment_seed",
	StellarTransactionID:               "stellar_transaction_id",
	PaymentQRImage:                     "payment_qr_image",
	PaymentUsage:                       "payment_usage",
	PaymentErrorMessage:                "payment_error_message",
	FeePayed:                           "fee_payed",
	CreatedAt:                          "created_at",
	UpdatedAt:                          "updated_at",
	UpdatedBy:                          "updated_by",
}

// UserOrderRels is where relationship names are stored.
var UserOrderRels = struct {
	User                      string
	IcoPhase                  string
	ExchangeCurrency          string
	OrderIncomingTransactions string
	OrderOrderTransactionLogs string
	OrderOutgoingTransactions string
}{
	User:                      "User",
	IcoPhase:                  "IcoPhase",
	ExchangeCurrency:          "ExchangeCurrency",
	OrderIncomingTransactions: "OrderIncomingTransactions",
	OrderOrderTransactionLogs: "OrderOrderTransactionLogs",
	OrderOutgoingTransactions: "OrderOutgoingTransactions",
}

// userOrderR is where relationships are stored.
type userOrderR struct {
	User                      *UserProfile
	IcoPhase                  *IcoPhase
	ExchangeCurrency          *ExchangeCurrency
	OrderIncomingTransactions IncomingTransactionSlice
	OrderOrderTransactionLogs OrderTransactionLogSlice
	OrderOutgoingTransactions OutgoingTransactionSlice
}

// NewStruct creates a new relationship struct
func (*userOrderR) NewStruct() *userOrderR {
	return &userOrderR{}
}

// userOrderL is where Load methods for each relationship are stored.
type userOrderL struct{}

var (
	userOrderColumns               = []string{"id", "user_id", "ico_phase_id", "order_status", "token_amount", "stellar_user_public_key", "exchange_currency_id", "exchange_currency_denomination_amount", "payment_network", "payment_address", "payment_seed", "stellar_transaction_id", "payment_qr_image", "payment_usage", "payment_error_message", "fee_payed", "created_at", "updated_at", "updated_by"}
	userOrderColumnsWithoutDefault = []string{"user_id", "ico_phase_id", "order_status", "token_amount", "stellar_user_public_key", "exchange_currency_id", "exchange_currency_denomination_amount", "payment_network", "payment_address", "payment_seed", "stellar_transaction_id", "payment_qr_image", "payment_usage", "payment_error_message", "updated_by"}
	userOrderColumnsWithDefault    = []string{"id", "fee_payed", "created_at", "updated_at"}
	userOrderPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserOrderSlice is an alias for a slice of pointers to UserOrder.
	// This should generally be used opposed to []UserOrder.
	UserOrderSlice []*UserOrder
	// UserOrderHook is the signature for custom UserOrder hook methods
	UserOrderHook func(boil.Executor, *UserOrder) error

	userOrderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userOrderType                 = reflect.TypeOf(&UserOrder{})
	userOrderMapping              = queries.MakeStructMapping(userOrderType)
	userOrderPrimaryKeyMapping, _ = queries.BindMapping(userOrderType, userOrderMapping, userOrderPrimaryKeyColumns)
	userOrderInsertCacheMut       sync.RWMutex
	userOrderInsertCache          = make(map[string]insertCache)
	userOrderUpdateCacheMut       sync.RWMutex
	userOrderUpdateCache          = make(map[string]updateCache)
	userOrderUpsertCacheMut       sync.RWMutex
	userOrderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var userOrderBeforeInsertHooks []UserOrderHook
var userOrderBeforeUpdateHooks []UserOrderHook
var userOrderBeforeDeleteHooks []UserOrderHook
var userOrderBeforeUpsertHooks []UserOrderHook

var userOrderAfterInsertHooks []UserOrderHook
var userOrderAfterSelectHooks []UserOrderHook
var userOrderAfterUpdateHooks []UserOrderHook
var userOrderAfterDeleteHooks []UserOrderHook
var userOrderAfterUpsertHooks []UserOrderHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserOrder) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserOrder) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserOrder) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserOrder) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserOrder) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserOrder) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserOrder) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserOrder) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserOrder) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userOrderAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserOrderHook registers your hook function for all future operations.
func AddUserOrderHook(hookPoint boil.HookPoint, userOrderHook UserOrderHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userOrderBeforeInsertHooks = append(userOrderBeforeInsertHooks, userOrderHook)
	case boil.BeforeUpdateHook:
		userOrderBeforeUpdateHooks = append(userOrderBeforeUpdateHooks, userOrderHook)
	case boil.BeforeDeleteHook:
		userOrderBeforeDeleteHooks = append(userOrderBeforeDeleteHooks, userOrderHook)
	case boil.BeforeUpsertHook:
		userOrderBeforeUpsertHooks = append(userOrderBeforeUpsertHooks, userOrderHook)
	case boil.AfterInsertHook:
		userOrderAfterInsertHooks = append(userOrderAfterInsertHooks, userOrderHook)
	case boil.AfterSelectHook:
		userOrderAfterSelectHooks = append(userOrderAfterSelectHooks, userOrderHook)
	case boil.AfterUpdateHook:
		userOrderAfterUpdateHooks = append(userOrderAfterUpdateHooks, userOrderHook)
	case boil.AfterDeleteHook:
		userOrderAfterDeleteHooks = append(userOrderAfterDeleteHooks, userOrderHook)
	case boil.AfterUpsertHook:
		userOrderAfterUpsertHooks = append(userOrderAfterUpsertHooks, userOrderHook)
	}
}

// OneG returns a single userOrder record from the query using the global executor.
func (q userOrderQuery) OneG() (*UserOrder, error) {
	return q.One(boil.GetDB())
}

// One returns a single userOrder record from the query.
func (q userOrderQuery) One(exec boil.Executor) (*UserOrder, error) {
	o := &UserOrder{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_order")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserOrder records from the query using the global executor.
func (q userOrderQuery) AllG() (UserOrderSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all UserOrder records from the query.
func (q userOrderQuery) All(exec boil.Executor) (UserOrderSlice, error) {
	var o []*UserOrder

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserOrder slice")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserOrder records in the query, and panics on error.
func (q userOrderQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all UserOrder records in the query.
func (q userOrderQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_order rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q userOrderQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q userOrderQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_order exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserOrder) User(mods ...qm.QueryMod) userProfileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := UserProfiles(queryMods...)
	queries.SetFrom(query.Query, "\"user_profile\"")

	return query
}

// IcoPhase pointed to by the foreign key.
func (o *UserOrder) IcoPhase(mods ...qm.QueryMod) icoPhaseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.IcoPhaseID),
	}

	queryMods = append(queryMods, mods...)

	query := IcoPhases(queryMods...)
	queries.SetFrom(query.Query, "\"ico_phase\"")

	return query
}

// ExchangeCurrency pointed to by the foreign key.
func (o *UserOrder) ExchangeCurrency(mods ...qm.QueryMod) exchangeCurrencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ExchangeCurrencyID),
	}

	queryMods = append(queryMods, mods...)

	query := ExchangeCurrencies(queryMods...)
	queries.SetFrom(query.Query, "\"exchange_currency\"")

	return query
}

// OrderIncomingTransactions retrieves all the incoming_transaction's IncomingTransactions with an executor via order_id column.
func (o *UserOrder) OrderIncomingTransactions(mods ...qm.QueryMod) incomingTransactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"incoming_transaction\".\"order_id\"=?", o.ID),
	)

	query := IncomingTransactions(queryMods...)
	queries.SetFrom(query.Query, "\"incoming_transaction\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"incoming_transaction\".*"})
	}

	return query
}

// OrderOrderTransactionLogs retrieves all the order_transaction_log's OrderTransactionLogs with an executor via order_id column.
func (o *UserOrder) OrderOrderTransactionLogs(mods ...qm.QueryMod) orderTransactionLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_transaction_log\".\"order_id\"=?", o.ID),
	)

	query := OrderTransactionLogs(queryMods...)
	queries.SetFrom(query.Query, "\"order_transaction_log\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"order_transaction_log\".*"})
	}

	return query
}

// OrderOutgoingTransactions retrieves all the outgoing_transaction's OutgoingTransactions with an executor via order_id column.
func (o *UserOrder) OrderOutgoingTransactions(mods ...qm.QueryMod) outgoingTransactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"outgoing_transaction\".\"order_id\"=?", o.ID),
	)

	query := OutgoingTransactions(queryMods...)
	queries.SetFrom(query.Query, "\"outgoing_transaction\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"outgoing_transaction\".*"})
	}

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userOrderL) LoadUser(e boil.Executor, singular bool, maybeUserOrder interface{}, mods queries.Applicator) error {
	var slice []*UserOrder
	var object *UserOrder

	if singular {
		object = maybeUserOrder.(*UserOrder)
	} else {
		slice = *maybeUserOrder.(*[]*UserOrder)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userOrderR{}
		}
		args = append(args, object.UserID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrderR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)
		}
	}

	query := NewQuery(qm.From(`user_profile`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserProfile")
	}

	var resultSlice []*UserProfile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserProfile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_profile")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_profile")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userProfileR{}
		}
		foreign.R.UserUserOrders = append(foreign.R.UserUserOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userProfileR{}
				}
				foreign.R.UserUserOrders = append(foreign.R.UserUserOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadIcoPhase allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userOrderL) LoadIcoPhase(e boil.Executor, singular bool, maybeUserOrder interface{}, mods queries.Applicator) error {
	var slice []*UserOrder
	var object *UserOrder

	if singular {
		object = maybeUserOrder.(*UserOrder)
	} else {
		slice = *maybeUserOrder.(*[]*UserOrder)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userOrderR{}
		}
		args = append(args, object.IcoPhaseID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrderR{}
			}

			for _, a := range args {
				if a == obj.IcoPhaseID {
					continue Outer
				}
			}

			args = append(args, obj.IcoPhaseID)
		}
	}

	query := NewQuery(qm.From(`ico_phase`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load IcoPhase")
	}

	var resultSlice []*IcoPhase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice IcoPhase")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ico_phase")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ico_phase")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IcoPhase = foreign
		if foreign.R == nil {
			foreign.R = &icoPhaseR{}
		}
		foreign.R.UserOrders = append(foreign.R.UserOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IcoPhaseID == foreign.ID {
				local.R.IcoPhase = foreign
				if foreign.R == nil {
					foreign.R = &icoPhaseR{}
				}
				foreign.R.UserOrders = append(foreign.R.UserOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadExchangeCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userOrderL) LoadExchangeCurrency(e boil.Executor, singular bool, maybeUserOrder interface{}, mods queries.Applicator) error {
	var slice []*UserOrder
	var object *UserOrder

	if singular {
		object = maybeUserOrder.(*UserOrder)
	} else {
		slice = *maybeUserOrder.(*[]*UserOrder)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userOrderR{}
		}
		args = append(args, object.ExchangeCurrencyID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrderR{}
			}

			for _, a := range args {
				if a == obj.ExchangeCurrencyID {
					continue Outer
				}
			}

			args = append(args, obj.ExchangeCurrencyID)
		}
	}

	query := NewQuery(qm.From(`exchange_currency`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ExchangeCurrency")
	}

	var resultSlice []*ExchangeCurrency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ExchangeCurrency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for exchange_currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exchange_currency")
	}

	if len(userOrderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ExchangeCurrency = foreign
		if foreign.R == nil {
			foreign.R = &exchangeCurrencyR{}
		}
		foreign.R.UserOrders = append(foreign.R.UserOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExchangeCurrencyID == foreign.ID {
				local.R.ExchangeCurrency = foreign
				if foreign.R == nil {
					foreign.R = &exchangeCurrencyR{}
				}
				foreign.R.UserOrders = append(foreign.R.UserOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadOrderIncomingTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userOrderL) LoadOrderIncomingTransactions(e boil.Executor, singular bool, maybeUserOrder interface{}, mods queries.Applicator) error {
	var slice []*UserOrder
	var object *UserOrder

	if singular {
		object = maybeUserOrder.(*UserOrder)
	} else {
		slice = *maybeUserOrder.(*[]*UserOrder)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userOrderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrderR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`incoming_transaction`), qm.WhereIn(`order_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load incoming_transaction")
	}

	var resultSlice []*IncomingTransaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice incoming_transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on incoming_transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for incoming_transaction")
	}

	if len(incomingTransactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderIncomingTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &incomingTransactionR{}
			}
			foreign.R.Order = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrderID {
				local.R.OrderIncomingTransactions = append(local.R.OrderIncomingTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &incomingTransactionR{}
				}
				foreign.R.Order = local
				break
			}
		}
	}

	return nil
}

// LoadOrderOrderTransactionLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userOrderL) LoadOrderOrderTransactionLogs(e boil.Executor, singular bool, maybeUserOrder interface{}, mods queries.Applicator) error {
	var slice []*UserOrder
	var object *UserOrder

	if singular {
		object = maybeUserOrder.(*UserOrder)
	} else {
		slice = *maybeUserOrder.(*[]*UserOrder)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userOrderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrderR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`order_transaction_log`), qm.WhereIn(`order_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_transaction_log")
	}

	var resultSlice []*OrderTransactionLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_transaction_log")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_transaction_log")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_transaction_log")
	}

	if len(orderTransactionLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderOrderTransactionLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderTransactionLogR{}
			}
			foreign.R.Order = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrderID {
				local.R.OrderOrderTransactionLogs = append(local.R.OrderOrderTransactionLogs, foreign)
				if foreign.R == nil {
					foreign.R = &orderTransactionLogR{}
				}
				foreign.R.Order = local
				break
			}
		}
	}

	return nil
}

// LoadOrderOutgoingTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userOrderL) LoadOrderOutgoingTransactions(e boil.Executor, singular bool, maybeUserOrder interface{}, mods queries.Applicator) error {
	var slice []*UserOrder
	var object *UserOrder

	if singular {
		object = maybeUserOrder.(*UserOrder)
	} else {
		slice = *maybeUserOrder.(*[]*UserOrder)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userOrderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userOrderR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`outgoing_transaction`), qm.WhereIn(`order_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load outgoing_transaction")
	}

	var resultSlice []*OutgoingTransaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice outgoing_transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on outgoing_transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for outgoing_transaction")
	}

	if len(outgoingTransactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderOutgoingTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &outgoingTransactionR{}
			}
			foreign.R.Order = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.OrderID {
				local.R.OrderOutgoingTransactions = append(local.R.OrderOutgoingTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &outgoingTransactionR{}
				}
				foreign.R.Order = local
				break
			}
		}
	}

	return nil
}

// SetUserG of the userOrder to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserOrders.
// Uses the global database handle.
func (o *UserOrder) SetUserG(insert bool, related *UserProfile) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUser of the userOrder to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserUserOrders.
func (o *UserOrder) SetUser(exec boil.Executor, insert bool, related *UserProfile) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userOrderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userOrderR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userProfileR{
			UserUserOrders: UserOrderSlice{o},
		}
	} else {
		related.R.UserUserOrders = append(related.R.UserUserOrders, o)
	}

	return nil
}

// SetIcoPhaseG of the userOrder to the related item.
// Sets o.R.IcoPhase to related.
// Adds o to related.R.UserOrders.
// Uses the global database handle.
func (o *UserOrder) SetIcoPhaseG(insert bool, related *IcoPhase) error {
	return o.SetIcoPhase(boil.GetDB(), insert, related)
}

// SetIcoPhase of the userOrder to the related item.
// Sets o.R.IcoPhase to related.
// Adds o to related.R.UserOrders.
func (o *UserOrder) SetIcoPhase(exec boil.Executor, insert bool, related *IcoPhase) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ico_phase_id"}),
		strmangle.WhereClause("\"", "\"", 2, userOrderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IcoPhaseID = related.ID
	if o.R == nil {
		o.R = &userOrderR{
			IcoPhase: related,
		}
	} else {
		o.R.IcoPhase = related
	}

	if related.R == nil {
		related.R = &icoPhaseR{
			UserOrders: UserOrderSlice{o},
		}
	} else {
		related.R.UserOrders = append(related.R.UserOrders, o)
	}

	return nil
}

// SetExchangeCurrencyG of the userOrder to the related item.
// Sets o.R.ExchangeCurrency to related.
// Adds o to related.R.UserOrders.
// Uses the global database handle.
func (o *UserOrder) SetExchangeCurrencyG(insert bool, related *ExchangeCurrency) error {
	return o.SetExchangeCurrency(boil.GetDB(), insert, related)
}

// SetExchangeCurrency of the userOrder to the related item.
// Sets o.R.ExchangeCurrency to related.
// Adds o to related.R.UserOrders.
func (o *UserOrder) SetExchangeCurrency(exec boil.Executor, insert bool, related *ExchangeCurrency) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"exchange_currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, userOrderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExchangeCurrencyID = related.ID
	if o.R == nil {
		o.R = &userOrderR{
			ExchangeCurrency: related,
		}
	} else {
		o.R.ExchangeCurrency = related
	}

	if related.R == nil {
		related.R = &exchangeCurrencyR{
			UserOrders: UserOrderSlice{o},
		}
	} else {
		related.R.UserOrders = append(related.R.UserOrders, o)
	}

	return nil
}

// AddOrderIncomingTransactionsG adds the given related objects to the existing relationships
// of the user_order, optionally inserting them as new records.
// Appends related to o.R.OrderIncomingTransactions.
// Sets related.R.Order appropriately.
// Uses the global database handle.
func (o *UserOrder) AddOrderIncomingTransactionsG(insert bool, related ...*IncomingTransaction) error {
	return o.AddOrderIncomingTransactions(boil.GetDB(), insert, related...)
}

// AddOrderIncomingTransactions adds the given related objects to the existing relationships
// of the user_order, optionally inserting them as new records.
// Appends related to o.R.OrderIncomingTransactions.
// Sets related.R.Order appropriately.
func (o *UserOrder) AddOrderIncomingTransactions(exec boil.Executor, insert bool, related ...*IncomingTransaction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrderID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"incoming_transaction\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
				strmangle.WhereClause("\"", "\"", 2, incomingTransactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrderID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userOrderR{
			OrderIncomingTransactions: related,
		}
	} else {
		o.R.OrderIncomingTransactions = append(o.R.OrderIncomingTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &incomingTransactionR{
				Order: o,
			}
		} else {
			rel.R.Order = o
		}
	}
	return nil
}

// AddOrderOrderTransactionLogsG adds the given related objects to the existing relationships
// of the user_order, optionally inserting them as new records.
// Appends related to o.R.OrderOrderTransactionLogs.
// Sets related.R.Order appropriately.
// Uses the global database handle.
func (o *UserOrder) AddOrderOrderTransactionLogsG(insert bool, related ...*OrderTransactionLog) error {
	return o.AddOrderOrderTransactionLogs(boil.GetDB(), insert, related...)
}

// AddOrderOrderTransactionLogs adds the given related objects to the existing relationships
// of the user_order, optionally inserting them as new records.
// Appends related to o.R.OrderOrderTransactionLogs.
// Sets related.R.Order appropriately.
func (o *UserOrder) AddOrderOrderTransactionLogs(exec boil.Executor, insert bool, related ...*OrderTransactionLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrderID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_transaction_log\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderTransactionLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrderID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userOrderR{
			OrderOrderTransactionLogs: related,
		}
	} else {
		o.R.OrderOrderTransactionLogs = append(o.R.OrderOrderTransactionLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderTransactionLogR{
				Order: o,
			}
		} else {
			rel.R.Order = o
		}
	}
	return nil
}

// AddOrderOutgoingTransactionsG adds the given related objects to the existing relationships
// of the user_order, optionally inserting them as new records.
// Appends related to o.R.OrderOutgoingTransactions.
// Sets related.R.Order appropriately.
// Uses the global database handle.
func (o *UserOrder) AddOrderOutgoingTransactionsG(insert bool, related ...*OutgoingTransaction) error {
	return o.AddOrderOutgoingTransactions(boil.GetDB(), insert, related...)
}

// AddOrderOutgoingTransactions adds the given related objects to the existing relationships
// of the user_order, optionally inserting them as new records.
// Appends related to o.R.OrderOutgoingTransactions.
// Sets related.R.Order appropriately.
func (o *UserOrder) AddOrderOutgoingTransactions(exec boil.Executor, insert bool, related ...*OutgoingTransaction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrderID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"outgoing_transaction\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
				strmangle.WhereClause("\"", "\"", 2, outgoingTransactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrderID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userOrderR{
			OrderOutgoingTransactions: related,
		}
	} else {
		o.R.OrderOutgoingTransactions = append(o.R.OrderOutgoingTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &outgoingTransactionR{
				Order: o,
			}
		} else {
			rel.R.Order = o
		}
	}
	return nil
}

// UserOrders retrieves all the records using an executor.
func UserOrders(mods ...qm.QueryMod) userOrderQuery {
	mods = append(mods, qm.From("\"user_order\""))
	return userOrderQuery{NewQuery(mods...)}
}

// FindUserOrderG retrieves a single record by ID.
func FindUserOrderG(iD int, selectCols ...string) (*UserOrder, error) {
	return FindUserOrder(boil.GetDB(), iD, selectCols...)
}

// FindUserOrder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserOrder(exec boil.Executor, iD int, selectCols ...string) (*UserOrder, error) {
	userOrderObj := &UserOrder{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_order\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userOrderObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_order")
	}

	return userOrderObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserOrder) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserOrder) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_order provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userOrderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userOrderInsertCacheMut.RLock()
	cache, cached := userOrderInsertCache[key]
	userOrderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userOrderColumns,
			userOrderColumnsWithDefault,
			userOrderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userOrderType, userOrderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userOrderType, userOrderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_order\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_order\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_order")
	}

	if !cached {
		userOrderInsertCacheMut.Lock()
		userOrderInsertCache[key] = cache
		userOrderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserOrder record using the global executor.
// See Update for more documentation.
func (o *UserOrder) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the UserOrder.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserOrder) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userOrderUpdateCacheMut.RLock()
	cache, cached := userOrderUpdateCache[key]
	userOrderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userOrderColumns,
			userOrderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_order, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_order\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userOrderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userOrderType, userOrderMapping, append(wl, userOrderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_order row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_order")
	}

	if !cached {
		userOrderUpdateCacheMut.Lock()
		userOrderUpdateCache[key] = cache
		userOrderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userOrderQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_order")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserOrderSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserOrderSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_order\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userOrderPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userOrder")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserOrder) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserOrder) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_order provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userOrderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userOrderUpsertCacheMut.RLock()
	cache, cached := userOrderUpsertCache[key]
	userOrderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userOrderColumns,
			userOrderColumnsWithDefault,
			userOrderColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userOrderColumns,
			userOrderPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert user_order, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userOrderPrimaryKeyColumns))
			copy(conflict, userOrderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_order\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userOrderType, userOrderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userOrderType, userOrderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_order")
	}

	if !cached {
		userOrderUpsertCacheMut.Lock()
		userOrderUpsertCache[key] = cache
		userOrderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single UserOrder record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserOrder) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single UserOrder record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserOrder) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserOrder provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userOrderPrimaryKeyMapping)
	sql := "DELETE FROM \"user_order\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_order")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userOrderQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userOrderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_order")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_order")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserOrderSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserOrderSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserOrder slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(userOrderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_order\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userOrderPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userOrder slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_order")
	}

	if len(userOrderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserOrder) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserOrder provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserOrder) Reload(exec boil.Executor) error {
	ret, err := FindUserOrder(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserOrderSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserOrderSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserOrderSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserOrderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userOrderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_order\".* FROM \"user_order\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userOrderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserOrderSlice")
	}

	*o = slice

	return nil
}

// UserOrderExistsG checks if the UserOrder row exists.
func UserOrderExistsG(iD int) (bool, error) {
	return UserOrderExists(boil.GetDB(), iD)
}

// UserOrderExists checks if the UserOrder row exists.
func UserOrderExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_order\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_order exists")
	}

	return exists, nil
}
