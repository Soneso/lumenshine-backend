// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// IcoSupportedExchangeCurrency is an object representing the database table.
type IcoSupportedExchangeCurrency struct {
	ID                 int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IcoID              int       `boil:"ico_id" json:"ico_id" toml:"ico_id" yaml:"ico_id"`
	ExchangeCurrencyID int       `boil:"exchange_currency_id" json:"exchange_currency_id" toml:"exchange_currency_id" yaml:"exchange_currency_id"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy          string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *icoSupportedExchangeCurrencyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L icoSupportedExchangeCurrencyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IcoSupportedExchangeCurrencyColumns = struct {
	ID                 string
	IcoID              string
	ExchangeCurrencyID string
	CreatedAt          string
	UpdatedAt          string
	UpdatedBy          string
}{
	ID:                 "id",
	IcoID:              "ico_id",
	ExchangeCurrencyID: "exchange_currency_id",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	UpdatedBy:          "updated_by",
}

// IcoSupportedExchangeCurrencyRels is where relationship names are stored.
var IcoSupportedExchangeCurrencyRels = struct {
	Ico              string
	ExchangeCurrency string
}{
	Ico:              "Ico",
	ExchangeCurrency: "ExchangeCurrency",
}

// icoSupportedExchangeCurrencyR is where relationships are stored.
type icoSupportedExchangeCurrencyR struct {
	Ico              *Ico
	ExchangeCurrency *ExchangeCurrency
}

// NewStruct creates a new relationship struct
func (*icoSupportedExchangeCurrencyR) NewStruct() *icoSupportedExchangeCurrencyR {
	return &icoSupportedExchangeCurrencyR{}
}

// icoSupportedExchangeCurrencyL is where Load methods for each relationship are stored.
type icoSupportedExchangeCurrencyL struct{}

var (
	icoSupportedExchangeCurrencyColumns               = []string{"id", "ico_id", "exchange_currency_id", "created_at", "updated_at", "updated_by"}
	icoSupportedExchangeCurrencyColumnsWithoutDefault = []string{"ico_id", "exchange_currency_id", "updated_by"}
	icoSupportedExchangeCurrencyColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	icoSupportedExchangeCurrencyPrimaryKeyColumns     = []string{"id"}
)

type (
	// IcoSupportedExchangeCurrencySlice is an alias for a slice of pointers to IcoSupportedExchangeCurrency.
	// This should generally be used opposed to []IcoSupportedExchangeCurrency.
	IcoSupportedExchangeCurrencySlice []*IcoSupportedExchangeCurrency
	// IcoSupportedExchangeCurrencyHook is the signature for custom IcoSupportedExchangeCurrency hook methods
	IcoSupportedExchangeCurrencyHook func(boil.Executor, *IcoSupportedExchangeCurrency) error

	icoSupportedExchangeCurrencyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	icoSupportedExchangeCurrencyType                 = reflect.TypeOf(&IcoSupportedExchangeCurrency{})
	icoSupportedExchangeCurrencyMapping              = queries.MakeStructMapping(icoSupportedExchangeCurrencyType)
	icoSupportedExchangeCurrencyPrimaryKeyMapping, _ = queries.BindMapping(icoSupportedExchangeCurrencyType, icoSupportedExchangeCurrencyMapping, icoSupportedExchangeCurrencyPrimaryKeyColumns)
	icoSupportedExchangeCurrencyInsertCacheMut       sync.RWMutex
	icoSupportedExchangeCurrencyInsertCache          = make(map[string]insertCache)
	icoSupportedExchangeCurrencyUpdateCacheMut       sync.RWMutex
	icoSupportedExchangeCurrencyUpdateCache          = make(map[string]updateCache)
	icoSupportedExchangeCurrencyUpsertCacheMut       sync.RWMutex
	icoSupportedExchangeCurrencyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var icoSupportedExchangeCurrencyBeforeInsertHooks []IcoSupportedExchangeCurrencyHook
var icoSupportedExchangeCurrencyBeforeUpdateHooks []IcoSupportedExchangeCurrencyHook
var icoSupportedExchangeCurrencyBeforeDeleteHooks []IcoSupportedExchangeCurrencyHook
var icoSupportedExchangeCurrencyBeforeUpsertHooks []IcoSupportedExchangeCurrencyHook

var icoSupportedExchangeCurrencyAfterInsertHooks []IcoSupportedExchangeCurrencyHook
var icoSupportedExchangeCurrencyAfterSelectHooks []IcoSupportedExchangeCurrencyHook
var icoSupportedExchangeCurrencyAfterUpdateHooks []IcoSupportedExchangeCurrencyHook
var icoSupportedExchangeCurrencyAfterDeleteHooks []IcoSupportedExchangeCurrencyHook
var icoSupportedExchangeCurrencyAfterUpsertHooks []IcoSupportedExchangeCurrencyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IcoSupportedExchangeCurrency) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoSupportedExchangeCurrencyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IcoSupportedExchangeCurrency) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range icoSupportedExchangeCurrencyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IcoSupportedExchangeCurrency) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range icoSupportedExchangeCurrencyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IcoSupportedExchangeCurrency) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoSupportedExchangeCurrencyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IcoSupportedExchangeCurrency) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoSupportedExchangeCurrencyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IcoSupportedExchangeCurrency) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range icoSupportedExchangeCurrencyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IcoSupportedExchangeCurrency) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range icoSupportedExchangeCurrencyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IcoSupportedExchangeCurrency) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range icoSupportedExchangeCurrencyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IcoSupportedExchangeCurrency) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoSupportedExchangeCurrencyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIcoSupportedExchangeCurrencyHook registers your hook function for all future operations.
func AddIcoSupportedExchangeCurrencyHook(hookPoint boil.HookPoint, icoSupportedExchangeCurrencyHook IcoSupportedExchangeCurrencyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		icoSupportedExchangeCurrencyBeforeInsertHooks = append(icoSupportedExchangeCurrencyBeforeInsertHooks, icoSupportedExchangeCurrencyHook)
	case boil.BeforeUpdateHook:
		icoSupportedExchangeCurrencyBeforeUpdateHooks = append(icoSupportedExchangeCurrencyBeforeUpdateHooks, icoSupportedExchangeCurrencyHook)
	case boil.BeforeDeleteHook:
		icoSupportedExchangeCurrencyBeforeDeleteHooks = append(icoSupportedExchangeCurrencyBeforeDeleteHooks, icoSupportedExchangeCurrencyHook)
	case boil.BeforeUpsertHook:
		icoSupportedExchangeCurrencyBeforeUpsertHooks = append(icoSupportedExchangeCurrencyBeforeUpsertHooks, icoSupportedExchangeCurrencyHook)
	case boil.AfterInsertHook:
		icoSupportedExchangeCurrencyAfterInsertHooks = append(icoSupportedExchangeCurrencyAfterInsertHooks, icoSupportedExchangeCurrencyHook)
	case boil.AfterSelectHook:
		icoSupportedExchangeCurrencyAfterSelectHooks = append(icoSupportedExchangeCurrencyAfterSelectHooks, icoSupportedExchangeCurrencyHook)
	case boil.AfterUpdateHook:
		icoSupportedExchangeCurrencyAfterUpdateHooks = append(icoSupportedExchangeCurrencyAfterUpdateHooks, icoSupportedExchangeCurrencyHook)
	case boil.AfterDeleteHook:
		icoSupportedExchangeCurrencyAfterDeleteHooks = append(icoSupportedExchangeCurrencyAfterDeleteHooks, icoSupportedExchangeCurrencyHook)
	case boil.AfterUpsertHook:
		icoSupportedExchangeCurrencyAfterUpsertHooks = append(icoSupportedExchangeCurrencyAfterUpsertHooks, icoSupportedExchangeCurrencyHook)
	}
}

// OneG returns a single icoSupportedExchangeCurrency record from the query using the global executor.
func (q icoSupportedExchangeCurrencyQuery) OneG() (*IcoSupportedExchangeCurrency, error) {
	return q.One(boil.GetDB())
}

// One returns a single icoSupportedExchangeCurrency record from the query.
func (q icoSupportedExchangeCurrencyQuery) One(exec boil.Executor) (*IcoSupportedExchangeCurrency, error) {
	o := &IcoSupportedExchangeCurrency{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ico_supported_exchange_currency")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all IcoSupportedExchangeCurrency records from the query using the global executor.
func (q icoSupportedExchangeCurrencyQuery) AllG() (IcoSupportedExchangeCurrencySlice, error) {
	return q.All(boil.GetDB())
}

// All returns all IcoSupportedExchangeCurrency records from the query.
func (q icoSupportedExchangeCurrencyQuery) All(exec boil.Executor) (IcoSupportedExchangeCurrencySlice, error) {
	var o []*IcoSupportedExchangeCurrency

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IcoSupportedExchangeCurrency slice")
	}

	if len(icoSupportedExchangeCurrencyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all IcoSupportedExchangeCurrency records in the query, and panics on error.
func (q icoSupportedExchangeCurrencyQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all IcoSupportedExchangeCurrency records in the query.
func (q icoSupportedExchangeCurrencyQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ico_supported_exchange_currency rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q icoSupportedExchangeCurrencyQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q icoSupportedExchangeCurrencyQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ico_supported_exchange_currency exists")
	}

	return count > 0, nil
}

// Ico pointed to by the foreign key.
func (o *IcoSupportedExchangeCurrency) Ico(mods ...qm.QueryMod) icoQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.IcoID),
	}

	queryMods = append(queryMods, mods...)

	query := Icos(queryMods...)
	queries.SetFrom(query.Query, "\"ico\"")

	return query
}

// ExchangeCurrency pointed to by the foreign key.
func (o *IcoSupportedExchangeCurrency) ExchangeCurrency(mods ...qm.QueryMod) exchangeCurrencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ExchangeCurrencyID),
	}

	queryMods = append(queryMods, mods...)

	query := ExchangeCurrencies(queryMods...)
	queries.SetFrom(query.Query, "\"exchange_currency\"")

	return query
}

// LoadIco allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (icoSupportedExchangeCurrencyL) LoadIco(e boil.Executor, singular bool, maybeIcoSupportedExchangeCurrency interface{}, mods queries.Applicator) error {
	var slice []*IcoSupportedExchangeCurrency
	var object *IcoSupportedExchangeCurrency

	if singular {
		object = maybeIcoSupportedExchangeCurrency.(*IcoSupportedExchangeCurrency)
	} else {
		slice = *maybeIcoSupportedExchangeCurrency.(*[]*IcoSupportedExchangeCurrency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &icoSupportedExchangeCurrencyR{}
		}
		args = append(args, object.IcoID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &icoSupportedExchangeCurrencyR{}
			}

			for _, a := range args {
				if a == obj.IcoID {
					continue Outer
				}
			}

			args = append(args, obj.IcoID)

		}
	}

	query := NewQuery(qm.From(`ico`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Ico")
	}

	var resultSlice []*Ico
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Ico")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ico")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ico")
	}

	if len(icoSupportedExchangeCurrencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Ico = foreign
		if foreign.R == nil {
			foreign.R = &icoR{}
		}
		foreign.R.IcoSupportedExchangeCurrencies = append(foreign.R.IcoSupportedExchangeCurrencies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IcoID == foreign.ID {
				local.R.Ico = foreign
				if foreign.R == nil {
					foreign.R = &icoR{}
				}
				foreign.R.IcoSupportedExchangeCurrencies = append(foreign.R.IcoSupportedExchangeCurrencies, local)
				break
			}
		}
	}

	return nil
}

// LoadExchangeCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (icoSupportedExchangeCurrencyL) LoadExchangeCurrency(e boil.Executor, singular bool, maybeIcoSupportedExchangeCurrency interface{}, mods queries.Applicator) error {
	var slice []*IcoSupportedExchangeCurrency
	var object *IcoSupportedExchangeCurrency

	if singular {
		object = maybeIcoSupportedExchangeCurrency.(*IcoSupportedExchangeCurrency)
	} else {
		slice = *maybeIcoSupportedExchangeCurrency.(*[]*IcoSupportedExchangeCurrency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &icoSupportedExchangeCurrencyR{}
		}
		args = append(args, object.ExchangeCurrencyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &icoSupportedExchangeCurrencyR{}
			}

			for _, a := range args {
				if a == obj.ExchangeCurrencyID {
					continue Outer
				}
			}

			args = append(args, obj.ExchangeCurrencyID)

		}
	}

	query := NewQuery(qm.From(`exchange_currency`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ExchangeCurrency")
	}

	var resultSlice []*ExchangeCurrency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ExchangeCurrency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for exchange_currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exchange_currency")
	}

	if len(icoSupportedExchangeCurrencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ExchangeCurrency = foreign
		if foreign.R == nil {
			foreign.R = &exchangeCurrencyR{}
		}
		foreign.R.IcoSupportedExchangeCurrencies = append(foreign.R.IcoSupportedExchangeCurrencies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExchangeCurrencyID == foreign.ID {
				local.R.ExchangeCurrency = foreign
				if foreign.R == nil {
					foreign.R = &exchangeCurrencyR{}
				}
				foreign.R.IcoSupportedExchangeCurrencies = append(foreign.R.IcoSupportedExchangeCurrencies, local)
				break
			}
		}
	}

	return nil
}

// SetIcoG of the icoSupportedExchangeCurrency to the related item.
// Sets o.R.Ico to related.
// Adds o to related.R.IcoSupportedExchangeCurrencies.
// Uses the global database handle.
func (o *IcoSupportedExchangeCurrency) SetIcoG(insert bool, related *Ico) error {
	return o.SetIco(boil.GetDB(), insert, related)
}

// SetIco of the icoSupportedExchangeCurrency to the related item.
// Sets o.R.Ico to related.
// Adds o to related.R.IcoSupportedExchangeCurrencies.
func (o *IcoSupportedExchangeCurrency) SetIco(exec boil.Executor, insert bool, related *Ico) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ico_supported_exchange_currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ico_id"}),
		strmangle.WhereClause("\"", "\"", 2, icoSupportedExchangeCurrencyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IcoID = related.ID
	if o.R == nil {
		o.R = &icoSupportedExchangeCurrencyR{
			Ico: related,
		}
	} else {
		o.R.Ico = related
	}

	if related.R == nil {
		related.R = &icoR{
			IcoSupportedExchangeCurrencies: IcoSupportedExchangeCurrencySlice{o},
		}
	} else {
		related.R.IcoSupportedExchangeCurrencies = append(related.R.IcoSupportedExchangeCurrencies, o)
	}

	return nil
}

// SetExchangeCurrencyG of the icoSupportedExchangeCurrency to the related item.
// Sets o.R.ExchangeCurrency to related.
// Adds o to related.R.IcoSupportedExchangeCurrencies.
// Uses the global database handle.
func (o *IcoSupportedExchangeCurrency) SetExchangeCurrencyG(insert bool, related *ExchangeCurrency) error {
	return o.SetExchangeCurrency(boil.GetDB(), insert, related)
}

// SetExchangeCurrency of the icoSupportedExchangeCurrency to the related item.
// Sets o.R.ExchangeCurrency to related.
// Adds o to related.R.IcoSupportedExchangeCurrencies.
func (o *IcoSupportedExchangeCurrency) SetExchangeCurrency(exec boil.Executor, insert bool, related *ExchangeCurrency) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ico_supported_exchange_currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"exchange_currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, icoSupportedExchangeCurrencyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExchangeCurrencyID = related.ID
	if o.R == nil {
		o.R = &icoSupportedExchangeCurrencyR{
			ExchangeCurrency: related,
		}
	} else {
		o.R.ExchangeCurrency = related
	}

	if related.R == nil {
		related.R = &exchangeCurrencyR{
			IcoSupportedExchangeCurrencies: IcoSupportedExchangeCurrencySlice{o},
		}
	} else {
		related.R.IcoSupportedExchangeCurrencies = append(related.R.IcoSupportedExchangeCurrencies, o)
	}

	return nil
}

// IcoSupportedExchangeCurrencies retrieves all the records using an executor.
func IcoSupportedExchangeCurrencies(mods ...qm.QueryMod) icoSupportedExchangeCurrencyQuery {
	mods = append(mods, qm.From("\"ico_supported_exchange_currency\""))
	return icoSupportedExchangeCurrencyQuery{NewQuery(mods...)}
}

// FindIcoSupportedExchangeCurrencyG retrieves a single record by ID.
func FindIcoSupportedExchangeCurrencyG(iD int, selectCols ...string) (*IcoSupportedExchangeCurrency, error) {
	return FindIcoSupportedExchangeCurrency(boil.GetDB(), iD, selectCols...)
}

// FindIcoSupportedExchangeCurrency retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIcoSupportedExchangeCurrency(exec boil.Executor, iD int, selectCols ...string) (*IcoSupportedExchangeCurrency, error) {
	icoSupportedExchangeCurrencyObj := &IcoSupportedExchangeCurrency{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ico_supported_exchange_currency\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, icoSupportedExchangeCurrencyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ico_supported_exchange_currency")
	}

	return icoSupportedExchangeCurrencyObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *IcoSupportedExchangeCurrency) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IcoSupportedExchangeCurrency) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ico_supported_exchange_currency provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(icoSupportedExchangeCurrencyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	icoSupportedExchangeCurrencyInsertCacheMut.RLock()
	cache, cached := icoSupportedExchangeCurrencyInsertCache[key]
	icoSupportedExchangeCurrencyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			icoSupportedExchangeCurrencyColumns,
			icoSupportedExchangeCurrencyColumnsWithDefault,
			icoSupportedExchangeCurrencyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(icoSupportedExchangeCurrencyType, icoSupportedExchangeCurrencyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(icoSupportedExchangeCurrencyType, icoSupportedExchangeCurrencyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ico_supported_exchange_currency\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ico_supported_exchange_currency\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ico_supported_exchange_currency")
	}

	if !cached {
		icoSupportedExchangeCurrencyInsertCacheMut.Lock()
		icoSupportedExchangeCurrencyInsertCache[key] = cache
		icoSupportedExchangeCurrencyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single IcoSupportedExchangeCurrency record using the global executor.
// See Update for more documentation.
func (o *IcoSupportedExchangeCurrency) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the IcoSupportedExchangeCurrency.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IcoSupportedExchangeCurrency) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	icoSupportedExchangeCurrencyUpdateCacheMut.RLock()
	cache, cached := icoSupportedExchangeCurrencyUpdateCache[key]
	icoSupportedExchangeCurrencyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			icoSupportedExchangeCurrencyColumns,
			icoSupportedExchangeCurrencyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ico_supported_exchange_currency, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ico_supported_exchange_currency\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, icoSupportedExchangeCurrencyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(icoSupportedExchangeCurrencyType, icoSupportedExchangeCurrencyMapping, append(wl, icoSupportedExchangeCurrencyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ico_supported_exchange_currency row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ico_supported_exchange_currency")
	}

	if !cached {
		icoSupportedExchangeCurrencyUpdateCacheMut.Lock()
		icoSupportedExchangeCurrencyUpdateCache[key] = cache
		icoSupportedExchangeCurrencyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q icoSupportedExchangeCurrencyQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q icoSupportedExchangeCurrencyQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ico_supported_exchange_currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ico_supported_exchange_currency")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o IcoSupportedExchangeCurrencySlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IcoSupportedExchangeCurrencySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icoSupportedExchangeCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ico_supported_exchange_currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, icoSupportedExchangeCurrencyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in icoSupportedExchangeCurrency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all icoSupportedExchangeCurrency")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *IcoSupportedExchangeCurrency) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IcoSupportedExchangeCurrency) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ico_supported_exchange_currency provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(icoSupportedExchangeCurrencyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	icoSupportedExchangeCurrencyUpsertCacheMut.RLock()
	cache, cached := icoSupportedExchangeCurrencyUpsertCache[key]
	icoSupportedExchangeCurrencyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			icoSupportedExchangeCurrencyColumns,
			icoSupportedExchangeCurrencyColumnsWithDefault,
			icoSupportedExchangeCurrencyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			icoSupportedExchangeCurrencyColumns,
			icoSupportedExchangeCurrencyPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert ico_supported_exchange_currency, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(icoSupportedExchangeCurrencyPrimaryKeyColumns))
			copy(conflict, icoSupportedExchangeCurrencyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ico_supported_exchange_currency\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(icoSupportedExchangeCurrencyType, icoSupportedExchangeCurrencyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(icoSupportedExchangeCurrencyType, icoSupportedExchangeCurrencyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ico_supported_exchange_currency")
	}

	if !cached {
		icoSupportedExchangeCurrencyUpsertCacheMut.Lock()
		icoSupportedExchangeCurrencyUpsertCache[key] = cache
		icoSupportedExchangeCurrencyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single IcoSupportedExchangeCurrency record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *IcoSupportedExchangeCurrency) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single IcoSupportedExchangeCurrency record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IcoSupportedExchangeCurrency) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IcoSupportedExchangeCurrency provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), icoSupportedExchangeCurrencyPrimaryKeyMapping)
	sql := "DELETE FROM \"ico_supported_exchange_currency\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ico_supported_exchange_currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ico_supported_exchange_currency")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q icoSupportedExchangeCurrencyQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no icoSupportedExchangeCurrencyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ico_supported_exchange_currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ico_supported_exchange_currency")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o IcoSupportedExchangeCurrencySlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IcoSupportedExchangeCurrencySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IcoSupportedExchangeCurrency slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(icoSupportedExchangeCurrencyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icoSupportedExchangeCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ico_supported_exchange_currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, icoSupportedExchangeCurrencyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from icoSupportedExchangeCurrency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ico_supported_exchange_currency")
	}

	if len(icoSupportedExchangeCurrencyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *IcoSupportedExchangeCurrency) ReloadG() error {
	if o == nil {
		return errors.New("models: no IcoSupportedExchangeCurrency provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IcoSupportedExchangeCurrency) Reload(exec boil.Executor) error {
	ret, err := FindIcoSupportedExchangeCurrency(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IcoSupportedExchangeCurrencySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty IcoSupportedExchangeCurrencySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IcoSupportedExchangeCurrencySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IcoSupportedExchangeCurrencySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icoSupportedExchangeCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ico_supported_exchange_currency\".* FROM \"ico_supported_exchange_currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, icoSupportedExchangeCurrencyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IcoSupportedExchangeCurrencySlice")
	}

	*o = slice

	return nil
}

// IcoSupportedExchangeCurrencyExistsG checks if the IcoSupportedExchangeCurrency row exists.
func IcoSupportedExchangeCurrencyExistsG(iD int) (bool, error) {
	return IcoSupportedExchangeCurrencyExists(boil.GetDB(), iD)
}

// IcoSupportedExchangeCurrencyExists checks if the IcoSupportedExchangeCurrency row exists.
func IcoSupportedExchangeCurrencyExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ico_supported_exchange_currency\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ico_supported_exchange_currency exists")
	}

	return exists, nil
}
