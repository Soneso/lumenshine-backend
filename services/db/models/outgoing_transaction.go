// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OutgoingTransaction is an object representing the database table.
type OutgoingTransaction struct {
	ID                               int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IncomingTransactionID            null.Int  `boil:"incoming_transaction_id" json:"incoming_transaction_id,omitempty" toml:"incoming_transaction_id" yaml:"incoming_transaction_id,omitempty"`
	OrderID                          int       `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	Status                           string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	ExecuteStatus                    bool      `boil:"execute_status" json:"execute_status" toml:"execute_status" yaml:"execute_status"`
	PaymentNetwork                   string    `boil:"payment_network" json:"payment_network" toml:"payment_network" yaml:"payment_network"`
	SenderAddress                    string    `boil:"sender_address" json:"sender_address" toml:"sender_address" yaml:"sender_address"`
	ReceivingAddress                 string    `boil:"receiving_address" json:"receiving_address" toml:"receiving_address" yaml:"receiving_address"`
	TransactionString                string    `boil:"transaction_string" json:"transaction_string" toml:"transaction_string" yaml:"transaction_string"`
	TransactionHash                  string    `boil:"transaction_hash" json:"transaction_hash" toml:"transaction_hash" yaml:"transaction_hash"`
	TransactionError                 string    `boil:"transaction_error" json:"transaction_error" toml:"transaction_error" yaml:"transaction_error"`
	PaymentNetworkAmountDenomination string    `boil:"payment_network_amount_denomination" json:"payment_network_amount_denomination" toml:"payment_network_amount_denomination" yaml:"payment_network_amount_denomination"`
	CreatedAt                        time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                        time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *outgoingTransactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L outgoingTransactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OutgoingTransactionColumns = struct {
	ID                               string
	IncomingTransactionID            string
	OrderID                          string
	Status                           string
	ExecuteStatus                    string
	PaymentNetwork                   string
	SenderAddress                    string
	ReceivingAddress                 string
	TransactionString                string
	TransactionHash                  string
	TransactionError                 string
	PaymentNetworkAmountDenomination string
	CreatedAt                        string
	UpdatedAt                        string
}{
	ID:                               "id",
	IncomingTransactionID:            "incoming_transaction_id",
	OrderID:                          "order_id",
	Status:                           "status",
	ExecuteStatus:                    "execute_status",
	PaymentNetwork:                   "payment_network",
	SenderAddress:                    "sender_address",
	ReceivingAddress:                 "receiving_address",
	TransactionString:                "transaction_string",
	TransactionHash:                  "transaction_hash",
	TransactionError:                 "transaction_error",
	PaymentNetworkAmountDenomination: "payment_network_amount_denomination",
	CreatedAt:                        "created_at",
	UpdatedAt:                        "updated_at",
}

// OutgoingTransactionRels is where relationship names are stored.
var OutgoingTransactionRels = struct {
	IncomingTransaction string
	Order               string
}{
	IncomingTransaction: "IncomingTransaction",
	Order:               "Order",
}

// outgoingTransactionR is where relationships are stored.
type outgoingTransactionR struct {
	IncomingTransaction *IncomingTransaction
	Order               *UserOrder
}

// NewStruct creates a new relationship struct
func (*outgoingTransactionR) NewStruct() *outgoingTransactionR {
	return &outgoingTransactionR{}
}

// outgoingTransactionL is where Load methods for each relationship are stored.
type outgoingTransactionL struct{}

var (
	outgoingTransactionColumns               = []string{"id", "incoming_transaction_id", "order_id", "status", "execute_status", "payment_network", "sender_address", "receiving_address", "transaction_string", "transaction_hash", "transaction_error", "payment_network_amount_denomination", "created_at", "updated_at"}
	outgoingTransactionColumnsWithoutDefault = []string{"incoming_transaction_id", "order_id", "status", "execute_status", "payment_network", "sender_address", "receiving_address", "payment_network_amount_denomination"}
	outgoingTransactionColumnsWithDefault    = []string{"id", "transaction_string", "transaction_hash", "transaction_error", "created_at", "updated_at"}
	outgoingTransactionPrimaryKeyColumns     = []string{"id"}
)

type (
	// OutgoingTransactionSlice is an alias for a slice of pointers to OutgoingTransaction.
	// This should generally be used opposed to []OutgoingTransaction.
	OutgoingTransactionSlice []*OutgoingTransaction
	// OutgoingTransactionHook is the signature for custom OutgoingTransaction hook methods
	OutgoingTransactionHook func(boil.Executor, *OutgoingTransaction) error

	outgoingTransactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	outgoingTransactionType                 = reflect.TypeOf(&OutgoingTransaction{})
	outgoingTransactionMapping              = queries.MakeStructMapping(outgoingTransactionType)
	outgoingTransactionPrimaryKeyMapping, _ = queries.BindMapping(outgoingTransactionType, outgoingTransactionMapping, outgoingTransactionPrimaryKeyColumns)
	outgoingTransactionInsertCacheMut       sync.RWMutex
	outgoingTransactionInsertCache          = make(map[string]insertCache)
	outgoingTransactionUpdateCacheMut       sync.RWMutex
	outgoingTransactionUpdateCache          = make(map[string]updateCache)
	outgoingTransactionUpsertCacheMut       sync.RWMutex
	outgoingTransactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var outgoingTransactionBeforeInsertHooks []OutgoingTransactionHook
var outgoingTransactionBeforeUpdateHooks []OutgoingTransactionHook
var outgoingTransactionBeforeDeleteHooks []OutgoingTransactionHook
var outgoingTransactionBeforeUpsertHooks []OutgoingTransactionHook

var outgoingTransactionAfterInsertHooks []OutgoingTransactionHook
var outgoingTransactionAfterSelectHooks []OutgoingTransactionHook
var outgoingTransactionAfterUpdateHooks []OutgoingTransactionHook
var outgoingTransactionAfterDeleteHooks []OutgoingTransactionHook
var outgoingTransactionAfterUpsertHooks []OutgoingTransactionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OutgoingTransaction) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range outgoingTransactionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OutgoingTransaction) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range outgoingTransactionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OutgoingTransaction) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range outgoingTransactionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OutgoingTransaction) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range outgoingTransactionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OutgoingTransaction) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range outgoingTransactionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OutgoingTransaction) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range outgoingTransactionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OutgoingTransaction) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range outgoingTransactionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OutgoingTransaction) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range outgoingTransactionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OutgoingTransaction) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range outgoingTransactionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOutgoingTransactionHook registers your hook function for all future operations.
func AddOutgoingTransactionHook(hookPoint boil.HookPoint, outgoingTransactionHook OutgoingTransactionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		outgoingTransactionBeforeInsertHooks = append(outgoingTransactionBeforeInsertHooks, outgoingTransactionHook)
	case boil.BeforeUpdateHook:
		outgoingTransactionBeforeUpdateHooks = append(outgoingTransactionBeforeUpdateHooks, outgoingTransactionHook)
	case boil.BeforeDeleteHook:
		outgoingTransactionBeforeDeleteHooks = append(outgoingTransactionBeforeDeleteHooks, outgoingTransactionHook)
	case boil.BeforeUpsertHook:
		outgoingTransactionBeforeUpsertHooks = append(outgoingTransactionBeforeUpsertHooks, outgoingTransactionHook)
	case boil.AfterInsertHook:
		outgoingTransactionAfterInsertHooks = append(outgoingTransactionAfterInsertHooks, outgoingTransactionHook)
	case boil.AfterSelectHook:
		outgoingTransactionAfterSelectHooks = append(outgoingTransactionAfterSelectHooks, outgoingTransactionHook)
	case boil.AfterUpdateHook:
		outgoingTransactionAfterUpdateHooks = append(outgoingTransactionAfterUpdateHooks, outgoingTransactionHook)
	case boil.AfterDeleteHook:
		outgoingTransactionAfterDeleteHooks = append(outgoingTransactionAfterDeleteHooks, outgoingTransactionHook)
	case boil.AfterUpsertHook:
		outgoingTransactionAfterUpsertHooks = append(outgoingTransactionAfterUpsertHooks, outgoingTransactionHook)
	}
}

// OneG returns a single outgoingTransaction record from the query using the global executor.
func (q outgoingTransactionQuery) OneG() (*OutgoingTransaction, error) {
	return q.One(boil.GetDB())
}

// One returns a single outgoingTransaction record from the query.
func (q outgoingTransactionQuery) One(exec boil.Executor) (*OutgoingTransaction, error) {
	o := &OutgoingTransaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for outgoing_transaction")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all OutgoingTransaction records from the query using the global executor.
func (q outgoingTransactionQuery) AllG() (OutgoingTransactionSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all OutgoingTransaction records from the query.
func (q outgoingTransactionQuery) All(exec boil.Executor) (OutgoingTransactionSlice, error) {
	var o []*OutgoingTransaction

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OutgoingTransaction slice")
	}

	if len(outgoingTransactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all OutgoingTransaction records in the query, and panics on error.
func (q outgoingTransactionQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all OutgoingTransaction records in the query.
func (q outgoingTransactionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count outgoing_transaction rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q outgoingTransactionQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q outgoingTransactionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if outgoing_transaction exists")
	}

	return count > 0, nil
}

// IncomingTransaction pointed to by the foreign key.
func (o *OutgoingTransaction) IncomingTransaction(mods ...qm.QueryMod) incomingTransactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.IncomingTransactionID),
	}

	queryMods = append(queryMods, mods...)

	query := IncomingTransactions(queryMods...)
	queries.SetFrom(query.Query, "\"incoming_transaction\"")

	return query
}

// Order pointed to by the foreign key.
func (o *OutgoingTransaction) Order(mods ...qm.QueryMod) userOrderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	query := UserOrders(queryMods...)
	queries.SetFrom(query.Query, "\"user_order\"")

	return query
}

// LoadIncomingTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (outgoingTransactionL) LoadIncomingTransaction(e boil.Executor, singular bool, maybeOutgoingTransaction interface{}, mods queries.Applicator) error {
	var slice []*OutgoingTransaction
	var object *OutgoingTransaction

	if singular {
		object = maybeOutgoingTransaction.(*OutgoingTransaction)
	} else {
		slice = *maybeOutgoingTransaction.(*[]*OutgoingTransaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &outgoingTransactionR{}
		}
		if !queries.IsNil(object.IncomingTransactionID) {
			args = append(args, object.IncomingTransactionID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &outgoingTransactionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.IncomingTransactionID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.IncomingTransactionID) {
				args = append(args, obj.IncomingTransactionID)
			}

		}
	}

	query := NewQuery(qm.From(`incoming_transaction`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load IncomingTransaction")
	}

	var resultSlice []*IncomingTransaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice IncomingTransaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for incoming_transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for incoming_transaction")
	}

	if len(outgoingTransactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IncomingTransaction = foreign
		if foreign.R == nil {
			foreign.R = &incomingTransactionR{}
		}
		foreign.R.OutgoingTransactions = append(foreign.R.OutgoingTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IncomingTransactionID, foreign.ID) {
				local.R.IncomingTransaction = foreign
				if foreign.R == nil {
					foreign.R = &incomingTransactionR{}
				}
				foreign.R.OutgoingTransactions = append(foreign.R.OutgoingTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (outgoingTransactionL) LoadOrder(e boil.Executor, singular bool, maybeOutgoingTransaction interface{}, mods queries.Applicator) error {
	var slice []*OutgoingTransaction
	var object *OutgoingTransaction

	if singular {
		object = maybeOutgoingTransaction.(*OutgoingTransaction)
	} else {
		slice = *maybeOutgoingTransaction.(*[]*OutgoingTransaction)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &outgoingTransactionR{}
		}
		args = append(args, object.OrderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &outgoingTransactionR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)

		}
	}

	query := NewQuery(qm.From(`user_order`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserOrder")
	}

	var resultSlice []*UserOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserOrder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_order")
	}

	if len(outgoingTransactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &userOrderR{}
		}
		foreign.R.OrderOutgoingTransactions = append(foreign.R.OrderOutgoingTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.ID {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &userOrderR{}
				}
				foreign.R.OrderOutgoingTransactions = append(foreign.R.OrderOutgoingTransactions, local)
				break
			}
		}
	}

	return nil
}

// SetIncomingTransactionG of the outgoingTransaction to the related item.
// Sets o.R.IncomingTransaction to related.
// Adds o to related.R.OutgoingTransactions.
// Uses the global database handle.
func (o *OutgoingTransaction) SetIncomingTransactionG(insert bool, related *IncomingTransaction) error {
	return o.SetIncomingTransaction(boil.GetDB(), insert, related)
}

// SetIncomingTransaction of the outgoingTransaction to the related item.
// Sets o.R.IncomingTransaction to related.
// Adds o to related.R.OutgoingTransactions.
func (o *OutgoingTransaction) SetIncomingTransaction(exec boil.Executor, insert bool, related *IncomingTransaction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"outgoing_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"incoming_transaction_id"}),
		strmangle.WhereClause("\"", "\"", 2, outgoingTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IncomingTransactionID, related.ID)
	if o.R == nil {
		o.R = &outgoingTransactionR{
			IncomingTransaction: related,
		}
	} else {
		o.R.IncomingTransaction = related
	}

	if related.R == nil {
		related.R = &incomingTransactionR{
			OutgoingTransactions: OutgoingTransactionSlice{o},
		}
	} else {
		related.R.OutgoingTransactions = append(related.R.OutgoingTransactions, o)
	}

	return nil
}

// RemoveIncomingTransactionG relationship.
// Sets o.R.IncomingTransaction to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *OutgoingTransaction) RemoveIncomingTransactionG(related *IncomingTransaction) error {
	return o.RemoveIncomingTransaction(boil.GetDB(), related)
}

// RemoveIncomingTransaction relationship.
// Sets o.R.IncomingTransaction to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *OutgoingTransaction) RemoveIncomingTransaction(exec boil.Executor, related *IncomingTransaction) error {
	var err error

	queries.SetScanner(&o.IncomingTransactionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("incoming_transaction_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.IncomingTransaction = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OutgoingTransactions {
		if queries.Equal(o.IncomingTransactionID, ri.IncomingTransactionID) {
			continue
		}

		ln := len(related.R.OutgoingTransactions)
		if ln > 1 && i < ln-1 {
			related.R.OutgoingTransactions[i] = related.R.OutgoingTransactions[ln-1]
		}
		related.R.OutgoingTransactions = related.R.OutgoingTransactions[:ln-1]
		break
	}
	return nil
}

// SetOrderG of the outgoingTransaction to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderOutgoingTransactions.
// Uses the global database handle.
func (o *OutgoingTransaction) SetOrderG(insert bool, related *UserOrder) error {
	return o.SetOrder(boil.GetDB(), insert, related)
}

// SetOrder of the outgoingTransaction to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderOutgoingTransactions.
func (o *OutgoingTransaction) SetOrder(exec boil.Executor, insert bool, related *UserOrder) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"outgoing_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, outgoingTransactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.ID
	if o.R == nil {
		o.R = &outgoingTransactionR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &userOrderR{
			OrderOutgoingTransactions: OutgoingTransactionSlice{o},
		}
	} else {
		related.R.OrderOutgoingTransactions = append(related.R.OrderOutgoingTransactions, o)
	}

	return nil
}

// OutgoingTransactions retrieves all the records using an executor.
func OutgoingTransactions(mods ...qm.QueryMod) outgoingTransactionQuery {
	mods = append(mods, qm.From("\"outgoing_transaction\""))
	return outgoingTransactionQuery{NewQuery(mods...)}
}

// FindOutgoingTransactionG retrieves a single record by ID.
func FindOutgoingTransactionG(iD int, selectCols ...string) (*OutgoingTransaction, error) {
	return FindOutgoingTransaction(boil.GetDB(), iD, selectCols...)
}

// FindOutgoingTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOutgoingTransaction(exec boil.Executor, iD int, selectCols ...string) (*OutgoingTransaction, error) {
	outgoingTransactionObj := &OutgoingTransaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"outgoing_transaction\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, outgoingTransactionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from outgoing_transaction")
	}

	return outgoingTransactionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OutgoingTransaction) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OutgoingTransaction) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no outgoing_transaction provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(outgoingTransactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	outgoingTransactionInsertCacheMut.RLock()
	cache, cached := outgoingTransactionInsertCache[key]
	outgoingTransactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			outgoingTransactionColumns,
			outgoingTransactionColumnsWithDefault,
			outgoingTransactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(outgoingTransactionType, outgoingTransactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(outgoingTransactionType, outgoingTransactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"outgoing_transaction\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"outgoing_transaction\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into outgoing_transaction")
	}

	if !cached {
		outgoingTransactionInsertCacheMut.Lock()
		outgoingTransactionInsertCache[key] = cache
		outgoingTransactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single OutgoingTransaction record using the global executor.
// See Update for more documentation.
func (o *OutgoingTransaction) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the OutgoingTransaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OutgoingTransaction) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	outgoingTransactionUpdateCacheMut.RLock()
	cache, cached := outgoingTransactionUpdateCache[key]
	outgoingTransactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			outgoingTransactionColumns,
			outgoingTransactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update outgoing_transaction, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"outgoing_transaction\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, outgoingTransactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(outgoingTransactionType, outgoingTransactionMapping, append(wl, outgoingTransactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update outgoing_transaction row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for outgoing_transaction")
	}

	if !cached {
		outgoingTransactionUpdateCacheMut.Lock()
		outgoingTransactionUpdateCache[key] = cache
		outgoingTransactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q outgoingTransactionQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q outgoingTransactionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for outgoing_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for outgoing_transaction")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OutgoingTransactionSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OutgoingTransactionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outgoingTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"outgoing_transaction\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, outgoingTransactionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in outgoingTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all outgoingTransaction")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *OutgoingTransaction) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OutgoingTransaction) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no outgoing_transaction provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(outgoingTransactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	outgoingTransactionUpsertCacheMut.RLock()
	cache, cached := outgoingTransactionUpsertCache[key]
	outgoingTransactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			outgoingTransactionColumns,
			outgoingTransactionColumnsWithDefault,
			outgoingTransactionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			outgoingTransactionColumns,
			outgoingTransactionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert outgoing_transaction, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(outgoingTransactionPrimaryKeyColumns))
			copy(conflict, outgoingTransactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"outgoing_transaction\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(outgoingTransactionType, outgoingTransactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(outgoingTransactionType, outgoingTransactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert outgoing_transaction")
	}

	if !cached {
		outgoingTransactionUpsertCacheMut.Lock()
		outgoingTransactionUpsertCache[key] = cache
		outgoingTransactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single OutgoingTransaction record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OutgoingTransaction) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single OutgoingTransaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OutgoingTransaction) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OutgoingTransaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), outgoingTransactionPrimaryKeyMapping)
	sql := "DELETE FROM \"outgoing_transaction\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from outgoing_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for outgoing_transaction")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q outgoingTransactionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no outgoingTransactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from outgoing_transaction")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for outgoing_transaction")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OutgoingTransactionSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OutgoingTransactionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OutgoingTransaction slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(outgoingTransactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outgoingTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"outgoing_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, outgoingTransactionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from outgoingTransaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for outgoing_transaction")
	}

	if len(outgoingTransactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OutgoingTransaction) ReloadG() error {
	if o == nil {
		return errors.New("models: no OutgoingTransaction provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OutgoingTransaction) Reload(exec boil.Executor) error {
	ret, err := FindOutgoingTransaction(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OutgoingTransactionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty OutgoingTransactionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OutgoingTransactionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OutgoingTransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), outgoingTransactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"outgoing_transaction\".* FROM \"outgoing_transaction\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, outgoingTransactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OutgoingTransactionSlice")
	}

	*o = slice

	return nil
}

// OutgoingTransactionExistsG checks if the OutgoingTransaction row exists.
func OutgoingTransactionExistsG(iD int) (bool, error) {
	return OutgoingTransactionExists(boil.GetDB(), iD)
}

// OutgoingTransactionExists checks if the OutgoingTransaction row exists.
func OutgoingTransactionExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"outgoing_transaction\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if outgoing_transaction exists")
	}

	return exists, nil
}
