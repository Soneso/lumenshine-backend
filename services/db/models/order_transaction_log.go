// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OrderTransactionLog is an object representing the database table.
type OrderTransactionLog struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderID    int       `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	Status     bool      `boil:"status" json:"status" toml:"status" yaml:"status"`
	TX         string    `boil:"tx" json:"tx" toml:"tx" yaml:"tx"`
	TXHash     string    `boil:"tx_hash" json:"tx_hash" toml:"tx_hash" yaml:"tx_hash"`
	ResultCode string    `boil:"result_code" json:"result_code" toml:"result_code" yaml:"result_code"`
	ResultXDR  string    `boil:"result_xdr" json:"result_xdr" toml:"result_xdr" yaml:"result_xdr"`
	ErrorText  string    `boil:"error_text" json:"error_text" toml:"error_text" yaml:"error_text"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *orderTransactionLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderTransactionLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderTransactionLogColumns = struct {
	ID         string
	OrderID    string
	Status     string
	TX         string
	TXHash     string
	ResultCode string
	ResultXDR  string
	ErrorText  string
	CreatedAt  string
}{
	ID:         "id",
	OrderID:    "order_id",
	Status:     "status",
	TX:         "tx",
	TXHash:     "tx_hash",
	ResultCode: "result_code",
	ResultXDR:  "result_xdr",
	ErrorText:  "error_text",
	CreatedAt:  "created_at",
}

// OrderTransactionLogRels is where relationship names are stored.
var OrderTransactionLogRels = struct {
	Order string
}{
	Order: "Order",
}

// orderTransactionLogR is where relationships are stored.
type orderTransactionLogR struct {
	Order *UserOrder
}

// NewStruct creates a new relationship struct
func (*orderTransactionLogR) NewStruct() *orderTransactionLogR {
	return &orderTransactionLogR{}
}

// orderTransactionLogL is where Load methods for each relationship are stored.
type orderTransactionLogL struct{}

var (
	orderTransactionLogColumns               = []string{"id", "order_id", "status", "tx", "tx_hash", "result_code", "result_xdr", "error_text", "created_at"}
	orderTransactionLogColumnsWithoutDefault = []string{"order_id", "status"}
	orderTransactionLogColumnsWithDefault    = []string{"id", "tx", "tx_hash", "result_code", "result_xdr", "error_text", "created_at"}
	orderTransactionLogPrimaryKeyColumns     = []string{"id"}
)

type (
	// OrderTransactionLogSlice is an alias for a slice of pointers to OrderTransactionLog.
	// This should generally be used opposed to []OrderTransactionLog.
	OrderTransactionLogSlice []*OrderTransactionLog
	// OrderTransactionLogHook is the signature for custom OrderTransactionLog hook methods
	OrderTransactionLogHook func(boil.Executor, *OrderTransactionLog) error

	orderTransactionLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderTransactionLogType                 = reflect.TypeOf(&OrderTransactionLog{})
	orderTransactionLogMapping              = queries.MakeStructMapping(orderTransactionLogType)
	orderTransactionLogPrimaryKeyMapping, _ = queries.BindMapping(orderTransactionLogType, orderTransactionLogMapping, orderTransactionLogPrimaryKeyColumns)
	orderTransactionLogInsertCacheMut       sync.RWMutex
	orderTransactionLogInsertCache          = make(map[string]insertCache)
	orderTransactionLogUpdateCacheMut       sync.RWMutex
	orderTransactionLogUpdateCache          = make(map[string]updateCache)
	orderTransactionLogUpsertCacheMut       sync.RWMutex
	orderTransactionLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var orderTransactionLogBeforeInsertHooks []OrderTransactionLogHook
var orderTransactionLogBeforeUpdateHooks []OrderTransactionLogHook
var orderTransactionLogBeforeDeleteHooks []OrderTransactionLogHook
var orderTransactionLogBeforeUpsertHooks []OrderTransactionLogHook

var orderTransactionLogAfterInsertHooks []OrderTransactionLogHook
var orderTransactionLogAfterSelectHooks []OrderTransactionLogHook
var orderTransactionLogAfterUpdateHooks []OrderTransactionLogHook
var orderTransactionLogAfterDeleteHooks []OrderTransactionLogHook
var orderTransactionLogAfterUpsertHooks []OrderTransactionLogHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderTransactionLog) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range orderTransactionLogBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderTransactionLog) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range orderTransactionLogBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderTransactionLog) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range orderTransactionLogBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderTransactionLog) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range orderTransactionLogBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderTransactionLog) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range orderTransactionLogAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderTransactionLog) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range orderTransactionLogAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderTransactionLog) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range orderTransactionLogAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderTransactionLog) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range orderTransactionLogAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderTransactionLog) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range orderTransactionLogAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderTransactionLogHook registers your hook function for all future operations.
func AddOrderTransactionLogHook(hookPoint boil.HookPoint, orderTransactionLogHook OrderTransactionLogHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		orderTransactionLogBeforeInsertHooks = append(orderTransactionLogBeforeInsertHooks, orderTransactionLogHook)
	case boil.BeforeUpdateHook:
		orderTransactionLogBeforeUpdateHooks = append(orderTransactionLogBeforeUpdateHooks, orderTransactionLogHook)
	case boil.BeforeDeleteHook:
		orderTransactionLogBeforeDeleteHooks = append(orderTransactionLogBeforeDeleteHooks, orderTransactionLogHook)
	case boil.BeforeUpsertHook:
		orderTransactionLogBeforeUpsertHooks = append(orderTransactionLogBeforeUpsertHooks, orderTransactionLogHook)
	case boil.AfterInsertHook:
		orderTransactionLogAfterInsertHooks = append(orderTransactionLogAfterInsertHooks, orderTransactionLogHook)
	case boil.AfterSelectHook:
		orderTransactionLogAfterSelectHooks = append(orderTransactionLogAfterSelectHooks, orderTransactionLogHook)
	case boil.AfterUpdateHook:
		orderTransactionLogAfterUpdateHooks = append(orderTransactionLogAfterUpdateHooks, orderTransactionLogHook)
	case boil.AfterDeleteHook:
		orderTransactionLogAfterDeleteHooks = append(orderTransactionLogAfterDeleteHooks, orderTransactionLogHook)
	case boil.AfterUpsertHook:
		orderTransactionLogAfterUpsertHooks = append(orderTransactionLogAfterUpsertHooks, orderTransactionLogHook)
	}
}

// OneG returns a single orderTransactionLog record from the query using the global executor.
func (q orderTransactionLogQuery) OneG() (*OrderTransactionLog, error) {
	return q.One(boil.GetDB())
}

// One returns a single orderTransactionLog record from the query.
func (q orderTransactionLogQuery) One(exec boil.Executor) (*OrderTransactionLog, error) {
	o := &OrderTransactionLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for order_transaction_log")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all OrderTransactionLog records from the query using the global executor.
func (q orderTransactionLogQuery) AllG() (OrderTransactionLogSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all OrderTransactionLog records from the query.
func (q orderTransactionLogQuery) All(exec boil.Executor) (OrderTransactionLogSlice, error) {
	var o []*OrderTransactionLog

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrderTransactionLog slice")
	}

	if len(orderTransactionLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all OrderTransactionLog records in the query, and panics on error.
func (q orderTransactionLogQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all OrderTransactionLog records in the query.
func (q orderTransactionLogQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count order_transaction_log rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q orderTransactionLogQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q orderTransactionLogQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if order_transaction_log exists")
	}

	return count > 0, nil
}

// Order pointed to by the foreign key.
func (o *OrderTransactionLog) Order(mods ...qm.QueryMod) userOrderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	query := UserOrders(queryMods...)
	queries.SetFrom(query.Query, "\"user_order\"")

	return query
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderTransactionLogL) LoadOrder(e boil.Executor, singular bool, maybeOrderTransactionLog interface{}, mods queries.Applicator) error {
	var slice []*OrderTransactionLog
	var object *OrderTransactionLog

	if singular {
		object = maybeOrderTransactionLog.(*OrderTransactionLog)
	} else {
		slice = *maybeOrderTransactionLog.(*[]*OrderTransactionLog)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderTransactionLogR{}
		}
		args = append(args, object.OrderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderTransactionLogR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)

		}
	}

	query := NewQuery(qm.From(`user_order`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserOrder")
	}

	var resultSlice []*UserOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserOrder")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_order")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_order")
	}

	if len(orderTransactionLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &userOrderR{}
		}
		foreign.R.OrderOrderTransactionLogs = append(foreign.R.OrderOrderTransactionLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.ID {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &userOrderR{}
				}
				foreign.R.OrderOrderTransactionLogs = append(foreign.R.OrderOrderTransactionLogs, local)
				break
			}
		}
	}

	return nil
}

// SetOrderG of the orderTransactionLog to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderOrderTransactionLogs.
// Uses the global database handle.
func (o *OrderTransactionLog) SetOrderG(insert bool, related *UserOrder) error {
	return o.SetOrder(boil.GetDB(), insert, related)
}

// SetOrder of the orderTransactionLog to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderOrderTransactionLogs.
func (o *OrderTransactionLog) SetOrder(exec boil.Executor, insert bool, related *UserOrder) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_transaction_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderTransactionLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.ID
	if o.R == nil {
		o.R = &orderTransactionLogR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &userOrderR{
			OrderOrderTransactionLogs: OrderTransactionLogSlice{o},
		}
	} else {
		related.R.OrderOrderTransactionLogs = append(related.R.OrderOrderTransactionLogs, o)
	}

	return nil
}

// OrderTransactionLogs retrieves all the records using an executor.
func OrderTransactionLogs(mods ...qm.QueryMod) orderTransactionLogQuery {
	mods = append(mods, qm.From("\"order_transaction_log\""))
	return orderTransactionLogQuery{NewQuery(mods...)}
}

// FindOrderTransactionLogG retrieves a single record by ID.
func FindOrderTransactionLogG(iD int, selectCols ...string) (*OrderTransactionLog, error) {
	return FindOrderTransactionLog(boil.GetDB(), iD, selectCols...)
}

// FindOrderTransactionLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderTransactionLog(exec boil.Executor, iD int, selectCols ...string) (*OrderTransactionLog, error) {
	orderTransactionLogObj := &OrderTransactionLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_transaction_log\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, orderTransactionLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from order_transaction_log")
	}

	return orderTransactionLogObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *OrderTransactionLog) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderTransactionLog) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no order_transaction_log provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderTransactionLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderTransactionLogInsertCacheMut.RLock()
	cache, cached := orderTransactionLogInsertCache[key]
	orderTransactionLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderTransactionLogColumns,
			orderTransactionLogColumnsWithDefault,
			orderTransactionLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderTransactionLogType, orderTransactionLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderTransactionLogType, orderTransactionLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_transaction_log\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_transaction_log\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into order_transaction_log")
	}

	if !cached {
		orderTransactionLogInsertCacheMut.Lock()
		orderTransactionLogInsertCache[key] = cache
		orderTransactionLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single OrderTransactionLog record using the global executor.
// See Update for more documentation.
func (o *OrderTransactionLog) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the OrderTransactionLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderTransactionLog) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderTransactionLogUpdateCacheMut.RLock()
	cache, cached := orderTransactionLogUpdateCache[key]
	orderTransactionLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderTransactionLogColumns,
			orderTransactionLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update order_transaction_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_transaction_log\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderTransactionLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderTransactionLogType, orderTransactionLogMapping, append(wl, orderTransactionLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update order_transaction_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for order_transaction_log")
	}

	if !cached {
		orderTransactionLogUpdateCacheMut.Lock()
		orderTransactionLogUpdateCache[key] = cache
		orderTransactionLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q orderTransactionLogQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q orderTransactionLogQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for order_transaction_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for order_transaction_log")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o OrderTransactionLogSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderTransactionLogSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderTransactionLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_transaction_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderTransactionLogPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in orderTransactionLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all orderTransactionLog")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *OrderTransactionLog) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderTransactionLog) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no order_transaction_log provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderTransactionLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderTransactionLogUpsertCacheMut.RLock()
	cache, cached := orderTransactionLogUpsertCache[key]
	orderTransactionLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderTransactionLogColumns,
			orderTransactionLogColumnsWithDefault,
			orderTransactionLogColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			orderTransactionLogColumns,
			orderTransactionLogPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert order_transaction_log, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orderTransactionLogPrimaryKeyColumns))
			copy(conflict, orderTransactionLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"order_transaction_log\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orderTransactionLogType, orderTransactionLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderTransactionLogType, orderTransactionLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert order_transaction_log")
	}

	if !cached {
		orderTransactionLogUpsertCacheMut.Lock()
		orderTransactionLogUpsertCache[key] = cache
		orderTransactionLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single OrderTransactionLog record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *OrderTransactionLog) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single OrderTransactionLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderTransactionLog) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrderTransactionLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderTransactionLogPrimaryKeyMapping)
	sql := "DELETE FROM \"order_transaction_log\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from order_transaction_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for order_transaction_log")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderTransactionLogQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no orderTransactionLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from order_transaction_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_transaction_log")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o OrderTransactionLogSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderTransactionLogSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrderTransactionLog slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(orderTransactionLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderTransactionLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_transaction_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderTransactionLogPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from orderTransactionLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_transaction_log")
	}

	if len(orderTransactionLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *OrderTransactionLog) ReloadG() error {
	if o == nil {
		return errors.New("models: no OrderTransactionLog provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderTransactionLog) Reload(exec boil.Executor) error {
	ret, err := FindOrderTransactionLog(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderTransactionLogSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty OrderTransactionLogSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderTransactionLogSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderTransactionLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderTransactionLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_transaction_log\".* FROM \"order_transaction_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderTransactionLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrderTransactionLogSlice")
	}

	*o = slice

	return nil
}

// OrderTransactionLogExistsG checks if the OrderTransactionLog row exists.
func OrderTransactionLogExistsG(iD int) (bool, error) {
	return OrderTransactionLogExists(boil.GetDB(), iD)
}

// OrderTransactionLogExists checks if the OrderTransactionLog row exists.
func OrderTransactionLogExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_transaction_log\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if order_transaction_log exists")
	}

	return exists, nil
}
