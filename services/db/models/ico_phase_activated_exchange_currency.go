// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// IcoPhaseActivatedExchangeCurrency is an object representing the database table.
type IcoPhaseActivatedExchangeCurrency struct {
	ID                        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IcoPhaseID                int       `boil:"ico_phase_id" json:"ico_phase_id" toml:"ico_phase_id" yaml:"ico_phase_id"`
	ExchangeCurrencyID        int       `boil:"exchange_currency_id" json:"exchange_currency_id" toml:"exchange_currency_id" yaml:"exchange_currency_id"`
	ExchangeMasterKey         string    `boil:"exchange_master_key" json:"exchange_master_key" toml:"exchange_master_key" yaml:"exchange_master_key"`
	DenomPricePerToken        int64     `boil:"denom_price_per_token" json:"denom_price_per_token" toml:"denom_price_per_token" yaml:"denom_price_per_token"`
	StellarPaymentAccountPK   string    `boil:"stellar_payment_account_pk" json:"stellar_payment_account_pk" toml:"stellar_payment_account_pk" yaml:"stellar_payment_account_pk"`
	StellarPaymentAccountSeed string    `boil:"stellar_payment_account_seed" json:"stellar_payment_account_seed" toml:"stellar_payment_account_seed" yaml:"stellar_payment_account_seed"`
	CryptoPayoutAddress       string    `boil:"crypto_payout_address" json:"crypto_payout_address" toml:"crypto_payout_address" yaml:"crypto_payout_address"`
	TokensReleased            int64     `boil:"tokens_released" json:"tokens_released" toml:"tokens_released" yaml:"tokens_released"`
	TokensBlocked             int64     `boil:"tokens_blocked" json:"tokens_blocked" toml:"tokens_blocked" yaml:"tokens_blocked"`
	IcoPhaseBankAccountID     null.Int  `boil:"ico_phase_bank_account_id" json:"ico_phase_bank_account_id,omitempty" toml:"ico_phase_bank_account_id" yaml:"ico_phase_bank_account_id,omitempty"`
	CreatedAt                 time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                 time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy                 string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *icoPhaseActivatedExchangeCurrencyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L icoPhaseActivatedExchangeCurrencyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IcoPhaseActivatedExchangeCurrencyColumns = struct {
	ID                        string
	IcoPhaseID                string
	ExchangeCurrencyID        string
	ExchangeMasterKey         string
	DenomPricePerToken        string
	StellarPaymentAccountPK   string
	StellarPaymentAccountSeed string
	CryptoPayoutAddress       string
	TokensReleased            string
	TokensBlocked             string
	IcoPhaseBankAccountID     string
	CreatedAt                 string
	UpdatedAt                 string
	UpdatedBy                 string
}{
	ID:                        "id",
	IcoPhaseID:                "ico_phase_id",
	ExchangeCurrencyID:        "exchange_currency_id",
	ExchangeMasterKey:         "exchange_master_key",
	DenomPricePerToken:        "denom_price_per_token",
	StellarPaymentAccountPK:   "stellar_payment_account_pk",
	StellarPaymentAccountSeed: "stellar_payment_account_seed",
	CryptoPayoutAddress:       "crypto_payout_address",
	TokensReleased:            "tokens_released",
	TokensBlocked:             "tokens_blocked",
	IcoPhaseBankAccountID:     "ico_phase_bank_account_id",
	CreatedAt:                 "created_at",
	UpdatedAt:                 "updated_at",
	UpdatedBy:                 "updated_by",
}

// IcoPhaseActivatedExchangeCurrencyRels is where relationship names are stored.
var IcoPhaseActivatedExchangeCurrencyRels = struct {
	IcoPhase            string
	ExchangeCurrency    string
	IcoPhaseBankAccount string
}{
	IcoPhase:            "IcoPhase",
	ExchangeCurrency:    "ExchangeCurrency",
	IcoPhaseBankAccount: "IcoPhaseBankAccount",
}

// icoPhaseActivatedExchangeCurrencyR is where relationships are stored.
type icoPhaseActivatedExchangeCurrencyR struct {
	IcoPhase            *IcoPhase
	ExchangeCurrency    *ExchangeCurrency
	IcoPhaseBankAccount *IcoPhaseBankAccount
}

// NewStruct creates a new relationship struct
func (*icoPhaseActivatedExchangeCurrencyR) NewStruct() *icoPhaseActivatedExchangeCurrencyR {
	return &icoPhaseActivatedExchangeCurrencyR{}
}

// icoPhaseActivatedExchangeCurrencyL is where Load methods for each relationship are stored.
type icoPhaseActivatedExchangeCurrencyL struct{}

var (
	icoPhaseActivatedExchangeCurrencyColumns               = []string{"id", "ico_phase_id", "exchange_currency_id", "exchange_master_key", "denom_price_per_token", "stellar_payment_account_pk", "stellar_payment_account_seed", "crypto_payout_address", "tokens_released", "tokens_blocked", "ico_phase_bank_account_id", "created_at", "updated_at", "updated_by"}
	icoPhaseActivatedExchangeCurrencyColumnsWithoutDefault = []string{"ico_phase_id", "exchange_currency_id", "exchange_master_key", "denom_price_per_token", "stellar_payment_account_pk", "stellar_payment_account_seed", "tokens_released", "tokens_blocked", "ico_phase_bank_account_id", "updated_by"}
	icoPhaseActivatedExchangeCurrencyColumnsWithDefault    = []string{"id", "crypto_payout_address", "created_at", "updated_at"}
	icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns     = []string{"id"}
)

type (
	// IcoPhaseActivatedExchangeCurrencySlice is an alias for a slice of pointers to IcoPhaseActivatedExchangeCurrency.
	// This should generally be used opposed to []IcoPhaseActivatedExchangeCurrency.
	IcoPhaseActivatedExchangeCurrencySlice []*IcoPhaseActivatedExchangeCurrency
	// IcoPhaseActivatedExchangeCurrencyHook is the signature for custom IcoPhaseActivatedExchangeCurrency hook methods
	IcoPhaseActivatedExchangeCurrencyHook func(boil.Executor, *IcoPhaseActivatedExchangeCurrency) error

	icoPhaseActivatedExchangeCurrencyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	icoPhaseActivatedExchangeCurrencyType                 = reflect.TypeOf(&IcoPhaseActivatedExchangeCurrency{})
	icoPhaseActivatedExchangeCurrencyMapping              = queries.MakeStructMapping(icoPhaseActivatedExchangeCurrencyType)
	icoPhaseActivatedExchangeCurrencyPrimaryKeyMapping, _ = queries.BindMapping(icoPhaseActivatedExchangeCurrencyType, icoPhaseActivatedExchangeCurrencyMapping, icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns)
	icoPhaseActivatedExchangeCurrencyInsertCacheMut       sync.RWMutex
	icoPhaseActivatedExchangeCurrencyInsertCache          = make(map[string]insertCache)
	icoPhaseActivatedExchangeCurrencyUpdateCacheMut       sync.RWMutex
	icoPhaseActivatedExchangeCurrencyUpdateCache          = make(map[string]updateCache)
	icoPhaseActivatedExchangeCurrencyUpsertCacheMut       sync.RWMutex
	icoPhaseActivatedExchangeCurrencyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var icoPhaseActivatedExchangeCurrencyBeforeInsertHooks []IcoPhaseActivatedExchangeCurrencyHook
var icoPhaseActivatedExchangeCurrencyBeforeUpdateHooks []IcoPhaseActivatedExchangeCurrencyHook
var icoPhaseActivatedExchangeCurrencyBeforeDeleteHooks []IcoPhaseActivatedExchangeCurrencyHook
var icoPhaseActivatedExchangeCurrencyBeforeUpsertHooks []IcoPhaseActivatedExchangeCurrencyHook

var icoPhaseActivatedExchangeCurrencyAfterInsertHooks []IcoPhaseActivatedExchangeCurrencyHook
var icoPhaseActivatedExchangeCurrencyAfterSelectHooks []IcoPhaseActivatedExchangeCurrencyHook
var icoPhaseActivatedExchangeCurrencyAfterUpdateHooks []IcoPhaseActivatedExchangeCurrencyHook
var icoPhaseActivatedExchangeCurrencyAfterDeleteHooks []IcoPhaseActivatedExchangeCurrencyHook
var icoPhaseActivatedExchangeCurrencyAfterUpsertHooks []IcoPhaseActivatedExchangeCurrencyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IcoPhaseActivatedExchangeCurrency) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseActivatedExchangeCurrencyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IcoPhaseActivatedExchangeCurrency) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseActivatedExchangeCurrencyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IcoPhaseActivatedExchangeCurrency) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseActivatedExchangeCurrencyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IcoPhaseActivatedExchangeCurrency) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseActivatedExchangeCurrencyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IcoPhaseActivatedExchangeCurrency) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseActivatedExchangeCurrencyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IcoPhaseActivatedExchangeCurrency) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseActivatedExchangeCurrencyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IcoPhaseActivatedExchangeCurrency) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseActivatedExchangeCurrencyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IcoPhaseActivatedExchangeCurrency) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseActivatedExchangeCurrencyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IcoPhaseActivatedExchangeCurrency) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseActivatedExchangeCurrencyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIcoPhaseActivatedExchangeCurrencyHook registers your hook function for all future operations.
func AddIcoPhaseActivatedExchangeCurrencyHook(hookPoint boil.HookPoint, icoPhaseActivatedExchangeCurrencyHook IcoPhaseActivatedExchangeCurrencyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		icoPhaseActivatedExchangeCurrencyBeforeInsertHooks = append(icoPhaseActivatedExchangeCurrencyBeforeInsertHooks, icoPhaseActivatedExchangeCurrencyHook)
	case boil.BeforeUpdateHook:
		icoPhaseActivatedExchangeCurrencyBeforeUpdateHooks = append(icoPhaseActivatedExchangeCurrencyBeforeUpdateHooks, icoPhaseActivatedExchangeCurrencyHook)
	case boil.BeforeDeleteHook:
		icoPhaseActivatedExchangeCurrencyBeforeDeleteHooks = append(icoPhaseActivatedExchangeCurrencyBeforeDeleteHooks, icoPhaseActivatedExchangeCurrencyHook)
	case boil.BeforeUpsertHook:
		icoPhaseActivatedExchangeCurrencyBeforeUpsertHooks = append(icoPhaseActivatedExchangeCurrencyBeforeUpsertHooks, icoPhaseActivatedExchangeCurrencyHook)
	case boil.AfterInsertHook:
		icoPhaseActivatedExchangeCurrencyAfterInsertHooks = append(icoPhaseActivatedExchangeCurrencyAfterInsertHooks, icoPhaseActivatedExchangeCurrencyHook)
	case boil.AfterSelectHook:
		icoPhaseActivatedExchangeCurrencyAfterSelectHooks = append(icoPhaseActivatedExchangeCurrencyAfterSelectHooks, icoPhaseActivatedExchangeCurrencyHook)
	case boil.AfterUpdateHook:
		icoPhaseActivatedExchangeCurrencyAfterUpdateHooks = append(icoPhaseActivatedExchangeCurrencyAfterUpdateHooks, icoPhaseActivatedExchangeCurrencyHook)
	case boil.AfterDeleteHook:
		icoPhaseActivatedExchangeCurrencyAfterDeleteHooks = append(icoPhaseActivatedExchangeCurrencyAfterDeleteHooks, icoPhaseActivatedExchangeCurrencyHook)
	case boil.AfterUpsertHook:
		icoPhaseActivatedExchangeCurrencyAfterUpsertHooks = append(icoPhaseActivatedExchangeCurrencyAfterUpsertHooks, icoPhaseActivatedExchangeCurrencyHook)
	}
}

// OneG returns a single icoPhaseActivatedExchangeCurrency record from the query using the global executor.
func (q icoPhaseActivatedExchangeCurrencyQuery) OneG() (*IcoPhaseActivatedExchangeCurrency, error) {
	return q.One(boil.GetDB())
}

// One returns a single icoPhaseActivatedExchangeCurrency record from the query.
func (q icoPhaseActivatedExchangeCurrencyQuery) One(exec boil.Executor) (*IcoPhaseActivatedExchangeCurrency, error) {
	o := &IcoPhaseActivatedExchangeCurrency{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ico_phase_activated_exchange_currency")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all IcoPhaseActivatedExchangeCurrency records from the query using the global executor.
func (q icoPhaseActivatedExchangeCurrencyQuery) AllG() (IcoPhaseActivatedExchangeCurrencySlice, error) {
	return q.All(boil.GetDB())
}

// All returns all IcoPhaseActivatedExchangeCurrency records from the query.
func (q icoPhaseActivatedExchangeCurrencyQuery) All(exec boil.Executor) (IcoPhaseActivatedExchangeCurrencySlice, error) {
	var o []*IcoPhaseActivatedExchangeCurrency

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IcoPhaseActivatedExchangeCurrency slice")
	}

	if len(icoPhaseActivatedExchangeCurrencyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all IcoPhaseActivatedExchangeCurrency records in the query, and panics on error.
func (q icoPhaseActivatedExchangeCurrencyQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all IcoPhaseActivatedExchangeCurrency records in the query.
func (q icoPhaseActivatedExchangeCurrencyQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ico_phase_activated_exchange_currency rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q icoPhaseActivatedExchangeCurrencyQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q icoPhaseActivatedExchangeCurrencyQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ico_phase_activated_exchange_currency exists")
	}

	return count > 0, nil
}

// IcoPhase pointed to by the foreign key.
func (o *IcoPhaseActivatedExchangeCurrency) IcoPhase(mods ...qm.QueryMod) icoPhaseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.IcoPhaseID),
	}

	queryMods = append(queryMods, mods...)

	query := IcoPhases(queryMods...)
	queries.SetFrom(query.Query, "\"ico_phase\"")

	return query
}

// ExchangeCurrency pointed to by the foreign key.
func (o *IcoPhaseActivatedExchangeCurrency) ExchangeCurrency(mods ...qm.QueryMod) exchangeCurrencyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ExchangeCurrencyID),
	}

	queryMods = append(queryMods, mods...)

	query := ExchangeCurrencies(queryMods...)
	queries.SetFrom(query.Query, "\"exchange_currency\"")

	return query
}

// IcoPhaseBankAccount pointed to by the foreign key.
func (o *IcoPhaseActivatedExchangeCurrency) IcoPhaseBankAccount(mods ...qm.QueryMod) icoPhaseBankAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.IcoPhaseBankAccountID),
	}

	queryMods = append(queryMods, mods...)

	query := IcoPhaseBankAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"ico_phase_bank_account\"")

	return query
}

// LoadIcoPhase allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (icoPhaseActivatedExchangeCurrencyL) LoadIcoPhase(e boil.Executor, singular bool, maybeIcoPhaseActivatedExchangeCurrency interface{}, mods queries.Applicator) error {
	var slice []*IcoPhaseActivatedExchangeCurrency
	var object *IcoPhaseActivatedExchangeCurrency

	if singular {
		object = maybeIcoPhaseActivatedExchangeCurrency.(*IcoPhaseActivatedExchangeCurrency)
	} else {
		slice = *maybeIcoPhaseActivatedExchangeCurrency.(*[]*IcoPhaseActivatedExchangeCurrency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &icoPhaseActivatedExchangeCurrencyR{}
		}
		args = append(args, object.IcoPhaseID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &icoPhaseActivatedExchangeCurrencyR{}
			}

			for _, a := range args {
				if a == obj.IcoPhaseID {
					continue Outer
				}
			}

			args = append(args, obj.IcoPhaseID)

		}
	}

	query := NewQuery(qm.From(`ico_phase`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load IcoPhase")
	}

	var resultSlice []*IcoPhase
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice IcoPhase")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ico_phase")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ico_phase")
	}

	if len(icoPhaseActivatedExchangeCurrencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IcoPhase = foreign
		if foreign.R == nil {
			foreign.R = &icoPhaseR{}
		}
		foreign.R.IcoPhaseActivatedExchangeCurrencies = append(foreign.R.IcoPhaseActivatedExchangeCurrencies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IcoPhaseID == foreign.ID {
				local.R.IcoPhase = foreign
				if foreign.R == nil {
					foreign.R = &icoPhaseR{}
				}
				foreign.R.IcoPhaseActivatedExchangeCurrencies = append(foreign.R.IcoPhaseActivatedExchangeCurrencies, local)
				break
			}
		}
	}

	return nil
}

// LoadExchangeCurrency allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (icoPhaseActivatedExchangeCurrencyL) LoadExchangeCurrency(e boil.Executor, singular bool, maybeIcoPhaseActivatedExchangeCurrency interface{}, mods queries.Applicator) error {
	var slice []*IcoPhaseActivatedExchangeCurrency
	var object *IcoPhaseActivatedExchangeCurrency

	if singular {
		object = maybeIcoPhaseActivatedExchangeCurrency.(*IcoPhaseActivatedExchangeCurrency)
	} else {
		slice = *maybeIcoPhaseActivatedExchangeCurrency.(*[]*IcoPhaseActivatedExchangeCurrency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &icoPhaseActivatedExchangeCurrencyR{}
		}
		args = append(args, object.ExchangeCurrencyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &icoPhaseActivatedExchangeCurrencyR{}
			}

			for _, a := range args {
				if a == obj.ExchangeCurrencyID {
					continue Outer
				}
			}

			args = append(args, obj.ExchangeCurrencyID)

		}
	}

	query := NewQuery(qm.From(`exchange_currency`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ExchangeCurrency")
	}

	var resultSlice []*ExchangeCurrency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ExchangeCurrency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for exchange_currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exchange_currency")
	}

	if len(icoPhaseActivatedExchangeCurrencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ExchangeCurrency = foreign
		if foreign.R == nil {
			foreign.R = &exchangeCurrencyR{}
		}
		foreign.R.IcoPhaseActivatedExchangeCurrencies = append(foreign.R.IcoPhaseActivatedExchangeCurrencies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExchangeCurrencyID == foreign.ID {
				local.R.ExchangeCurrency = foreign
				if foreign.R == nil {
					foreign.R = &exchangeCurrencyR{}
				}
				foreign.R.IcoPhaseActivatedExchangeCurrencies = append(foreign.R.IcoPhaseActivatedExchangeCurrencies, local)
				break
			}
		}
	}

	return nil
}

// LoadIcoPhaseBankAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (icoPhaseActivatedExchangeCurrencyL) LoadIcoPhaseBankAccount(e boil.Executor, singular bool, maybeIcoPhaseActivatedExchangeCurrency interface{}, mods queries.Applicator) error {
	var slice []*IcoPhaseActivatedExchangeCurrency
	var object *IcoPhaseActivatedExchangeCurrency

	if singular {
		object = maybeIcoPhaseActivatedExchangeCurrency.(*IcoPhaseActivatedExchangeCurrency)
	} else {
		slice = *maybeIcoPhaseActivatedExchangeCurrency.(*[]*IcoPhaseActivatedExchangeCurrency)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &icoPhaseActivatedExchangeCurrencyR{}
		}
		if !queries.IsNil(object.IcoPhaseBankAccountID) {
			args = append(args, object.IcoPhaseBankAccountID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &icoPhaseActivatedExchangeCurrencyR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.IcoPhaseBankAccountID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.IcoPhaseBankAccountID) {
				args = append(args, obj.IcoPhaseBankAccountID)
			}

		}
	}

	query := NewQuery(qm.From(`ico_phase_bank_account`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load IcoPhaseBankAccount")
	}

	var resultSlice []*IcoPhaseBankAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice IcoPhaseBankAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ico_phase_bank_account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ico_phase_bank_account")
	}

	if len(icoPhaseActivatedExchangeCurrencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IcoPhaseBankAccount = foreign
		if foreign.R == nil {
			foreign.R = &icoPhaseBankAccountR{}
		}
		foreign.R.IcoPhaseActivatedExchangeCurrencies = append(foreign.R.IcoPhaseActivatedExchangeCurrencies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IcoPhaseBankAccountID, foreign.ID) {
				local.R.IcoPhaseBankAccount = foreign
				if foreign.R == nil {
					foreign.R = &icoPhaseBankAccountR{}
				}
				foreign.R.IcoPhaseActivatedExchangeCurrencies = append(foreign.R.IcoPhaseActivatedExchangeCurrencies, local)
				break
			}
		}
	}

	return nil
}

// SetIcoPhaseG of the icoPhaseActivatedExchangeCurrency to the related item.
// Sets o.R.IcoPhase to related.
// Adds o to related.R.IcoPhaseActivatedExchangeCurrencies.
// Uses the global database handle.
func (o *IcoPhaseActivatedExchangeCurrency) SetIcoPhaseG(insert bool, related *IcoPhase) error {
	return o.SetIcoPhase(boil.GetDB(), insert, related)
}

// SetIcoPhase of the icoPhaseActivatedExchangeCurrency to the related item.
// Sets o.R.IcoPhase to related.
// Adds o to related.R.IcoPhaseActivatedExchangeCurrencies.
func (o *IcoPhaseActivatedExchangeCurrency) SetIcoPhase(exec boil.Executor, insert bool, related *IcoPhase) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ico_phase_activated_exchange_currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ico_phase_id"}),
		strmangle.WhereClause("\"", "\"", 2, icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IcoPhaseID = related.ID
	if o.R == nil {
		o.R = &icoPhaseActivatedExchangeCurrencyR{
			IcoPhase: related,
		}
	} else {
		o.R.IcoPhase = related
	}

	if related.R == nil {
		related.R = &icoPhaseR{
			IcoPhaseActivatedExchangeCurrencies: IcoPhaseActivatedExchangeCurrencySlice{o},
		}
	} else {
		related.R.IcoPhaseActivatedExchangeCurrencies = append(related.R.IcoPhaseActivatedExchangeCurrencies, o)
	}

	return nil
}

// SetExchangeCurrencyG of the icoPhaseActivatedExchangeCurrency to the related item.
// Sets o.R.ExchangeCurrency to related.
// Adds o to related.R.IcoPhaseActivatedExchangeCurrencies.
// Uses the global database handle.
func (o *IcoPhaseActivatedExchangeCurrency) SetExchangeCurrencyG(insert bool, related *ExchangeCurrency) error {
	return o.SetExchangeCurrency(boil.GetDB(), insert, related)
}

// SetExchangeCurrency of the icoPhaseActivatedExchangeCurrency to the related item.
// Sets o.R.ExchangeCurrency to related.
// Adds o to related.R.IcoPhaseActivatedExchangeCurrencies.
func (o *IcoPhaseActivatedExchangeCurrency) SetExchangeCurrency(exec boil.Executor, insert bool, related *ExchangeCurrency) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ico_phase_activated_exchange_currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"exchange_currency_id"}),
		strmangle.WhereClause("\"", "\"", 2, icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExchangeCurrencyID = related.ID
	if o.R == nil {
		o.R = &icoPhaseActivatedExchangeCurrencyR{
			ExchangeCurrency: related,
		}
	} else {
		o.R.ExchangeCurrency = related
	}

	if related.R == nil {
		related.R = &exchangeCurrencyR{
			IcoPhaseActivatedExchangeCurrencies: IcoPhaseActivatedExchangeCurrencySlice{o},
		}
	} else {
		related.R.IcoPhaseActivatedExchangeCurrencies = append(related.R.IcoPhaseActivatedExchangeCurrencies, o)
	}

	return nil
}

// SetIcoPhaseBankAccountG of the icoPhaseActivatedExchangeCurrency to the related item.
// Sets o.R.IcoPhaseBankAccount to related.
// Adds o to related.R.IcoPhaseActivatedExchangeCurrencies.
// Uses the global database handle.
func (o *IcoPhaseActivatedExchangeCurrency) SetIcoPhaseBankAccountG(insert bool, related *IcoPhaseBankAccount) error {
	return o.SetIcoPhaseBankAccount(boil.GetDB(), insert, related)
}

// SetIcoPhaseBankAccount of the icoPhaseActivatedExchangeCurrency to the related item.
// Sets o.R.IcoPhaseBankAccount to related.
// Adds o to related.R.IcoPhaseActivatedExchangeCurrencies.
func (o *IcoPhaseActivatedExchangeCurrency) SetIcoPhaseBankAccount(exec boil.Executor, insert bool, related *IcoPhaseBankAccount) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ico_phase_activated_exchange_currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ico_phase_bank_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IcoPhaseBankAccountID, related.ID)
	if o.R == nil {
		o.R = &icoPhaseActivatedExchangeCurrencyR{
			IcoPhaseBankAccount: related,
		}
	} else {
		o.R.IcoPhaseBankAccount = related
	}

	if related.R == nil {
		related.R = &icoPhaseBankAccountR{
			IcoPhaseActivatedExchangeCurrencies: IcoPhaseActivatedExchangeCurrencySlice{o},
		}
	} else {
		related.R.IcoPhaseActivatedExchangeCurrencies = append(related.R.IcoPhaseActivatedExchangeCurrencies, o)
	}

	return nil
}

// RemoveIcoPhaseBankAccountG relationship.
// Sets o.R.IcoPhaseBankAccount to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *IcoPhaseActivatedExchangeCurrency) RemoveIcoPhaseBankAccountG(related *IcoPhaseBankAccount) error {
	return o.RemoveIcoPhaseBankAccount(boil.GetDB(), related)
}

// RemoveIcoPhaseBankAccount relationship.
// Sets o.R.IcoPhaseBankAccount to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *IcoPhaseActivatedExchangeCurrency) RemoveIcoPhaseBankAccount(exec boil.Executor, related *IcoPhaseBankAccount) error {
	var err error

	queries.SetScanner(&o.IcoPhaseBankAccountID, nil)
	if _, err = o.Update(exec, boil.Whitelist("ico_phase_bank_account_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.IcoPhaseBankAccount = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IcoPhaseActivatedExchangeCurrencies {
		if queries.Equal(o.IcoPhaseBankAccountID, ri.IcoPhaseBankAccountID) {
			continue
		}

		ln := len(related.R.IcoPhaseActivatedExchangeCurrencies)
		if ln > 1 && i < ln-1 {
			related.R.IcoPhaseActivatedExchangeCurrencies[i] = related.R.IcoPhaseActivatedExchangeCurrencies[ln-1]
		}
		related.R.IcoPhaseActivatedExchangeCurrencies = related.R.IcoPhaseActivatedExchangeCurrencies[:ln-1]
		break
	}
	return nil
}

// IcoPhaseActivatedExchangeCurrencies retrieves all the records using an executor.
func IcoPhaseActivatedExchangeCurrencies(mods ...qm.QueryMod) icoPhaseActivatedExchangeCurrencyQuery {
	mods = append(mods, qm.From("\"ico_phase_activated_exchange_currency\""))
	return icoPhaseActivatedExchangeCurrencyQuery{NewQuery(mods...)}
}

// FindIcoPhaseActivatedExchangeCurrencyG retrieves a single record by ID.
func FindIcoPhaseActivatedExchangeCurrencyG(iD int, selectCols ...string) (*IcoPhaseActivatedExchangeCurrency, error) {
	return FindIcoPhaseActivatedExchangeCurrency(boil.GetDB(), iD, selectCols...)
}

// FindIcoPhaseActivatedExchangeCurrency retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIcoPhaseActivatedExchangeCurrency(exec boil.Executor, iD int, selectCols ...string) (*IcoPhaseActivatedExchangeCurrency, error) {
	icoPhaseActivatedExchangeCurrencyObj := &IcoPhaseActivatedExchangeCurrency{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ico_phase_activated_exchange_currency\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, icoPhaseActivatedExchangeCurrencyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ico_phase_activated_exchange_currency")
	}

	return icoPhaseActivatedExchangeCurrencyObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *IcoPhaseActivatedExchangeCurrency) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IcoPhaseActivatedExchangeCurrency) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ico_phase_activated_exchange_currency provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(icoPhaseActivatedExchangeCurrencyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	icoPhaseActivatedExchangeCurrencyInsertCacheMut.RLock()
	cache, cached := icoPhaseActivatedExchangeCurrencyInsertCache[key]
	icoPhaseActivatedExchangeCurrencyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			icoPhaseActivatedExchangeCurrencyColumns,
			icoPhaseActivatedExchangeCurrencyColumnsWithDefault,
			icoPhaseActivatedExchangeCurrencyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(icoPhaseActivatedExchangeCurrencyType, icoPhaseActivatedExchangeCurrencyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(icoPhaseActivatedExchangeCurrencyType, icoPhaseActivatedExchangeCurrencyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ico_phase_activated_exchange_currency\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ico_phase_activated_exchange_currency\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ico_phase_activated_exchange_currency")
	}

	if !cached {
		icoPhaseActivatedExchangeCurrencyInsertCacheMut.Lock()
		icoPhaseActivatedExchangeCurrencyInsertCache[key] = cache
		icoPhaseActivatedExchangeCurrencyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single IcoPhaseActivatedExchangeCurrency record using the global executor.
// See Update for more documentation.
func (o *IcoPhaseActivatedExchangeCurrency) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the IcoPhaseActivatedExchangeCurrency.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IcoPhaseActivatedExchangeCurrency) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	icoPhaseActivatedExchangeCurrencyUpdateCacheMut.RLock()
	cache, cached := icoPhaseActivatedExchangeCurrencyUpdateCache[key]
	icoPhaseActivatedExchangeCurrencyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			icoPhaseActivatedExchangeCurrencyColumns,
			icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ico_phase_activated_exchange_currency, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ico_phase_activated_exchange_currency\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(icoPhaseActivatedExchangeCurrencyType, icoPhaseActivatedExchangeCurrencyMapping, append(wl, icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ico_phase_activated_exchange_currency row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ico_phase_activated_exchange_currency")
	}

	if !cached {
		icoPhaseActivatedExchangeCurrencyUpdateCacheMut.Lock()
		icoPhaseActivatedExchangeCurrencyUpdateCache[key] = cache
		icoPhaseActivatedExchangeCurrencyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q icoPhaseActivatedExchangeCurrencyQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q icoPhaseActivatedExchangeCurrencyQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ico_phase_activated_exchange_currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ico_phase_activated_exchange_currency")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o IcoPhaseActivatedExchangeCurrencySlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IcoPhaseActivatedExchangeCurrencySlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icoPhaseActivatedExchangeCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ico_phase_activated_exchange_currency\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in icoPhaseActivatedExchangeCurrency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all icoPhaseActivatedExchangeCurrency")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *IcoPhaseActivatedExchangeCurrency) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IcoPhaseActivatedExchangeCurrency) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ico_phase_activated_exchange_currency provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(icoPhaseActivatedExchangeCurrencyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	icoPhaseActivatedExchangeCurrencyUpsertCacheMut.RLock()
	cache, cached := icoPhaseActivatedExchangeCurrencyUpsertCache[key]
	icoPhaseActivatedExchangeCurrencyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			icoPhaseActivatedExchangeCurrencyColumns,
			icoPhaseActivatedExchangeCurrencyColumnsWithDefault,
			icoPhaseActivatedExchangeCurrencyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			icoPhaseActivatedExchangeCurrencyColumns,
			icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert ico_phase_activated_exchange_currency, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns))
			copy(conflict, icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ico_phase_activated_exchange_currency\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(icoPhaseActivatedExchangeCurrencyType, icoPhaseActivatedExchangeCurrencyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(icoPhaseActivatedExchangeCurrencyType, icoPhaseActivatedExchangeCurrencyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ico_phase_activated_exchange_currency")
	}

	if !cached {
		icoPhaseActivatedExchangeCurrencyUpsertCacheMut.Lock()
		icoPhaseActivatedExchangeCurrencyUpsertCache[key] = cache
		icoPhaseActivatedExchangeCurrencyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single IcoPhaseActivatedExchangeCurrency record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *IcoPhaseActivatedExchangeCurrency) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single IcoPhaseActivatedExchangeCurrency record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IcoPhaseActivatedExchangeCurrency) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IcoPhaseActivatedExchangeCurrency provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), icoPhaseActivatedExchangeCurrencyPrimaryKeyMapping)
	sql := "DELETE FROM \"ico_phase_activated_exchange_currency\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ico_phase_activated_exchange_currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ico_phase_activated_exchange_currency")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q icoPhaseActivatedExchangeCurrencyQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no icoPhaseActivatedExchangeCurrencyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ico_phase_activated_exchange_currency")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ico_phase_activated_exchange_currency")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o IcoPhaseActivatedExchangeCurrencySlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IcoPhaseActivatedExchangeCurrencySlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IcoPhaseActivatedExchangeCurrency slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(icoPhaseActivatedExchangeCurrencyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icoPhaseActivatedExchangeCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ico_phase_activated_exchange_currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from icoPhaseActivatedExchangeCurrency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ico_phase_activated_exchange_currency")
	}

	if len(icoPhaseActivatedExchangeCurrencyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *IcoPhaseActivatedExchangeCurrency) ReloadG() error {
	if o == nil {
		return errors.New("models: no IcoPhaseActivatedExchangeCurrency provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IcoPhaseActivatedExchangeCurrency) Reload(exec boil.Executor) error {
	ret, err := FindIcoPhaseActivatedExchangeCurrency(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IcoPhaseActivatedExchangeCurrencySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty IcoPhaseActivatedExchangeCurrencySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IcoPhaseActivatedExchangeCurrencySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IcoPhaseActivatedExchangeCurrencySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icoPhaseActivatedExchangeCurrencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ico_phase_activated_exchange_currency\".* FROM \"ico_phase_activated_exchange_currency\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IcoPhaseActivatedExchangeCurrencySlice")
	}

	*o = slice

	return nil
}

// IcoPhaseActivatedExchangeCurrencyExistsG checks if the IcoPhaseActivatedExchangeCurrency row exists.
func IcoPhaseActivatedExchangeCurrencyExistsG(iD int) (bool, error) {
	return IcoPhaseActivatedExchangeCurrencyExists(boil.GetDB(), iD)
}

// IcoPhaseActivatedExchangeCurrencyExists checks if the IcoPhaseActivatedExchangeCurrency row exists.
func IcoPhaseActivatedExchangeCurrencyExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ico_phase_activated_exchange_currency\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ico_phase_activated_exchange_currency exists")
	}

	return exists, nil
}
