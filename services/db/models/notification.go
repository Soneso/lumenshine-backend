// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Notification is an object representing the database table.
type Notification struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID      int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	PushToken   string    `boil:"push_token" json:"push_token" toml:"push_token" yaml:"push_token"`
	Type        string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	Content     string    `boil:"content" json:"content" toml:"content" yaml:"content"`
	MailSubject string    `boil:"mail_subject" json:"mail_subject" toml:"mail_subject" yaml:"mail_subject"`
	MailType    string    `boil:"mail_type" json:"mail_type" toml:"mail_type" yaml:"mail_type"`
	UserEmail   string    `boil:"user_email" json:"user_email" toml:"user_email" yaml:"user_email"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy   string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *notificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L notificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NotificationColumns = struct {
	ID          string
	UserID      string
	PushToken   string
	Type        string
	Content     string
	MailSubject string
	MailType    string
	UserEmail   string
	CreatedAt   string
	UpdatedAt   string
	UpdatedBy   string
}{
	ID:          "id",
	UserID:      "user_id",
	PushToken:   "push_token",
	Type:        "type",
	Content:     "content",
	MailSubject: "mail_subject",
	MailType:    "mail_type",
	UserEmail:   "user_email",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	UpdatedBy:   "updated_by",
}

// NotificationRels is where relationship names are stored.
var NotificationRels = struct {
	User string
}{
	User: "User",
}

// notificationR is where relationships are stored.
type notificationR struct {
	User *UserProfile
}

// NewStruct creates a new relationship struct
func (*notificationR) NewStruct() *notificationR {
	return &notificationR{}
}

// notificationL is where Load methods for each relationship are stored.
type notificationL struct{}

var (
	notificationColumns               = []string{"id", "user_id", "push_token", "type", "content", "mail_subject", "mail_type", "user_email", "created_at", "updated_at", "updated_by"}
	notificationColumnsWithoutDefault = []string{"user_id", "push_token", "type", "content", "mail_subject", "mail_type", "user_email", "updated_by"}
	notificationColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	notificationPrimaryKeyColumns     = []string{"id"}
)

type (
	// NotificationSlice is an alias for a slice of pointers to Notification.
	// This should generally be used opposed to []Notification.
	NotificationSlice []*Notification
	// NotificationHook is the signature for custom Notification hook methods
	NotificationHook func(boil.Executor, *Notification) error

	notificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	notificationType                 = reflect.TypeOf(&Notification{})
	notificationMapping              = queries.MakeStructMapping(notificationType)
	notificationPrimaryKeyMapping, _ = queries.BindMapping(notificationType, notificationMapping, notificationPrimaryKeyColumns)
	notificationInsertCacheMut       sync.RWMutex
	notificationInsertCache          = make(map[string]insertCache)
	notificationUpdateCacheMut       sync.RWMutex
	notificationUpdateCache          = make(map[string]updateCache)
	notificationUpsertCacheMut       sync.RWMutex
	notificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var notificationBeforeInsertHooks []NotificationHook
var notificationBeforeUpdateHooks []NotificationHook
var notificationBeforeDeleteHooks []NotificationHook
var notificationBeforeUpsertHooks []NotificationHook

var notificationAfterInsertHooks []NotificationHook
var notificationAfterSelectHooks []NotificationHook
var notificationAfterUpdateHooks []NotificationHook
var notificationAfterDeleteHooks []NotificationHook
var notificationAfterUpsertHooks []NotificationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Notification) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Notification) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Notification) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Notification) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Notification) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Notification) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Notification) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Notification) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Notification) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNotificationHook registers your hook function for all future operations.
func AddNotificationHook(hookPoint boil.HookPoint, notificationHook NotificationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		notificationBeforeInsertHooks = append(notificationBeforeInsertHooks, notificationHook)
	case boil.BeforeUpdateHook:
		notificationBeforeUpdateHooks = append(notificationBeforeUpdateHooks, notificationHook)
	case boil.BeforeDeleteHook:
		notificationBeforeDeleteHooks = append(notificationBeforeDeleteHooks, notificationHook)
	case boil.BeforeUpsertHook:
		notificationBeforeUpsertHooks = append(notificationBeforeUpsertHooks, notificationHook)
	case boil.AfterInsertHook:
		notificationAfterInsertHooks = append(notificationAfterInsertHooks, notificationHook)
	case boil.AfterSelectHook:
		notificationAfterSelectHooks = append(notificationAfterSelectHooks, notificationHook)
	case boil.AfterUpdateHook:
		notificationAfterUpdateHooks = append(notificationAfterUpdateHooks, notificationHook)
	case boil.AfterDeleteHook:
		notificationAfterDeleteHooks = append(notificationAfterDeleteHooks, notificationHook)
	case boil.AfterUpsertHook:
		notificationAfterUpsertHooks = append(notificationAfterUpsertHooks, notificationHook)
	}
}

// OneG returns a single notification record from the query using the global executor.
func (q notificationQuery) OneG() (*Notification, error) {
	return q.One(boil.GetDB())
}

// One returns a single notification record from the query.
func (q notificationQuery) One(exec boil.Executor) (*Notification, error) {
	o := &Notification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for notification")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Notification records from the query using the global executor.
func (q notificationQuery) AllG() (NotificationSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Notification records from the query.
func (q notificationQuery) All(exec boil.Executor) (NotificationSlice, error) {
	var o []*Notification

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Notification slice")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Notification records in the query, and panics on error.
func (q notificationQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Notification records in the query.
func (q notificationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count notification rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q notificationQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q notificationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if notification exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Notification) User(mods ...qm.QueryMod) userProfileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := UserProfiles(queryMods...)
	queries.SetFrom(query.Query, "\"user_profile\"")

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (notificationL) LoadUser(e boil.Executor, singular bool, maybeNotification interface{}, mods queries.Applicator) error {
	var slice []*Notification
	var object *Notification

	if singular {
		object = maybeNotification.(*Notification)
	} else {
		slice = *maybeNotification.(*[]*Notification)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &notificationR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	query := NewQuery(qm.From(`user_profile`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserProfile")
	}

	var resultSlice []*UserProfile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserProfile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_profile")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_profile")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userProfileR{}
		}
		foreign.R.UserNotifications = append(foreign.R.UserNotifications, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userProfileR{}
				}
				foreign.R.UserNotifications = append(foreign.R.UserNotifications, local)
				break
			}
		}
	}

	return nil
}

// SetUserG of the notification to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserNotifications.
// Uses the global database handle.
func (o *Notification) SetUserG(insert bool, related *UserProfile) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUser of the notification to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserNotifications.
func (o *Notification) SetUser(exec boil.Executor, insert bool, related *UserProfile) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &notificationR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userProfileR{
			UserNotifications: NotificationSlice{o},
		}
	} else {
		related.R.UserNotifications = append(related.R.UserNotifications, o)
	}

	return nil
}

// Notifications retrieves all the records using an executor.
func Notifications(mods ...qm.QueryMod) notificationQuery {
	mods = append(mods, qm.From("\"notification\""))
	return notificationQuery{NewQuery(mods...)}
}

// FindNotificationG retrieves a single record by ID.
func FindNotificationG(iD int, selectCols ...string) (*Notification, error) {
	return FindNotification(boil.GetDB(), iD, selectCols...)
}

// FindNotification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotification(exec boil.Executor, iD int, selectCols ...string) (*Notification, error) {
	notificationObj := &Notification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"notification\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, notificationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from notification")
	}

	return notificationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Notification) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Notification) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notification provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	notificationInsertCacheMut.RLock()
	cache, cached := notificationInsertCache[key]
	notificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			notificationColumns,
			notificationColumnsWithDefault,
			notificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(notificationType, notificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(notificationType, notificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"notification\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"notification\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into notification")
	}

	if !cached {
		notificationInsertCacheMut.Lock()
		notificationInsertCache[key] = cache
		notificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Notification record using the global executor.
// See Update for more documentation.
func (o *Notification) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Notification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Notification) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	notificationUpdateCacheMut.RLock()
	cache, cached := notificationUpdateCache[key]
	notificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			notificationColumns,
			notificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update notification, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"notification\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, notificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(notificationType, notificationMapping, append(wl, notificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update notification row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for notification")
	}

	if !cached {
		notificationUpdateCacheMut.Lock()
		notificationUpdateCache[key] = cache
		notificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q notificationQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q notificationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for notification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for notification")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o NotificationSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NotificationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"notification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, notificationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in notification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all notification")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Notification) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Notification) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no notification provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	notificationUpsertCacheMut.RLock()
	cache, cached := notificationUpsertCache[key]
	notificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			notificationColumns,
			notificationColumnsWithDefault,
			notificationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			notificationColumns,
			notificationPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert notification, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(notificationPrimaryKeyColumns))
			copy(conflict, notificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"notification\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(notificationType, notificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(notificationType, notificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert notification")
	}

	if !cached {
		notificationUpsertCacheMut.Lock()
		notificationUpsertCache[key] = cache
		notificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Notification record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Notification) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Notification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Notification) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Notification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), notificationPrimaryKeyMapping)
	sql := "DELETE FROM \"notification\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from notification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for notification")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q notificationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no notificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notification")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o NotificationSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NotificationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Notification slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(notificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"notification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notificationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from notification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for notification")
	}

	if len(notificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Notification) ReloadG() error {
	if o == nil {
		return errors.New("models: no Notification provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Notification) Reload(exec boil.Executor) error {
	ret, err := FindNotification(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty NotificationSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NotificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"notification\".* FROM \"notification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, notificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NotificationSlice")
	}

	*o = slice

	return nil
}

// NotificationExistsG checks if the Notification row exists.
func NotificationExistsG(iD int) (bool, error) {
	return NotificationExists(boil.GetDB(), iD)
}

// NotificationExists checks if the Notification row exists.
func NotificationExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"notification\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if notification exists")
	}

	return exists, nil
}
