// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// IcoPhaseBankAccount is an object representing the database table.
type IcoPhaseBankAccount struct {
	ID                 int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountName        string    `boil:"account_name" json:"account_name" toml:"account_name" yaml:"account_name"`
	RecepientName      string    `boil:"recepient_name" json:"recepient_name" toml:"recepient_name" yaml:"recepient_name"`
	BankName           string    `boil:"bank_name" json:"bank_name" toml:"bank_name" yaml:"bank_name"`
	Iban               string    `boil:"iban" json:"iban" toml:"iban" yaml:"iban"`
	BicSwift           string    `boil:"bic_swift" json:"bic_swift" toml:"bic_swift" yaml:"bic_swift"`
	PaymendUsageString string    `boil:"paymend_usage_string" json:"paymend_usage_string" toml:"paymend_usage_string" yaml:"paymend_usage_string"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy          string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`

	R *icoPhaseBankAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L icoPhaseBankAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IcoPhaseBankAccountColumns = struct {
	ID                 string
	AccountName        string
	RecepientName      string
	BankName           string
	Iban               string
	BicSwift           string
	PaymendUsageString string
	CreatedAt          string
	UpdatedAt          string
	UpdatedBy          string
}{
	ID:                 "id",
	AccountName:        "account_name",
	RecepientName:      "recepient_name",
	BankName:           "bank_name",
	Iban:               "iban",
	BicSwift:           "bic_swift",
	PaymendUsageString: "paymend_usage_string",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	UpdatedBy:          "updated_by",
}

// IcoPhaseBankAccountRels is where relationship names are stored.
var IcoPhaseBankAccountRels = struct {
	IcoPhaseActivatedExchangeCurrencies string
}{
	IcoPhaseActivatedExchangeCurrencies: "IcoPhaseActivatedExchangeCurrencies",
}

// icoPhaseBankAccountR is where relationships are stored.
type icoPhaseBankAccountR struct {
	IcoPhaseActivatedExchangeCurrencies IcoPhaseActivatedExchangeCurrencySlice
}

// NewStruct creates a new relationship struct
func (*icoPhaseBankAccountR) NewStruct() *icoPhaseBankAccountR {
	return &icoPhaseBankAccountR{}
}

// icoPhaseBankAccountL is where Load methods for each relationship are stored.
type icoPhaseBankAccountL struct{}

var (
	icoPhaseBankAccountColumns               = []string{"id", "account_name", "recepient_name", "bank_name", "iban", "bic_swift", "paymend_usage_string", "created_at", "updated_at", "updated_by"}
	icoPhaseBankAccountColumnsWithoutDefault = []string{"account_name", "recepient_name", "bank_name", "iban", "bic_swift", "paymend_usage_string", "updated_by"}
	icoPhaseBankAccountColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	icoPhaseBankAccountPrimaryKeyColumns     = []string{"id"}
)

type (
	// IcoPhaseBankAccountSlice is an alias for a slice of pointers to IcoPhaseBankAccount.
	// This should generally be used opposed to []IcoPhaseBankAccount.
	IcoPhaseBankAccountSlice []*IcoPhaseBankAccount
	// IcoPhaseBankAccountHook is the signature for custom IcoPhaseBankAccount hook methods
	IcoPhaseBankAccountHook func(boil.Executor, *IcoPhaseBankAccount) error

	icoPhaseBankAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	icoPhaseBankAccountType                 = reflect.TypeOf(&IcoPhaseBankAccount{})
	icoPhaseBankAccountMapping              = queries.MakeStructMapping(icoPhaseBankAccountType)
	icoPhaseBankAccountPrimaryKeyMapping, _ = queries.BindMapping(icoPhaseBankAccountType, icoPhaseBankAccountMapping, icoPhaseBankAccountPrimaryKeyColumns)
	icoPhaseBankAccountInsertCacheMut       sync.RWMutex
	icoPhaseBankAccountInsertCache          = make(map[string]insertCache)
	icoPhaseBankAccountUpdateCacheMut       sync.RWMutex
	icoPhaseBankAccountUpdateCache          = make(map[string]updateCache)
	icoPhaseBankAccountUpsertCacheMut       sync.RWMutex
	icoPhaseBankAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var icoPhaseBankAccountBeforeInsertHooks []IcoPhaseBankAccountHook
var icoPhaseBankAccountBeforeUpdateHooks []IcoPhaseBankAccountHook
var icoPhaseBankAccountBeforeDeleteHooks []IcoPhaseBankAccountHook
var icoPhaseBankAccountBeforeUpsertHooks []IcoPhaseBankAccountHook

var icoPhaseBankAccountAfterInsertHooks []IcoPhaseBankAccountHook
var icoPhaseBankAccountAfterSelectHooks []IcoPhaseBankAccountHook
var icoPhaseBankAccountAfterUpdateHooks []IcoPhaseBankAccountHook
var icoPhaseBankAccountAfterDeleteHooks []IcoPhaseBankAccountHook
var icoPhaseBankAccountAfterUpsertHooks []IcoPhaseBankAccountHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IcoPhaseBankAccount) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseBankAccountBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IcoPhaseBankAccount) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseBankAccountBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IcoPhaseBankAccount) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseBankAccountBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IcoPhaseBankAccount) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseBankAccountBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IcoPhaseBankAccount) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseBankAccountAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IcoPhaseBankAccount) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseBankAccountAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IcoPhaseBankAccount) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseBankAccountAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IcoPhaseBankAccount) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseBankAccountAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IcoPhaseBankAccount) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range icoPhaseBankAccountAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIcoPhaseBankAccountHook registers your hook function for all future operations.
func AddIcoPhaseBankAccountHook(hookPoint boil.HookPoint, icoPhaseBankAccountHook IcoPhaseBankAccountHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		icoPhaseBankAccountBeforeInsertHooks = append(icoPhaseBankAccountBeforeInsertHooks, icoPhaseBankAccountHook)
	case boil.BeforeUpdateHook:
		icoPhaseBankAccountBeforeUpdateHooks = append(icoPhaseBankAccountBeforeUpdateHooks, icoPhaseBankAccountHook)
	case boil.BeforeDeleteHook:
		icoPhaseBankAccountBeforeDeleteHooks = append(icoPhaseBankAccountBeforeDeleteHooks, icoPhaseBankAccountHook)
	case boil.BeforeUpsertHook:
		icoPhaseBankAccountBeforeUpsertHooks = append(icoPhaseBankAccountBeforeUpsertHooks, icoPhaseBankAccountHook)
	case boil.AfterInsertHook:
		icoPhaseBankAccountAfterInsertHooks = append(icoPhaseBankAccountAfterInsertHooks, icoPhaseBankAccountHook)
	case boil.AfterSelectHook:
		icoPhaseBankAccountAfterSelectHooks = append(icoPhaseBankAccountAfterSelectHooks, icoPhaseBankAccountHook)
	case boil.AfterUpdateHook:
		icoPhaseBankAccountAfterUpdateHooks = append(icoPhaseBankAccountAfterUpdateHooks, icoPhaseBankAccountHook)
	case boil.AfterDeleteHook:
		icoPhaseBankAccountAfterDeleteHooks = append(icoPhaseBankAccountAfterDeleteHooks, icoPhaseBankAccountHook)
	case boil.AfterUpsertHook:
		icoPhaseBankAccountAfterUpsertHooks = append(icoPhaseBankAccountAfterUpsertHooks, icoPhaseBankAccountHook)
	}
}

// OneG returns a single icoPhaseBankAccount record from the query using the global executor.
func (q icoPhaseBankAccountQuery) OneG() (*IcoPhaseBankAccount, error) {
	return q.One(boil.GetDB())
}

// One returns a single icoPhaseBankAccount record from the query.
func (q icoPhaseBankAccountQuery) One(exec boil.Executor) (*IcoPhaseBankAccount, error) {
	o := &IcoPhaseBankAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ico_phase_bank_account")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all IcoPhaseBankAccount records from the query using the global executor.
func (q icoPhaseBankAccountQuery) AllG() (IcoPhaseBankAccountSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all IcoPhaseBankAccount records from the query.
func (q icoPhaseBankAccountQuery) All(exec boil.Executor) (IcoPhaseBankAccountSlice, error) {
	var o []*IcoPhaseBankAccount

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IcoPhaseBankAccount slice")
	}

	if len(icoPhaseBankAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all IcoPhaseBankAccount records in the query, and panics on error.
func (q icoPhaseBankAccountQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all IcoPhaseBankAccount records in the query.
func (q icoPhaseBankAccountQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ico_phase_bank_account rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q icoPhaseBankAccountQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q icoPhaseBankAccountQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ico_phase_bank_account exists")
	}

	return count > 0, nil
}

// IcoPhaseActivatedExchangeCurrencies retrieves all the ico_phase_activated_exchange_currency's IcoPhaseActivatedExchangeCurrencies with an executor.
func (o *IcoPhaseBankAccount) IcoPhaseActivatedExchangeCurrencies(mods ...qm.QueryMod) icoPhaseActivatedExchangeCurrencyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ico_phase_activated_exchange_currency\".\"ico_phase_bank_account_id\"=?", o.ID),
	)

	query := IcoPhaseActivatedExchangeCurrencies(queryMods...)
	queries.SetFrom(query.Query, "\"ico_phase_activated_exchange_currency\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ico_phase_activated_exchange_currency\".*"})
	}

	return query
}

// LoadIcoPhaseActivatedExchangeCurrencies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (icoPhaseBankAccountL) LoadIcoPhaseActivatedExchangeCurrencies(e boil.Executor, singular bool, maybeIcoPhaseBankAccount interface{}, mods queries.Applicator) error {
	var slice []*IcoPhaseBankAccount
	var object *IcoPhaseBankAccount

	if singular {
		object = maybeIcoPhaseBankAccount.(*IcoPhaseBankAccount)
	} else {
		slice = *maybeIcoPhaseBankAccount.(*[]*IcoPhaseBankAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &icoPhaseBankAccountR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &icoPhaseBankAccountR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`ico_phase_activated_exchange_currency`), qm.WhereIn(`ico_phase_bank_account_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ico_phase_activated_exchange_currency")
	}

	var resultSlice []*IcoPhaseActivatedExchangeCurrency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ico_phase_activated_exchange_currency")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ico_phase_activated_exchange_currency")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ico_phase_activated_exchange_currency")
	}

	if len(icoPhaseActivatedExchangeCurrencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IcoPhaseActivatedExchangeCurrencies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &icoPhaseActivatedExchangeCurrencyR{}
			}
			foreign.R.IcoPhaseBankAccount = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.IcoPhaseBankAccountID) {
				local.R.IcoPhaseActivatedExchangeCurrencies = append(local.R.IcoPhaseActivatedExchangeCurrencies, foreign)
				if foreign.R == nil {
					foreign.R = &icoPhaseActivatedExchangeCurrencyR{}
				}
				foreign.R.IcoPhaseBankAccount = local
				break
			}
		}
	}

	return nil
}

// AddIcoPhaseActivatedExchangeCurrenciesG adds the given related objects to the existing relationships
// of the ico_phase_bank_account, optionally inserting them as new records.
// Appends related to o.R.IcoPhaseActivatedExchangeCurrencies.
// Sets related.R.IcoPhaseBankAccount appropriately.
// Uses the global database handle.
func (o *IcoPhaseBankAccount) AddIcoPhaseActivatedExchangeCurrenciesG(insert bool, related ...*IcoPhaseActivatedExchangeCurrency) error {
	return o.AddIcoPhaseActivatedExchangeCurrencies(boil.GetDB(), insert, related...)
}

// AddIcoPhaseActivatedExchangeCurrencies adds the given related objects to the existing relationships
// of the ico_phase_bank_account, optionally inserting them as new records.
// Appends related to o.R.IcoPhaseActivatedExchangeCurrencies.
// Sets related.R.IcoPhaseBankAccount appropriately.
func (o *IcoPhaseBankAccount) AddIcoPhaseActivatedExchangeCurrencies(exec boil.Executor, insert bool, related ...*IcoPhaseActivatedExchangeCurrency) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IcoPhaseBankAccountID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ico_phase_activated_exchange_currency\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"ico_phase_bank_account_id"}),
				strmangle.WhereClause("\"", "\"", 2, icoPhaseActivatedExchangeCurrencyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IcoPhaseBankAccountID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &icoPhaseBankAccountR{
			IcoPhaseActivatedExchangeCurrencies: related,
		}
	} else {
		o.R.IcoPhaseActivatedExchangeCurrencies = append(o.R.IcoPhaseActivatedExchangeCurrencies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &icoPhaseActivatedExchangeCurrencyR{
				IcoPhaseBankAccount: o,
			}
		} else {
			rel.R.IcoPhaseBankAccount = o
		}
	}
	return nil
}

// SetIcoPhaseActivatedExchangeCurrenciesG removes all previously related items of the
// ico_phase_bank_account replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IcoPhaseBankAccount's IcoPhaseActivatedExchangeCurrencies accordingly.
// Replaces o.R.IcoPhaseActivatedExchangeCurrencies with related.
// Sets related.R.IcoPhaseBankAccount's IcoPhaseActivatedExchangeCurrencies accordingly.
// Uses the global database handle.
func (o *IcoPhaseBankAccount) SetIcoPhaseActivatedExchangeCurrenciesG(insert bool, related ...*IcoPhaseActivatedExchangeCurrency) error {
	return o.SetIcoPhaseActivatedExchangeCurrencies(boil.GetDB(), insert, related...)
}

// SetIcoPhaseActivatedExchangeCurrencies removes all previously related items of the
// ico_phase_bank_account replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IcoPhaseBankAccount's IcoPhaseActivatedExchangeCurrencies accordingly.
// Replaces o.R.IcoPhaseActivatedExchangeCurrencies with related.
// Sets related.R.IcoPhaseBankAccount's IcoPhaseActivatedExchangeCurrencies accordingly.
func (o *IcoPhaseBankAccount) SetIcoPhaseActivatedExchangeCurrencies(exec boil.Executor, insert bool, related ...*IcoPhaseActivatedExchangeCurrency) error {
	query := "update \"ico_phase_activated_exchange_currency\" set \"ico_phase_bank_account_id\" = null where \"ico_phase_bank_account_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IcoPhaseActivatedExchangeCurrencies {
			queries.SetScanner(&rel.IcoPhaseBankAccountID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IcoPhaseBankAccount = nil
		}

		o.R.IcoPhaseActivatedExchangeCurrencies = nil
	}
	return o.AddIcoPhaseActivatedExchangeCurrencies(exec, insert, related...)
}

// RemoveIcoPhaseActivatedExchangeCurrenciesG relationships from objects passed in.
// Removes related items from R.IcoPhaseActivatedExchangeCurrencies (uses pointer comparison, removal does not keep order)
// Sets related.R.IcoPhaseBankAccount.
// Uses the global database handle.
func (o *IcoPhaseBankAccount) RemoveIcoPhaseActivatedExchangeCurrenciesG(related ...*IcoPhaseActivatedExchangeCurrency) error {
	return o.RemoveIcoPhaseActivatedExchangeCurrencies(boil.GetDB(), related...)
}

// RemoveIcoPhaseActivatedExchangeCurrencies relationships from objects passed in.
// Removes related items from R.IcoPhaseActivatedExchangeCurrencies (uses pointer comparison, removal does not keep order)
// Sets related.R.IcoPhaseBankAccount.
func (o *IcoPhaseBankAccount) RemoveIcoPhaseActivatedExchangeCurrencies(exec boil.Executor, related ...*IcoPhaseActivatedExchangeCurrency) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IcoPhaseBankAccountID, nil)
		if rel.R != nil {
			rel.R.IcoPhaseBankAccount = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("ico_phase_bank_account_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IcoPhaseActivatedExchangeCurrencies {
			if rel != ri {
				continue
			}

			ln := len(o.R.IcoPhaseActivatedExchangeCurrencies)
			if ln > 1 && i < ln-1 {
				o.R.IcoPhaseActivatedExchangeCurrencies[i] = o.R.IcoPhaseActivatedExchangeCurrencies[ln-1]
			}
			o.R.IcoPhaseActivatedExchangeCurrencies = o.R.IcoPhaseActivatedExchangeCurrencies[:ln-1]
			break
		}
	}

	return nil
}

// IcoPhaseBankAccounts retrieves all the records using an executor.
func IcoPhaseBankAccounts(mods ...qm.QueryMod) icoPhaseBankAccountQuery {
	mods = append(mods, qm.From("\"ico_phase_bank_account\""))
	return icoPhaseBankAccountQuery{NewQuery(mods...)}
}

// FindIcoPhaseBankAccountG retrieves a single record by ID.
func FindIcoPhaseBankAccountG(iD int, selectCols ...string) (*IcoPhaseBankAccount, error) {
	return FindIcoPhaseBankAccount(boil.GetDB(), iD, selectCols...)
}

// FindIcoPhaseBankAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIcoPhaseBankAccount(exec boil.Executor, iD int, selectCols ...string) (*IcoPhaseBankAccount, error) {
	icoPhaseBankAccountObj := &IcoPhaseBankAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ico_phase_bank_account\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, icoPhaseBankAccountObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ico_phase_bank_account")
	}

	return icoPhaseBankAccountObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *IcoPhaseBankAccount) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IcoPhaseBankAccount) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ico_phase_bank_account provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(icoPhaseBankAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	icoPhaseBankAccountInsertCacheMut.RLock()
	cache, cached := icoPhaseBankAccountInsertCache[key]
	icoPhaseBankAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			icoPhaseBankAccountColumns,
			icoPhaseBankAccountColumnsWithDefault,
			icoPhaseBankAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(icoPhaseBankAccountType, icoPhaseBankAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(icoPhaseBankAccountType, icoPhaseBankAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ico_phase_bank_account\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ico_phase_bank_account\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ico_phase_bank_account")
	}

	if !cached {
		icoPhaseBankAccountInsertCacheMut.Lock()
		icoPhaseBankAccountInsertCache[key] = cache
		icoPhaseBankAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single IcoPhaseBankAccount record using the global executor.
// See Update for more documentation.
func (o *IcoPhaseBankAccount) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the IcoPhaseBankAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IcoPhaseBankAccount) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	icoPhaseBankAccountUpdateCacheMut.RLock()
	cache, cached := icoPhaseBankAccountUpdateCache[key]
	icoPhaseBankAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			icoPhaseBankAccountColumns,
			icoPhaseBankAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ico_phase_bank_account, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ico_phase_bank_account\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, icoPhaseBankAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(icoPhaseBankAccountType, icoPhaseBankAccountMapping, append(wl, icoPhaseBankAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ico_phase_bank_account row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ico_phase_bank_account")
	}

	if !cached {
		icoPhaseBankAccountUpdateCacheMut.Lock()
		icoPhaseBankAccountUpdateCache[key] = cache
		icoPhaseBankAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q icoPhaseBankAccountQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q icoPhaseBankAccountQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ico_phase_bank_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ico_phase_bank_account")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o IcoPhaseBankAccountSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IcoPhaseBankAccountSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icoPhaseBankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ico_phase_bank_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, icoPhaseBankAccountPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in icoPhaseBankAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all icoPhaseBankAccount")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *IcoPhaseBankAccount) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IcoPhaseBankAccount) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ico_phase_bank_account provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(icoPhaseBankAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	icoPhaseBankAccountUpsertCacheMut.RLock()
	cache, cached := icoPhaseBankAccountUpsertCache[key]
	icoPhaseBankAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			icoPhaseBankAccountColumns,
			icoPhaseBankAccountColumnsWithDefault,
			icoPhaseBankAccountColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			icoPhaseBankAccountColumns,
			icoPhaseBankAccountPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert ico_phase_bank_account, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(icoPhaseBankAccountPrimaryKeyColumns))
			copy(conflict, icoPhaseBankAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ico_phase_bank_account\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(icoPhaseBankAccountType, icoPhaseBankAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(icoPhaseBankAccountType, icoPhaseBankAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ico_phase_bank_account")
	}

	if !cached {
		icoPhaseBankAccountUpsertCacheMut.Lock()
		icoPhaseBankAccountUpsertCache[key] = cache
		icoPhaseBankAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single IcoPhaseBankAccount record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *IcoPhaseBankAccount) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single IcoPhaseBankAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IcoPhaseBankAccount) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IcoPhaseBankAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), icoPhaseBankAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"ico_phase_bank_account\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ico_phase_bank_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ico_phase_bank_account")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q icoPhaseBankAccountQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no icoPhaseBankAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ico_phase_bank_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ico_phase_bank_account")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o IcoPhaseBankAccountSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IcoPhaseBankAccountSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IcoPhaseBankAccount slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(icoPhaseBankAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icoPhaseBankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ico_phase_bank_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, icoPhaseBankAccountPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from icoPhaseBankAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ico_phase_bank_account")
	}

	if len(icoPhaseBankAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *IcoPhaseBankAccount) ReloadG() error {
	if o == nil {
		return errors.New("models: no IcoPhaseBankAccount provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IcoPhaseBankAccount) Reload(exec boil.Executor) error {
	ret, err := FindIcoPhaseBankAccount(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IcoPhaseBankAccountSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty IcoPhaseBankAccountSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IcoPhaseBankAccountSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IcoPhaseBankAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), icoPhaseBankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ico_phase_bank_account\".* FROM \"ico_phase_bank_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, icoPhaseBankAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IcoPhaseBankAccountSlice")
	}

	*o = slice

	return nil
}

// IcoPhaseBankAccountExistsG checks if the IcoPhaseBankAccount row exists.
func IcoPhaseBankAccountExistsG(iD int) (bool, error) {
	return IcoPhaseBankAccountExists(boil.GetDB(), iD)
}

// IcoPhaseBankAccountExists checks if the IcoPhaseBankAccount row exists.
func IcoPhaseBankAccountExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ico_phase_bank_account\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ico_phase_bank_account exists")
	}

	return exists, nil
}
