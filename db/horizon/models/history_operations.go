// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package horizon

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// HistoryOperation is an object representing the database table.
type HistoryOperation struct {
	ID               int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	TransactionID    int64     `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	ApplicationOrder int       `boil:"application_order" json:"application_order" toml:"application_order" yaml:"application_order"`
	Type             int       `boil:"type" json:"type" toml:"type" yaml:"type"`
	Details          null.JSON `boil:"details" json:"details,omitempty" toml:"details" yaml:"details,omitempty"`
	SourceAccount    string    `boil:"source_account" json:"source_account" toml:"source_account" yaml:"source_account"`

	R *historyOperationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L historyOperationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HistoryOperationColumns = struct {
	ID               string
	TransactionID    string
	ApplicationOrder string
	Type             string
	Details          string
	SourceAccount    string
}{
	ID:               "id",
	TransactionID:    "transaction_id",
	ApplicationOrder: "application_order",
	Type:             "type",
	Details:          "details",
	SourceAccount:    "source_account",
}

// HistoryOperationRels is where relationship names are stored.
var HistoryOperationRels = struct {
}{}

// historyOperationR is where relationships are stored.
type historyOperationR struct {
}

// NewStruct creates a new relationship struct
func (*historyOperationR) NewStruct() *historyOperationR {
	return &historyOperationR{}
}

// historyOperationL is where Load methods for each relationship are stored.
type historyOperationL struct{}

var (
	historyOperationColumns               = []string{"id", "transaction_id", "application_order", "type", "details", "source_account"}
	historyOperationColumnsWithoutDefault = []string{"id", "transaction_id", "application_order", "type", "details"}
	historyOperationColumnsWithDefault    = []string{"source_account"}
	historyOperationPrimaryKeyColumns     = []string{"id"}
)

type (
	// HistoryOperationSlice is an alias for a slice of pointers to HistoryOperation.
	// This should generally be used opposed to []HistoryOperation.
	HistoryOperationSlice []*HistoryOperation
	// HistoryOperationHook is the signature for custom HistoryOperation hook methods
	HistoryOperationHook func(boil.Executor, *HistoryOperation) error

	historyOperationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	historyOperationType                 = reflect.TypeOf(&HistoryOperation{})
	historyOperationMapping              = queries.MakeStructMapping(historyOperationType)
	historyOperationPrimaryKeyMapping, _ = queries.BindMapping(historyOperationType, historyOperationMapping, historyOperationPrimaryKeyColumns)
	historyOperationInsertCacheMut       sync.RWMutex
	historyOperationInsertCache          = make(map[string]insertCache)
	historyOperationUpdateCacheMut       sync.RWMutex
	historyOperationUpdateCache          = make(map[string]updateCache)
	historyOperationUpsertCacheMut       sync.RWMutex
	historyOperationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var historyOperationBeforeInsertHooks []HistoryOperationHook
var historyOperationBeforeUpdateHooks []HistoryOperationHook
var historyOperationBeforeDeleteHooks []HistoryOperationHook
var historyOperationBeforeUpsertHooks []HistoryOperationHook

var historyOperationAfterInsertHooks []HistoryOperationHook
var historyOperationAfterSelectHooks []HistoryOperationHook
var historyOperationAfterUpdateHooks []HistoryOperationHook
var historyOperationAfterDeleteHooks []HistoryOperationHook
var historyOperationAfterUpsertHooks []HistoryOperationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HistoryOperation) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range historyOperationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HistoryOperation) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range historyOperationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HistoryOperation) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range historyOperationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HistoryOperation) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range historyOperationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HistoryOperation) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range historyOperationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HistoryOperation) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range historyOperationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HistoryOperation) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range historyOperationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HistoryOperation) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range historyOperationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HistoryOperation) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range historyOperationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHistoryOperationHook registers your hook function for all future operations.
func AddHistoryOperationHook(hookPoint boil.HookPoint, historyOperationHook HistoryOperationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		historyOperationBeforeInsertHooks = append(historyOperationBeforeInsertHooks, historyOperationHook)
	case boil.BeforeUpdateHook:
		historyOperationBeforeUpdateHooks = append(historyOperationBeforeUpdateHooks, historyOperationHook)
	case boil.BeforeDeleteHook:
		historyOperationBeforeDeleteHooks = append(historyOperationBeforeDeleteHooks, historyOperationHook)
	case boil.BeforeUpsertHook:
		historyOperationBeforeUpsertHooks = append(historyOperationBeforeUpsertHooks, historyOperationHook)
	case boil.AfterInsertHook:
		historyOperationAfterInsertHooks = append(historyOperationAfterInsertHooks, historyOperationHook)
	case boil.AfterSelectHook:
		historyOperationAfterSelectHooks = append(historyOperationAfterSelectHooks, historyOperationHook)
	case boil.AfterUpdateHook:
		historyOperationAfterUpdateHooks = append(historyOperationAfterUpdateHooks, historyOperationHook)
	case boil.AfterDeleteHook:
		historyOperationAfterDeleteHooks = append(historyOperationAfterDeleteHooks, historyOperationHook)
	case boil.AfterUpsertHook:
		historyOperationAfterUpsertHooks = append(historyOperationAfterUpsertHooks, historyOperationHook)
	}
}

// OneG returns a single historyOperation record from the query using the global executor.
func (q historyOperationQuery) OneG() (*HistoryOperation, error) {
	return q.One(boil.GetDB())
}

// One returns a single historyOperation record from the query.
func (q historyOperationQuery) One(exec boil.Executor) (*HistoryOperation, error) {
	o := &HistoryOperation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "horizon: failed to execute a one query for history_operations")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all HistoryOperation records from the query using the global executor.
func (q historyOperationQuery) AllG() (HistoryOperationSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all HistoryOperation records from the query.
func (q historyOperationQuery) All(exec boil.Executor) (HistoryOperationSlice, error) {
	var o []*HistoryOperation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "horizon: failed to assign all query results to HistoryOperation slice")
	}

	if len(historyOperationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all HistoryOperation records in the query, and panics on error.
func (q historyOperationQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all HistoryOperation records in the query.
func (q historyOperationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: failed to count history_operations rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q historyOperationQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q historyOperationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "horizon: failed to check if history_operations exists")
	}

	return count > 0, nil
}

// HistoryOperations retrieves all the records using an executor.
func HistoryOperations(mods ...qm.QueryMod) historyOperationQuery {
	mods = append(mods, qm.From("\"history_operations\""))
	return historyOperationQuery{NewQuery(mods...)}
}

// FindHistoryOperationG retrieves a single record by ID.
func FindHistoryOperationG(iD int64, selectCols ...string) (*HistoryOperation, error) {
	return FindHistoryOperation(boil.GetDB(), iD, selectCols...)
}

// FindHistoryOperation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHistoryOperation(exec boil.Executor, iD int64, selectCols ...string) (*HistoryOperation, error) {
	historyOperationObj := &HistoryOperation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"history_operations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, historyOperationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "horizon: unable to select from history_operations")
	}

	return historyOperationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *HistoryOperation) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HistoryOperation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("horizon: no history_operations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(historyOperationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	historyOperationInsertCacheMut.RLock()
	cache, cached := historyOperationInsertCache[key]
	historyOperationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			historyOperationColumns,
			historyOperationColumnsWithDefault,
			historyOperationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(historyOperationType, historyOperationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(historyOperationType, historyOperationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"history_operations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"history_operations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "horizon: unable to insert into history_operations")
	}

	if !cached {
		historyOperationInsertCacheMut.Lock()
		historyOperationInsertCache[key] = cache
		historyOperationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single HistoryOperation record using the global executor.
// See Update for more documentation.
func (o *HistoryOperation) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the HistoryOperation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HistoryOperation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	historyOperationUpdateCacheMut.RLock()
	cache, cached := historyOperationUpdateCache[key]
	historyOperationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			historyOperationColumns,
			historyOperationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("horizon: unable to update history_operations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"history_operations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, historyOperationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(historyOperationType, historyOperationMapping, append(wl, historyOperationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to update history_operations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: failed to get rows affected by update for history_operations")
	}

	if !cached {
		historyOperationUpdateCacheMut.Lock()
		historyOperationUpdateCache[key] = cache
		historyOperationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q historyOperationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to update all for history_operations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to retrieve rows affected for history_operations")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o HistoryOperationSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HistoryOperationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("horizon: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), historyOperationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"history_operations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, historyOperationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to update all in historyOperation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to retrieve rows affected all in update all historyOperation")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *HistoryOperation) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HistoryOperation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("horizon: no history_operations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(historyOperationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	historyOperationUpsertCacheMut.RLock()
	cache, cached := historyOperationUpsertCache[key]
	historyOperationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			historyOperationColumns,
			historyOperationColumnsWithDefault,
			historyOperationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			historyOperationColumns,
			historyOperationPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("horizon: unable to upsert history_operations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(historyOperationPrimaryKeyColumns))
			copy(conflict, historyOperationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"history_operations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(historyOperationType, historyOperationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(historyOperationType, historyOperationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "horizon: unable to upsert history_operations")
	}

	if !cached {
		historyOperationUpsertCacheMut.Lock()
		historyOperationUpsertCache[key] = cache
		historyOperationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single HistoryOperation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *HistoryOperation) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single HistoryOperation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HistoryOperation) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("horizon: no HistoryOperation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), historyOperationPrimaryKeyMapping)
	sql := "DELETE FROM \"history_operations\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to delete from history_operations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: failed to get rows affected by delete for history_operations")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q historyOperationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("horizon: no historyOperationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to delete all from history_operations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: failed to get rows affected by deleteall for history_operations")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o HistoryOperationSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HistoryOperationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("horizon: no HistoryOperation slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(historyOperationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), historyOperationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"history_operations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, historyOperationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to delete all from historyOperation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: failed to get rows affected by deleteall for history_operations")
	}

	if len(historyOperationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *HistoryOperation) ReloadG() error {
	if o == nil {
		return errors.New("horizon: no HistoryOperation provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HistoryOperation) Reload(exec boil.Executor) error {
	ret, err := FindHistoryOperation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HistoryOperationSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("horizon: empty HistoryOperationSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HistoryOperationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HistoryOperationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), historyOperationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"history_operations\".* FROM \"history_operations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, historyOperationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "horizon: unable to reload all in HistoryOperationSlice")
	}

	*o = slice

	return nil
}

// HistoryOperationExistsG checks if the HistoryOperation row exists.
func HistoryOperationExistsG(iD int64) (bool, error) {
	return HistoryOperationExists(boil.GetDB(), iD)
}

// HistoryOperationExists checks if the HistoryOperation row exists.
func HistoryOperationExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"history_operations\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "horizon: unable to check if history_operations exists")
	}

	return exists, nil
}
