// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package horizon

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// HistoryAsset is an object representing the database table.
type HistoryAsset struct {
	ID          int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	AssetType   string `boil:"asset_type" json:"asset_type" toml:"asset_type" yaml:"asset_type"`
	AssetCode   string `boil:"asset_code" json:"asset_code" toml:"asset_code" yaml:"asset_code"`
	AssetIssuer string `boil:"asset_issuer" json:"asset_issuer" toml:"asset_issuer" yaml:"asset_issuer"`

	R *historyAssetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L historyAssetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HistoryAssetColumns = struct {
	ID          string
	AssetType   string
	AssetCode   string
	AssetIssuer string
}{
	ID:          "id",
	AssetType:   "asset_type",
	AssetCode:   "asset_code",
	AssetIssuer: "asset_issuer",
}

// HistoryAssetRels is where relationship names are stored.
var HistoryAssetRels = struct {
	IDAssetStat               string
	BaseAssetHistoryTrades    string
	CounterAssetHistoryTrades string
}{
	IDAssetStat:               "IDAssetStat",
	BaseAssetHistoryTrades:    "BaseAssetHistoryTrades",
	CounterAssetHistoryTrades: "CounterAssetHistoryTrades",
}

// historyAssetR is where relationships are stored.
type historyAssetR struct {
	IDAssetStat               *AssetStat
	BaseAssetHistoryTrades    HistoryTradeSlice
	CounterAssetHistoryTrades HistoryTradeSlice
}

// NewStruct creates a new relationship struct
func (*historyAssetR) NewStruct() *historyAssetR {
	return &historyAssetR{}
}

// historyAssetL is where Load methods for each relationship are stored.
type historyAssetL struct{}

var (
	historyAssetColumns               = []string{"id", "asset_type", "asset_code", "asset_issuer"}
	historyAssetColumnsWithoutDefault = []string{"asset_type", "asset_code", "asset_issuer"}
	historyAssetColumnsWithDefault    = []string{"id"}
	historyAssetPrimaryKeyColumns     = []string{"id"}
)

type (
	// HistoryAssetSlice is an alias for a slice of pointers to HistoryAsset.
	// This should generally be used opposed to []HistoryAsset.
	HistoryAssetSlice []*HistoryAsset
	// HistoryAssetHook is the signature for custom HistoryAsset hook methods
	HistoryAssetHook func(boil.Executor, *HistoryAsset) error

	historyAssetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	historyAssetType                 = reflect.TypeOf(&HistoryAsset{})
	historyAssetMapping              = queries.MakeStructMapping(historyAssetType)
	historyAssetPrimaryKeyMapping, _ = queries.BindMapping(historyAssetType, historyAssetMapping, historyAssetPrimaryKeyColumns)
	historyAssetInsertCacheMut       sync.RWMutex
	historyAssetInsertCache          = make(map[string]insertCache)
	historyAssetUpdateCacheMut       sync.RWMutex
	historyAssetUpdateCache          = make(map[string]updateCache)
	historyAssetUpsertCacheMut       sync.RWMutex
	historyAssetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var historyAssetBeforeInsertHooks []HistoryAssetHook
var historyAssetBeforeUpdateHooks []HistoryAssetHook
var historyAssetBeforeDeleteHooks []HistoryAssetHook
var historyAssetBeforeUpsertHooks []HistoryAssetHook

var historyAssetAfterInsertHooks []HistoryAssetHook
var historyAssetAfterSelectHooks []HistoryAssetHook
var historyAssetAfterUpdateHooks []HistoryAssetHook
var historyAssetAfterDeleteHooks []HistoryAssetHook
var historyAssetAfterUpsertHooks []HistoryAssetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HistoryAsset) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range historyAssetBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HistoryAsset) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range historyAssetBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HistoryAsset) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range historyAssetBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HistoryAsset) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range historyAssetBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HistoryAsset) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range historyAssetAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HistoryAsset) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range historyAssetAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HistoryAsset) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range historyAssetAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HistoryAsset) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range historyAssetAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HistoryAsset) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range historyAssetAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHistoryAssetHook registers your hook function for all future operations.
func AddHistoryAssetHook(hookPoint boil.HookPoint, historyAssetHook HistoryAssetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		historyAssetBeforeInsertHooks = append(historyAssetBeforeInsertHooks, historyAssetHook)
	case boil.BeforeUpdateHook:
		historyAssetBeforeUpdateHooks = append(historyAssetBeforeUpdateHooks, historyAssetHook)
	case boil.BeforeDeleteHook:
		historyAssetBeforeDeleteHooks = append(historyAssetBeforeDeleteHooks, historyAssetHook)
	case boil.BeforeUpsertHook:
		historyAssetBeforeUpsertHooks = append(historyAssetBeforeUpsertHooks, historyAssetHook)
	case boil.AfterInsertHook:
		historyAssetAfterInsertHooks = append(historyAssetAfterInsertHooks, historyAssetHook)
	case boil.AfterSelectHook:
		historyAssetAfterSelectHooks = append(historyAssetAfterSelectHooks, historyAssetHook)
	case boil.AfterUpdateHook:
		historyAssetAfterUpdateHooks = append(historyAssetAfterUpdateHooks, historyAssetHook)
	case boil.AfterDeleteHook:
		historyAssetAfterDeleteHooks = append(historyAssetAfterDeleteHooks, historyAssetHook)
	case boil.AfterUpsertHook:
		historyAssetAfterUpsertHooks = append(historyAssetAfterUpsertHooks, historyAssetHook)
	}
}

// OneG returns a single historyAsset record from the query using the global executor.
func (q historyAssetQuery) OneG() (*HistoryAsset, error) {
	return q.One(boil.GetDB())
}

// One returns a single historyAsset record from the query.
func (q historyAssetQuery) One(exec boil.Executor) (*HistoryAsset, error) {
	o := &HistoryAsset{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "horizon: failed to execute a one query for history_assets")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all HistoryAsset records from the query using the global executor.
func (q historyAssetQuery) AllG() (HistoryAssetSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all HistoryAsset records from the query.
func (q historyAssetQuery) All(exec boil.Executor) (HistoryAssetSlice, error) {
	var o []*HistoryAsset

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "horizon: failed to assign all query results to HistoryAsset slice")
	}

	if len(historyAssetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all HistoryAsset records in the query, and panics on error.
func (q historyAssetQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all HistoryAsset records in the query.
func (q historyAssetQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: failed to count history_assets rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q historyAssetQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q historyAssetQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "horizon: failed to check if history_assets exists")
	}

	return count > 0, nil
}

// IDAssetStat pointed to by the foreign key.
func (o *HistoryAsset) IDAssetStat(mods ...qm.QueryMod) assetStatQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := AssetStats(queryMods...)
	queries.SetFrom(query.Query, "\"asset_stats\"")

	return query
}

// BaseAssetHistoryTrades retrieves all the history_trade's HistoryTrades with an executor via base_asset_id column.
func (o *HistoryAsset) BaseAssetHistoryTrades(mods ...qm.QueryMod) historyTradeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"history_trades\".\"base_asset_id\"=?", o.ID),
	)

	query := HistoryTrades(queryMods...)
	queries.SetFrom(query.Query, "\"history_trades\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"history_trades\".*"})
	}

	return query
}

// CounterAssetHistoryTrades retrieves all the history_trade's HistoryTrades with an executor via counter_asset_id column.
func (o *HistoryAsset) CounterAssetHistoryTrades(mods ...qm.QueryMod) historyTradeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"history_trades\".\"counter_asset_id\"=?", o.ID),
	)

	query := HistoryTrades(queryMods...)
	queries.SetFrom(query.Query, "\"history_trades\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"history_trades\".*"})
	}

	return query
}

// LoadIDAssetStat allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (historyAssetL) LoadIDAssetStat(e boil.Executor, singular bool, maybeHistoryAsset interface{}, mods queries.Applicator) error {
	var slice []*HistoryAsset
	var object *HistoryAsset

	if singular {
		object = maybeHistoryAsset.(*HistoryAsset)
	} else {
		slice = *maybeHistoryAsset.(*[]*HistoryAsset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &historyAssetR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &historyAssetR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`asset_stats`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AssetStat")
	}

	var resultSlice []*AssetStat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AssetStat")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for asset_stats")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for asset_stats")
	}

	if len(historyAssetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IDAssetStat = foreign
		if foreign.R == nil {
			foreign.R = &assetStatR{}
		}
		foreign.R.ID = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ID {
				local.R.IDAssetStat = foreign
				if foreign.R == nil {
					foreign.R = &assetStatR{}
				}
				foreign.R.ID = local
				break
			}
		}
	}

	return nil
}

// LoadBaseAssetHistoryTrades allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (historyAssetL) LoadBaseAssetHistoryTrades(e boil.Executor, singular bool, maybeHistoryAsset interface{}, mods queries.Applicator) error {
	var slice []*HistoryAsset
	var object *HistoryAsset

	if singular {
		object = maybeHistoryAsset.(*HistoryAsset)
	} else {
		slice = *maybeHistoryAsset.(*[]*HistoryAsset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &historyAssetR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &historyAssetR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`history_trades`), qm.WhereIn(`base_asset_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load history_trades")
	}

	var resultSlice []*HistoryTrade
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice history_trades")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on history_trades")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for history_trades")
	}

	if len(historyTradeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BaseAssetHistoryTrades = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &historyTradeR{}
			}
			foreign.R.BaseAsset = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BaseAssetID {
				local.R.BaseAssetHistoryTrades = append(local.R.BaseAssetHistoryTrades, foreign)
				if foreign.R == nil {
					foreign.R = &historyTradeR{}
				}
				foreign.R.BaseAsset = local
				break
			}
		}
	}

	return nil
}

// LoadCounterAssetHistoryTrades allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (historyAssetL) LoadCounterAssetHistoryTrades(e boil.Executor, singular bool, maybeHistoryAsset interface{}, mods queries.Applicator) error {
	var slice []*HistoryAsset
	var object *HistoryAsset

	if singular {
		object = maybeHistoryAsset.(*HistoryAsset)
	} else {
		slice = *maybeHistoryAsset.(*[]*HistoryAsset)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &historyAssetR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &historyAssetR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`history_trades`), qm.WhereIn(`counter_asset_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load history_trades")
	}

	var resultSlice []*HistoryTrade
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice history_trades")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on history_trades")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for history_trades")
	}

	if len(historyTradeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CounterAssetHistoryTrades = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &historyTradeR{}
			}
			foreign.R.CounterAsset = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CounterAssetID {
				local.R.CounterAssetHistoryTrades = append(local.R.CounterAssetHistoryTrades, foreign)
				if foreign.R == nil {
					foreign.R = &historyTradeR{}
				}
				foreign.R.CounterAsset = local
				break
			}
		}
	}

	return nil
}

// SetIDAssetStatG of the historyAsset to the related item.
// Sets o.R.IDAssetStat to related.
// Adds o to related.R.ID.
// Uses the global database handle.
func (o *HistoryAsset) SetIDAssetStatG(insert bool, related *AssetStat) error {
	return o.SetIDAssetStat(boil.GetDB(), insert, related)
}

// SetIDAssetStat of the historyAsset to the related item.
// Sets o.R.IDAssetStat to related.
// Adds o to related.R.ID.
func (o *HistoryAsset) SetIDAssetStat(exec boil.Executor, insert bool, related *AssetStat) error {
	var err error

	if insert {
		related.ID = o.ID

		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"asset_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"id"}),
			strmangle.WhereClause("\"", "\"", 2, assetStatPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ID = o.ID

	}

	if o.R == nil {
		o.R = &historyAssetR{
			IDAssetStat: related,
		}
	} else {
		o.R.IDAssetStat = related
	}

	if related.R == nil {
		related.R = &assetStatR{
			ID: o,
		}
	} else {
		related.R.ID = o
	}
	return nil
}

// AddBaseAssetHistoryTradesG adds the given related objects to the existing relationships
// of the history_asset, optionally inserting them as new records.
// Appends related to o.R.BaseAssetHistoryTrades.
// Sets related.R.BaseAsset appropriately.
// Uses the global database handle.
func (o *HistoryAsset) AddBaseAssetHistoryTradesG(insert bool, related ...*HistoryTrade) error {
	return o.AddBaseAssetHistoryTrades(boil.GetDB(), insert, related...)
}

// AddBaseAssetHistoryTrades adds the given related objects to the existing relationships
// of the history_asset, optionally inserting them as new records.
// Appends related to o.R.BaseAssetHistoryTrades.
// Sets related.R.BaseAsset appropriately.
func (o *HistoryAsset) AddBaseAssetHistoryTrades(exec boil.Executor, insert bool, related ...*HistoryTrade) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BaseAssetID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"history_trades\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"base_asset_id"}),
				strmangle.WhereClause("\"", "\"", 2, historyTradePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.HistoryOperationID, rel.Order}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BaseAssetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &historyAssetR{
			BaseAssetHistoryTrades: related,
		}
	} else {
		o.R.BaseAssetHistoryTrades = append(o.R.BaseAssetHistoryTrades, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &historyTradeR{
				BaseAsset: o,
			}
		} else {
			rel.R.BaseAsset = o
		}
	}
	return nil
}

// AddCounterAssetHistoryTradesG adds the given related objects to the existing relationships
// of the history_asset, optionally inserting them as new records.
// Appends related to o.R.CounterAssetHistoryTrades.
// Sets related.R.CounterAsset appropriately.
// Uses the global database handle.
func (o *HistoryAsset) AddCounterAssetHistoryTradesG(insert bool, related ...*HistoryTrade) error {
	return o.AddCounterAssetHistoryTrades(boil.GetDB(), insert, related...)
}

// AddCounterAssetHistoryTrades adds the given related objects to the existing relationships
// of the history_asset, optionally inserting them as new records.
// Appends related to o.R.CounterAssetHistoryTrades.
// Sets related.R.CounterAsset appropriately.
func (o *HistoryAsset) AddCounterAssetHistoryTrades(exec boil.Executor, insert bool, related ...*HistoryTrade) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CounterAssetID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"history_trades\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"counter_asset_id"}),
				strmangle.WhereClause("\"", "\"", 2, historyTradePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.HistoryOperationID, rel.Order}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CounterAssetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &historyAssetR{
			CounterAssetHistoryTrades: related,
		}
	} else {
		o.R.CounterAssetHistoryTrades = append(o.R.CounterAssetHistoryTrades, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &historyTradeR{
				CounterAsset: o,
			}
		} else {
			rel.R.CounterAsset = o
		}
	}
	return nil
}

// HistoryAssets retrieves all the records using an executor.
func HistoryAssets(mods ...qm.QueryMod) historyAssetQuery {
	mods = append(mods, qm.From("\"history_assets\""))
	return historyAssetQuery{NewQuery(mods...)}
}

// FindHistoryAssetG retrieves a single record by ID.
func FindHistoryAssetG(iD int, selectCols ...string) (*HistoryAsset, error) {
	return FindHistoryAsset(boil.GetDB(), iD, selectCols...)
}

// FindHistoryAsset retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHistoryAsset(exec boil.Executor, iD int, selectCols ...string) (*HistoryAsset, error) {
	historyAssetObj := &HistoryAsset{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"history_assets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, historyAssetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "horizon: unable to select from history_assets")
	}

	return historyAssetObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *HistoryAsset) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HistoryAsset) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("horizon: no history_assets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(historyAssetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	historyAssetInsertCacheMut.RLock()
	cache, cached := historyAssetInsertCache[key]
	historyAssetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			historyAssetColumns,
			historyAssetColumnsWithDefault,
			historyAssetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(historyAssetType, historyAssetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(historyAssetType, historyAssetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"history_assets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"history_assets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "horizon: unable to insert into history_assets")
	}

	if !cached {
		historyAssetInsertCacheMut.Lock()
		historyAssetInsertCache[key] = cache
		historyAssetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single HistoryAsset record using the global executor.
// See Update for more documentation.
func (o *HistoryAsset) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the HistoryAsset.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HistoryAsset) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	historyAssetUpdateCacheMut.RLock()
	cache, cached := historyAssetUpdateCache[key]
	historyAssetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			historyAssetColumns,
			historyAssetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("horizon: unable to update history_assets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"history_assets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, historyAssetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(historyAssetType, historyAssetMapping, append(wl, historyAssetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to update history_assets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: failed to get rows affected by update for history_assets")
	}

	if !cached {
		historyAssetUpdateCacheMut.Lock()
		historyAssetUpdateCache[key] = cache
		historyAssetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q historyAssetQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to update all for history_assets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to retrieve rows affected for history_assets")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o HistoryAssetSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HistoryAssetSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("horizon: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), historyAssetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"history_assets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, historyAssetPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to update all in historyAsset slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to retrieve rows affected all in update all historyAsset")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *HistoryAsset) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HistoryAsset) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("horizon: no history_assets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(historyAssetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	historyAssetUpsertCacheMut.RLock()
	cache, cached := historyAssetUpsertCache[key]
	historyAssetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			historyAssetColumns,
			historyAssetColumnsWithDefault,
			historyAssetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			historyAssetColumns,
			historyAssetPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("horizon: unable to upsert history_assets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(historyAssetPrimaryKeyColumns))
			copy(conflict, historyAssetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"history_assets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(historyAssetType, historyAssetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(historyAssetType, historyAssetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "horizon: unable to upsert history_assets")
	}

	if !cached {
		historyAssetUpsertCacheMut.Lock()
		historyAssetUpsertCache[key] = cache
		historyAssetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single HistoryAsset record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *HistoryAsset) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single HistoryAsset record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HistoryAsset) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("horizon: no HistoryAsset provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), historyAssetPrimaryKeyMapping)
	sql := "DELETE FROM \"history_assets\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to delete from history_assets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: failed to get rows affected by delete for history_assets")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q historyAssetQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("horizon: no historyAssetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to delete all from history_assets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: failed to get rows affected by deleteall for history_assets")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o HistoryAssetSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HistoryAssetSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("horizon: no HistoryAsset slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(historyAssetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), historyAssetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"history_assets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, historyAssetPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to delete all from historyAsset slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: failed to get rows affected by deleteall for history_assets")
	}

	if len(historyAssetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *HistoryAsset) ReloadG() error {
	if o == nil {
		return errors.New("horizon: no HistoryAsset provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HistoryAsset) Reload(exec boil.Executor) error {
	ret, err := FindHistoryAsset(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HistoryAssetSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("horizon: empty HistoryAssetSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HistoryAssetSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HistoryAssetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), historyAssetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"history_assets\".* FROM \"history_assets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, historyAssetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "horizon: unable to reload all in HistoryAssetSlice")
	}

	*o = slice

	return nil
}

// HistoryAssetExistsG checks if the HistoryAsset row exists.
func HistoryAssetExistsG(iD int) (bool, error) {
	return HistoryAssetExists(boil.GetDB(), iD)
}

// HistoryAssetExists checks if the HistoryAsset row exists.
func HistoryAssetExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"history_assets\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "horizon: unable to check if history_assets exists")
	}

	return exists, nil
}
