// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package horizon

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AssetStat is an object representing the database table.
type AssetStat struct {
	ID          int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Amount      string `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	NumAccounts int    `boil:"num_accounts" json:"num_accounts" toml:"num_accounts" yaml:"num_accounts"`
	Flags       int16  `boil:"flags" json:"flags" toml:"flags" yaml:"flags"`
	Toml        string `boil:"toml" json:"toml" toml:"toml" yaml:"toml"`

	R *assetStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assetStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssetStatColumns = struct {
	ID          string
	Amount      string
	NumAccounts string
	Flags       string
	Toml        string
}{
	ID:          "id",
	Amount:      "amount",
	NumAccounts: "num_accounts",
	Flags:       "flags",
	Toml:        "toml",
}

// AssetStatRels is where relationship names are stored.
var AssetStatRels = struct {
	ID string
}{
	ID: "ID",
}

// assetStatR is where relationships are stored.
type assetStatR struct {
	ID *HistoryAsset
}

// NewStruct creates a new relationship struct
func (*assetStatR) NewStruct() *assetStatR {
	return &assetStatR{}
}

// assetStatL is where Load methods for each relationship are stored.
type assetStatL struct{}

var (
	assetStatColumns               = []string{"id", "amount", "num_accounts", "flags", "toml"}
	assetStatColumnsWithoutDefault = []string{"id", "amount", "num_accounts", "flags", "toml"}
	assetStatColumnsWithDefault    = []string{}
	assetStatPrimaryKeyColumns     = []string{"id"}
)

type (
	// AssetStatSlice is an alias for a slice of pointers to AssetStat.
	// This should generally be used opposed to []AssetStat.
	AssetStatSlice []*AssetStat
	// AssetStatHook is the signature for custom AssetStat hook methods
	AssetStatHook func(boil.Executor, *AssetStat) error

	assetStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assetStatType                 = reflect.TypeOf(&AssetStat{})
	assetStatMapping              = queries.MakeStructMapping(assetStatType)
	assetStatPrimaryKeyMapping, _ = queries.BindMapping(assetStatType, assetStatMapping, assetStatPrimaryKeyColumns)
	assetStatInsertCacheMut       sync.RWMutex
	assetStatInsertCache          = make(map[string]insertCache)
	assetStatUpdateCacheMut       sync.RWMutex
	assetStatUpdateCache          = make(map[string]updateCache)
	assetStatUpsertCacheMut       sync.RWMutex
	assetStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var assetStatBeforeInsertHooks []AssetStatHook
var assetStatBeforeUpdateHooks []AssetStatHook
var assetStatBeforeDeleteHooks []AssetStatHook
var assetStatBeforeUpsertHooks []AssetStatHook

var assetStatAfterInsertHooks []AssetStatHook
var assetStatAfterSelectHooks []AssetStatHook
var assetStatAfterUpdateHooks []AssetStatHook
var assetStatAfterDeleteHooks []AssetStatHook
var assetStatAfterUpsertHooks []AssetStatHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssetStat) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetStatBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssetStat) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range assetStatBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssetStat) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range assetStatBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssetStat) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetStatBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssetStat) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetStatAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssetStat) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range assetStatAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssetStat) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range assetStatAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssetStat) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range assetStatAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssetStat) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetStatAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssetStatHook registers your hook function for all future operations.
func AddAssetStatHook(hookPoint boil.HookPoint, assetStatHook AssetStatHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		assetStatBeforeInsertHooks = append(assetStatBeforeInsertHooks, assetStatHook)
	case boil.BeforeUpdateHook:
		assetStatBeforeUpdateHooks = append(assetStatBeforeUpdateHooks, assetStatHook)
	case boil.BeforeDeleteHook:
		assetStatBeforeDeleteHooks = append(assetStatBeforeDeleteHooks, assetStatHook)
	case boil.BeforeUpsertHook:
		assetStatBeforeUpsertHooks = append(assetStatBeforeUpsertHooks, assetStatHook)
	case boil.AfterInsertHook:
		assetStatAfterInsertHooks = append(assetStatAfterInsertHooks, assetStatHook)
	case boil.AfterSelectHook:
		assetStatAfterSelectHooks = append(assetStatAfterSelectHooks, assetStatHook)
	case boil.AfterUpdateHook:
		assetStatAfterUpdateHooks = append(assetStatAfterUpdateHooks, assetStatHook)
	case boil.AfterDeleteHook:
		assetStatAfterDeleteHooks = append(assetStatAfterDeleteHooks, assetStatHook)
	case boil.AfterUpsertHook:
		assetStatAfterUpsertHooks = append(assetStatAfterUpsertHooks, assetStatHook)
	}
}

// OneG returns a single assetStat record from the query using the global executor.
func (q assetStatQuery) OneG() (*AssetStat, error) {
	return q.One(boil.GetDB())
}

// One returns a single assetStat record from the query.
func (q assetStatQuery) One(exec boil.Executor) (*AssetStat, error) {
	o := &AssetStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "horizon: failed to execute a one query for asset_stats")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AssetStat records from the query using the global executor.
func (q assetStatQuery) AllG() (AssetStatSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all AssetStat records from the query.
func (q assetStatQuery) All(exec boil.Executor) (AssetStatSlice, error) {
	var o []*AssetStat

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "horizon: failed to assign all query results to AssetStat slice")
	}

	if len(assetStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AssetStat records in the query, and panics on error.
func (q assetStatQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all AssetStat records in the query.
func (q assetStatQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: failed to count asset_stats rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q assetStatQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q assetStatQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "horizon: failed to check if asset_stats exists")
	}

	return count > 0, nil
}

// ID pointed to by the foreign key.
func (o *AssetStat) ID(mods ...qm.QueryMod) historyAssetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := HistoryAssets(queryMods...)
	queries.SetFrom(query.Query, "\"history_assets\"")

	return query
}

// LoadID allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assetStatL) LoadID(e boil.Executor, singular bool, maybeAssetStat interface{}, mods queries.Applicator) error {
	var slice []*AssetStat
	var object *AssetStat

	if singular {
		object = maybeAssetStat.(*AssetStat)
	} else {
		slice = *maybeAssetStat.(*[]*AssetStat)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assetStatR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assetStatR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`history_assets`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load HistoryAsset")
	}

	var resultSlice []*HistoryAsset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice HistoryAsset")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for history_assets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for history_assets")
	}

	if len(assetStatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ID = foreign
		if foreign.R == nil {
			foreign.R = &historyAssetR{}
		}
		foreign.R.IDAssetStat = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ID {
				local.R.ID = foreign
				if foreign.R == nil {
					foreign.R = &historyAssetR{}
				}
				foreign.R.IDAssetStat = local
				break
			}
		}
	}

	return nil
}

// SetIDG of the assetStat to the related item.
// Sets o.R.ID to related.
// Adds o to related.R.IDAssetStat.
// Uses the global database handle.
func (o *AssetStat) SetIDG(insert bool, related *HistoryAsset) error {
	return o.SetID(boil.GetDB(), insert, related)
}

// SetID of the assetStat to the related item.
// Sets o.R.ID to related.
// Adds o to related.R.IDAssetStat.
func (o *AssetStat) SetID(exec boil.Executor, insert bool, related *HistoryAsset) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id"}),
		strmangle.WhereClause("\"", "\"", 2, assetStatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ID = related.ID
	if o.R == nil {
		o.R = &assetStatR{
			ID: related,
		}
	} else {
		o.R.ID = related
	}

	if related.R == nil {
		related.R = &historyAssetR{
			IDAssetStat: o,
		}
	} else {
		related.R.IDAssetStat = o
	}

	return nil
}

// AssetStats retrieves all the records using an executor.
func AssetStats(mods ...qm.QueryMod) assetStatQuery {
	mods = append(mods, qm.From("\"asset_stats\""))
	return assetStatQuery{NewQuery(mods...)}
}

// FindAssetStatG retrieves a single record by ID.
func FindAssetStatG(iD int64, selectCols ...string) (*AssetStat, error) {
	return FindAssetStat(boil.GetDB(), iD, selectCols...)
}

// FindAssetStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssetStat(exec boil.Executor, iD int64, selectCols ...string) (*AssetStat, error) {
	assetStatObj := &AssetStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"asset_stats\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, assetStatObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "horizon: unable to select from asset_stats")
	}

	return assetStatObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AssetStat) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssetStat) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("horizon: no asset_stats provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assetStatInsertCacheMut.RLock()
	cache, cached := assetStatInsertCache[key]
	assetStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assetStatColumns,
			assetStatColumnsWithDefault,
			assetStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assetStatType, assetStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assetStatType, assetStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"asset_stats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"asset_stats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "horizon: unable to insert into asset_stats")
	}

	if !cached {
		assetStatInsertCacheMut.Lock()
		assetStatInsertCache[key] = cache
		assetStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single AssetStat record using the global executor.
// See Update for more documentation.
func (o *AssetStat) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the AssetStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssetStat) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assetStatUpdateCacheMut.RLock()
	cache, cached := assetStatUpdateCache[key]
	assetStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assetStatColumns,
			assetStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("horizon: unable to update asset_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"asset_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assetStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assetStatType, assetStatMapping, append(wl, assetStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to update asset_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: failed to get rows affected by update for asset_stats")
	}

	if !cached {
		assetStatUpdateCacheMut.Lock()
		assetStatUpdateCache[key] = cache
		assetStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assetStatQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to update all for asset_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to retrieve rows affected for asset_stats")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AssetStatSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssetStatSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("horizon: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"asset_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assetStatPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to update all in assetStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to retrieve rows affected all in update all assetStat")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AssetStat) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssetStat) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("horizon: no asset_stats provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assetStatUpsertCacheMut.RLock()
	cache, cached := assetStatUpsertCache[key]
	assetStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assetStatColumns,
			assetStatColumnsWithDefault,
			assetStatColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			assetStatColumns,
			assetStatPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("horizon: unable to upsert asset_stats, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assetStatPrimaryKeyColumns))
			copy(conflict, assetStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"asset_stats\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assetStatType, assetStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assetStatType, assetStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "horizon: unable to upsert asset_stats")
	}

	if !cached {
		assetStatUpsertCacheMut.Lock()
		assetStatUpsertCache[key] = cache
		assetStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single AssetStat record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AssetStat) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single AssetStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssetStat) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("horizon: no AssetStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assetStatPrimaryKeyMapping)
	sql := "DELETE FROM \"asset_stats\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to delete from asset_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: failed to get rows affected by delete for asset_stats")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assetStatQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("horizon: no assetStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to delete all from asset_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: failed to get rows affected by deleteall for asset_stats")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AssetStatSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssetStatSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("horizon: no AssetStat slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(assetStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"asset_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assetStatPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "horizon: unable to delete all from assetStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "horizon: failed to get rows affected by deleteall for asset_stats")
	}

	if len(assetStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AssetStat) ReloadG() error {
	if o == nil {
		return errors.New("horizon: no AssetStat provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssetStat) Reload(exec boil.Executor) error {
	ret, err := FindAssetStat(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssetStatSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("horizon: empty AssetStatSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssetStatSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssetStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"asset_stats\".* FROM \"asset_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assetStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "horizon: unable to reload all in AssetStatSlice")
	}

	*o = slice

	return nil
}

// AssetStatExistsG checks if the AssetStat row exists.
func AssetStatExistsG(iD int64) (bool, error) {
	return AssetStatExists(boil.GetDB(), iD)
}

// AssetStatExists checks if the AssetStat row exists.
func AssetStatExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"asset_stats\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "horizon: unable to check if asset_stats exists")
	}

	return exists, nil
}
