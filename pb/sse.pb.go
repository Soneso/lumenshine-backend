// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sse.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ListenForRequest struct {
	Base                 *BaseRequest `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	OpTypes              int64        `protobuf:"varint,2,opt,name=op_types,json=opTypes,proto3" json:"op_types,omitempty"`
	SourceReciver        string       `protobuf:"bytes,3,opt,name=source_reciver,json=sourceReciver,proto3" json:"source_reciver,omitempty"`
	StellarAccount       string       `protobuf:"bytes,4,opt,name=stellar_account,json=stellarAccount,proto3" json:"stellar_account,omitempty"`
	WithResume           bool         `protobuf:"varint,5,opt,name=with_resume,json=withResume,proto3" json:"with_resume,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListenForRequest) Reset()         { *m = ListenForRequest{} }
func (m *ListenForRequest) String() string { return proto.CompactTextString(m) }
func (*ListenForRequest) ProtoMessage()    {}
func (*ListenForRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_302dad79fff882c0, []int{0}
}

func (m *ListenForRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListenForRequest.Unmarshal(m, b)
}
func (m *ListenForRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListenForRequest.Marshal(b, m, deterministic)
}
func (m *ListenForRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListenForRequest.Merge(m, src)
}
func (m *ListenForRequest) XXX_Size() int {
	return xxx_messageInfo_ListenForRequest.Size(m)
}
func (m *ListenForRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListenForRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListenForRequest proto.InternalMessageInfo

func (m *ListenForRequest) GetBase() *BaseRequest {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ListenForRequest) GetOpTypes() int64 {
	if m != nil {
		return m.OpTypes
	}
	return 0
}

func (m *ListenForRequest) GetSourceReciver() string {
	if m != nil {
		return m.SourceReciver
	}
	return ""
}

func (m *ListenForRequest) GetStellarAccount() string {
	if m != nil {
		return m.StellarAccount
	}
	return ""
}

func (m *ListenForRequest) GetWithResume() bool {
	if m != nil {
		return m.WithResume
	}
	return false
}

func init() {
	proto.RegisterType((*ListenForRequest)(nil), "pb.ListenForRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SSEServiceClient is the client API for SSEService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SSEServiceClient interface {
	ListenFor(ctx context.Context, in *ListenForRequest, opts ...grpc.CallOption) (*Empty, error)
}

type sSEServiceClient struct {
	cc *grpc.ClientConn
}

func NewSSEServiceClient(cc *grpc.ClientConn) SSEServiceClient {
	return &sSEServiceClient{cc}
}

func (c *sSEServiceClient) ListenFor(ctx context.Context, in *ListenForRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.SSEService/ListenFor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SSEServiceServer is the server API for SSEService service.
type SSEServiceServer interface {
	ListenFor(context.Context, *ListenForRequest) (*Empty, error)
}

func RegisterSSEServiceServer(s *grpc.Server, srv SSEServiceServer) {
	s.RegisterService(&_SSEService_serviceDesc, srv)
}

func _SSEService_ListenFor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenForRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SSEServiceServer).ListenFor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SSEService/ListenFor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SSEServiceServer).ListenFor(ctx, req.(*ListenForRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SSEService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SSEService",
	HandlerType: (*SSEServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListenFor",
			Handler:    _SSEService_ListenFor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sse.proto",
}

func init() { proto.RegisterFile("sse.proto", fileDescriptor_302dad79fff882c0) }

var fileDescriptor_302dad79fff882c0 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd0, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x06, 0x60, 0xdc, 0x16, 0x68, 0xae, 0xd0, 0x22, 0x8b, 0xc1, 0x74, 0x21, 0x2a, 0x42, 0x64,
	0xca, 0x50, 0x56, 0x16, 0x90, 0xca, 0xc4, 0xe4, 0xb0, 0x47, 0xb6, 0x75, 0x82, 0x48, 0x69, 0x6d,
	0x7c, 0x97, 0xa2, 0x3e, 0x1f, 0x2f, 0x86, 0x12, 0x57, 0x0c, 0x8c, 0xf7, 0xfd, 0x37, 0xdc, 0x7f,
	0x90, 0x11, 0x61, 0x19, 0xa2, 0x67, 0x2f, 0x47, 0xc1, 0x2e, 0x2f, 0x3e, 0x5a, 0x6f, 0x4d, 0x9b,
	0x64, 0xf5, 0x23, 0xe0, 0xea, 0xad, 0x21, 0xc6, 0xdd, 0xab, 0x8f, 0x1a, 0xbf, 0x3a, 0x24, 0x96,
	0x77, 0x30, 0xb1, 0x86, 0x50, 0x89, 0x5c, 0x14, 0xb3, 0xf5, 0xa2, 0x0c, 0xb6, 0x7c, 0x31, 0x84,
	0xc7, 0x58, 0x0f, 0xa1, 0xbc, 0x81, 0xa9, 0x0f, 0x35, 0x1f, 0x02, 0x92, 0x1a, 0xe5, 0xa2, 0x18,
	0xeb, 0x73, 0x1f, 0xde, 0xfb, 0x51, 0xde, 0xc3, 0x9c, 0x7c, 0x17, 0x1d, 0xd6, 0x11, 0x5d, 0xb3,
	0xc7, 0xa8, 0xc6, 0xb9, 0x28, 0x32, 0x7d, 0x99, 0x54, 0x27, 0x94, 0x0f, 0xb0, 0x20, 0xc6, 0xb6,
	0x35, 0xb1, 0x36, 0xce, 0xf9, 0x6e, 0xc7, 0x6a, 0x32, 0xec, 0xcd, 0x8f, 0xfc, 0x9c, 0x54, 0xde,
	0xc2, 0xec, 0xbb, 0xe1, 0xcf, 0x3a, 0x22, 0x75, 0x5b, 0x54, 0xa7, 0xb9, 0x28, 0xa6, 0x1a, 0x7a,
	0xd2, 0x83, 0xac, 0x9f, 0x00, 0xaa, 0x6a, 0x53, 0x61, 0xdc, 0x37, 0x0e, 0x65, 0x09, 0xd9, 0x5f,
	0x25, 0x79, 0xdd, 0x5f, 0xff, 0xbf, 0xe1, 0x32, 0xeb, 0x75, 0xb3, 0x0d, 0x7c, 0x58, 0x9d, 0xd8,
	0xb3, 0xe1, 0x15, 0x8f, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x9f, 0x99, 0xec, 0x29, 0x01,
	0x00, 0x00,
}
